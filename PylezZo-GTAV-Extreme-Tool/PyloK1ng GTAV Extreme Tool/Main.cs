using System;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Net;
using System.Threading;
using System.Threading.Tasks;
using System.Diagnostics;
using System.Text.RegularExpressions;
using System.IO;
using System.Xml;
using DevExpress;
using DevExpress.XtraEditors;
using DevExpress.XtraBars;
using PS3Lib;
using PylezZo_GTAV_Extreme_Tool.Pylo;

namespace PylezZo_GTAV_Extreme_Tool
{
    public partial class Main : DevExpress.XtraEditors.XtraForm
    {
        #region Definitions
        public static PS3API PS3 = new PS3API();
        public static PS3TMAPI.ConnectStatus connectStatus;
        public static uint ProcessID;
        public static uint[] processIDs;
        public static string snresult;
        private static string usage;
        public static string Info;
        public static string color;
        public static string Status;
        public static string MemStatus;
        string ActualToolVersion = "v1.0.1";
        string ConnectionMethod = "";
        private bool AdvInfo = true;
        public uint ChiappaDX;
        public static uint Interval = 136u;
        private int SZCF = 1;
        private bool datag1OK = false;
        private bool datag2OK = false;
        private bool datag3OK = false;
        private bool datag4OK = false;
        private bool datag5OK = false;
        public static int PlayersInfoInt = 0;
        private static bool PlayersInfoOpen = false;
        public static string PlayerIP = "";
        public string MsgColor = "";
        public static string PlayerName = "";
        private static string Temperature = "OK";
        private static bool shopp = false;
        public static int length1 = 99;
        public static Regex nameValidation = new Regex("^[a-zA-Z0-9-_]+$");
        private static int[] SpawnedBodyG = new int[0];
        private static int[] SpawnedPedLobby = new int[0];
        private static int[] AttachedtoPlayerLobby = new int[0];
        private static int AttachedEntity = 0;
        private static int SpawnedObject;
        private static int AttachedObject;
        private static int AttachedObjtoPlayer;
        public uint Boh;
        private bool[] DataG1Tasks = new bool[17];
        private bool[] DataG1LockInVeh = new bool[17];
        private bool[] DataG1ForceF = new bool[17];
        private bool[] DataG1InfStars = new bool[17];
        private int[] DataG1WantedLevel = new int[17];
        private bool[] DataG1DropMoney = new bool[17];
        private bool[] DataG3GodMode = new bool[17];
        private bool[] DataG3Invisible = new bool[17];
        private bool[] DataG3ohk = new bool[17];
        private bool[] DataG4loopshoot = new bool[17];
        private bool[] DataG5GodMode = new bool[17];
        private bool[] DataG5Invisible = new bool[17];
        private bool[] DataG5ohk = new bool[17];
        public static uint uint_9;
        private uint uint_10;
        private uint uint_11;
        private uint uint_12;
        private uint uint_13;
        private uint uint_14;
        private uint uint_16;
        private float ClientFloatX;
        private float ClientFloatY;
        private float ClientFloatZ;
        public static uint waypointX;
        public static uint waypointY;
        public float[] ClientTP = new float[3];
        private byte[] byte_4;
        private byte[] byte_2;
        private byte[] byte_3;
        public static uint ChiappaSX = 31916916;
        public uint StaCeppa;
        private int VehSpawned2;
        public static bool stopcalling;
        private static string PsnNameSet = "";
        public static uint YS = 0x41143344;
        public static uint TS = 0x200255C;
        public static uint CT = 0x205C27F;
        public static uint CT2 = 0x205C337;
        public static uint CT3 = 0x205C3EF;
        public static uint CT4 = 0x205C4A7;
        public static uint CT5 = 0x205C55F;
        public static uint CN = 0x205C266;
        public static uint CN2 = 0x205C31E;
        public static uint CI2 = 0x205C257;
        public static uint DC = 0x205C257;
        private Dictionary<uint, string> Figa = new Dictionary<uint, string>();
        private bool Attached;
        private static string[] PositionsN;
        private static float[] XCF;
        private static float[] YCF;
        private static float[] ZCF;
        private bool bool_1;
        private uint uint_5;
        private uint uint_6;
        public static int[] Create9;
        public static int ccc;
        public static int sss;
        public static int[] zzz;
        public static int aaa;
        public static int bbb;
        public static int ddd;
        public static int eee;
        public static int fff;
        public static int ffff;
        public static int CreatedNumber8;
        public int Veh1;
        public static int[] SpawnPed;
        public static int SpawnedPed;
        public static int[] EntityCreated2;
        public static int[] EntityCreated3;
        public static int[] EntityCreated4;
        public static int[] EntityCreated5;
        public static int[] EntityCreated6;
        public static int[] EntityCreated7;
        public static int[] EntityCreated8;
        public static byte[] Normalmodelman1;
        public static byte[] Normalmodelman2;
        public static float[] float_0;
        private static int int_2;
        private static int int_1;
        public static int[] EntityCreated10;
        public static int CreatedNumber10;
        public static uint OffTheRadarPointer;
        private uint uint_7;
        public static uint uint_8;
        private uint uint_2;
        private byte[] byte_1;
        private uint uint_3;
        private uint uint_4;
        bool garUpdating = false;
        public uint garageoffset = 0;
        const uint LICENSECOLOR = 11;
        const uint CARTYPEOFFSET = 176;
        private byte[] ModderProtON = new byte[] { 0x4E, 0x80, 0x00, 0x20 };
        private byte[] ModderProtOFF = new byte[] { 0x7C, 0x08, 0x02, 0xA6 };
        Dictionary<string, string> VehicleModels = new Dictionary<string, string>();
        
        private static string[] fullobjarr = new string[0];
        private static bool fullobjcopied = false;
        private static string[] fullobjarr2 = new string[0];
        private static bool fullobjcopied2 = false;
        private static string[] mainobjarr = new string[] { "UFO", "Ferris Wheel", "Train, Oil", "Soccer Ball", "Parachute", "Cable Car", "Beach Fire", "Windmill", "Barge", "WTF Thing", "Safe", "Radar", "Drug Paller", "Gold Trolley", "Weed Plant", "Roller Car", "Water Corpse", "Dummy", "ATM", "Toilet", "Jet", "Turbine" };
        private static int[] ExplosionType = new int[] { 0, 3, 4, 5, 7, 8, 12, 13, 14, 16, 20, 22, 26, 32, 33, 34, 36 };

        private uint[] uint_99 = new uint[] { 19709880u, 19710844u };
        private byte[] byte_99 = new byte[] { 78, 128, 0, 32 };
        public static int[] Ranks = new int[] { 0, 800, 2100, 3800, 6100, 9500, 12500, 16000, 19800, 24000, 28500, 33400, 38700, 44200, 50200, 56400, 63000, 69900, 77100, 84700, 92500, 100700, 109200, 118000, 127100, 136500, 146200, 156200, 166500, 177100, 188000, 199200, 210700, 222400, 234500, 246800, 259400, 272300, 285500, 299000, 312700, 326800, 341000, 355600, 370500, 385600, 401000, 416600, 432600, 448800, 465200, 482000, 499000, 516300, 533800, 551600, 569600, 588000, 606500, 625400, 644500, 663800, 683400, 703300, 723400, 743800, 764500, 785400, 806500, 827900, 849600, 871500, 893600, 916000, 938700, 961600, 984700, 1008100, 1031800, 1055700, 1079800, 1104200, 1128800, 1153700, 1178800, 1204200, 1229800, 1255600, 1281700, 1308100, 1334600, 1361400, 1388500, 1415800, 1443300, 1471100, 1499100, 1527300, 1555800, 1584350, 1612950, 1641600, 1670300, 1699050, 1727850, 1756700, 1785600, 1814550, 1843550, 1872600, 1901700, 1930850, 1960050, 1989300, 2018600, 2047950, 2077350, 2106800, 2136300, 2165850, 2195450, 2225100, 2254800, 2284550, 2314350, 2344200, 2374100, 2404050, 2434050, 2464100, 2494200, 2524350, 2554550, 2584800, 2615100, 2645450, 2675850, 2706300, 2736800, 2767350, 2797950, 2828600, 2859300, 2890050, 2920850, 2951700, 2982600, 3013550, 3044550, 3075600, 3106700, 3137850, 3169050, 3200300, 3231600, 3262950, 3294350, 3325800, 3357300, 3388850, 3420450, 3452100, 3483800, 3515550, 3547350, 3579200, 3611100, 3643050, 3675050, 3707100, 3739200, 3771350, 3803550, 3835800, 3868100, 3900450, 3932850, 3965300, 3997800, 4030350, 4062950, 4095600, 4128300, 4161050, 4193850, 4226700, 4259600, 4292550, 4325550, 4358600, 4391700, 4424850, 4458050, 4491300, 4524600, 4557950, 4591350, 4624800, 4658300, 4691850, 4725450, 4759100, 4792800, 4826550, 4860350, 4894200, 4928100, 4962050, 4996050, 5030100, 5064200, 5098350, 5132550, 5166800, 5201100, 5235450, 5269850, 5304300, 5338800, 5373350, 5407950, 5442600, 5477300, 5512050, 5546850, 5581700, 5616600,
            5651550, 5686550, 5721600, 5756700, 5791850, 5827050, 5862300, 5897600, 5932950, 5968350, 6003800, 6039300, 6074850, 6110450, 6146100, 6181800, 6217550, 6253350, 6289200, 6325100, 6361050, 6397050, 6433100, 6469200, 6505350, 6541550, 6577800, 6614100, 6650450, 6686850, 6723300, 6759800, 6796350, 6832950, 6869600, 6906300, 6943050, 6979850, 7016700, 7053600, 7090550, 7127550, 7164600, 7201700, 7238850, 7276050, 7313300, 7350600, 7387950, 7425350, 7462800, 7500300, 7537850, 7575450, 7613100, 7650800, 7688550, 7726350, 7764200, 7802100, 7840050, 7878050, 7916100, 7954200, 7992350, 8030550, 8068800, 8107100, 8145450, 8183850, 8222300, 8260800, 8299350, 8337950, 8376600, 8415300, 8454050, 8492850, 8531700, 8570600, 8609550, 8648550, 8687600, 8726700, 8765850, 8805050, 8844300, 8883600, 8922950, 8962350, 9001800, 9041300, 9080850, 9120450, 9160100, 9199800, 9239550, 9279350, 9319200, 9359100, 9399050, 9439050, 9479100, 9519200, 9559350, 9599550, 9639800, 9680100, 9720450, 9760850, 9801300, 9841800, 9882350, 9922950, 9963600, 10004300, 10045050, 10085850, 10126700, 10167600, 10208550, 10249550, 10290600, 10331700, 10372850, 10414050, 10455300, 10496600, 10537950, 10579350, 10620800, 10662300, 10703850, 10745450, 10787100, 10828800, 10870550, 10912350, 10954200, 10996100, 11038050, 11080050, 11122100, 11164200, 11206350, 11248550, 11290800, 11333100, 11375450, 11417850, 11460300, 11502800, 11545350, 11587950, 11630600, 11673300, 11716050, 11758850, 11801700, 11844600, 11887550, 11930550, 11973600, 12016700, 12059850, 12103050, 12146300, 12189600, 12232950, 12276350, 12319800, 12363300, 12406850, 12450450, 12494100, 12537800, 12581550, 12625350, 12669200, 12713100, 12757050, 12801050, 12845100, 12889200, 12933350, 12977550, 13021800, 13066100, 13110450, 13154850, 13199300, 13243800, 13288350, 13332950, 13377600, 13422300, 13467050, 13511850, 13556700, 13601600, 13646550, 13691550, 13736600, 13781700, 13826850, 13872050, 13917300, 13962600,
            14007950, 14053350, 14098800, 14144300, 14189850, 14235450, 14281100, 14326800, 14372550, 14418350, 14464200, 14510100, 14556050, 14602050, 14648100, 14694200, 14740350, 14786550, 14832800, 14879100, 14925450, 14971850, 15018300, 15064800, 15111350, 15157950, 15204600, 15251300, 15298050, 15344850, 15391700, 15438600, 15485550, 15532550, 15579600, 15626700, 15673850, 15721050, 15768300, 15815600, 15862950, 15910350, 15957800, 16005300, 16052850, 16100450, 16148100, 16195800, 16243550, 16291350, 16339200, 16387100, 16435050, 16483050, 16531100, 16579200, 16627350, 16675550, 16723800, 16772100, 16820450, 16868850, 16917300, 16965800, 17014350, 17062950, 17111600, 17160300, 17209050, 17257850, 17306700, 17355600, 17404550, 17453550, 17502600, 17551700, 17600850, 17650050, 17699300, 17748600, 17797950, 17847350, 17896800, 17946300, 17995850, 18045450, 18095100, 18144800, 18194550, 18244350, 18294200, 18344100, 18394050, 18444050, 18494100, 18544200, 18594350, 18644550, 18694800, 18745100, 18795450, 18845850, 18896300, 18946800, 18997350, 19047950, 19098600, 19149300, 19200050, 19250850, 19301700, 19352600, 19403550, 19454550, 19505600, 19556700, 19607850, 19659050, 19710300, 19761600, 19812950, 19864350, 19915800, 19967300, 20018850, 20070450, 20122100, 20173800, 20225550, 20277350, 20329200, 20381100, 20433050, 20485050, 20537100, 20589200, 20641350, 20693550, 20745800, 20798100, 20850450, 20902850, 20955300, 21007800, 21060350, 21112950, 21165600, 21218300, 21271050, 21323850, 21376700, 21429600, 21482550, 21535550, 21588600, 21641700, 21694850, 21748050, 21801300, 21854600, 21907950, 21961350, 22014800, 22068300, 22121850, 22175450, 22229100, 22282800, 22336550, 22390350, 22444200, 22498100, 22552050, 22606050, 22660100, 22714200, 22768350, 22822550, 22876800, 22931100, 22985450, 23039850, 23094300, 23148800, 23203350, 23257950, 23312600, 23367300, 23422050, 23476850, 23531700, 23586600, 23641550, 23696550, 23751600, 23806700, 23861850,
            23917050, 23972300, 24027600, 24082950, 24138350, 24193800, 24249300, 24304850, 24360450, 24416100, 24471800, 24527550, 24583350, 24639200, 24695100, 24751050, 24807050, 24863100, 24919200, 24975350, 25031550, 25087800, 25144100, 25200450, 25256850, 25313300, 25369800, 25426350, 25482950, 25539600, 25596300, 25653050, 25709850, 25766700, 25823600, 25880550, 25937550, 25994600, 26051700, 26108850, 26166050, 26223300, 26280600, 26337950, 26395350, 26452800, 26510300, 26567850, 26625450, 26683100, 26740800, 26798550, 26856350, 26914200, 26972100, 27030050, 27088050, 27146100, 27204200, 27262350, 27320550, 27378800, 27437100, 27495450, 27553850, 27612300, 27670800, 27729350, 27787950, 27846600, 27905300, 27964050, 28022850, 28081700, 28140600, 28199550, 28258550, 28317600, 28376700, 28435850, 28495050, 28554300, 28613600, 28672950, 28732350, 28791800, 28851300, 28910850, 28970450, 29030100, 29089800, 29149550, 29209350, 29269200, 29329100, 29389050, 29449050, 29509100, 29569200, 29629350, 29689550, 29749800, 29810100, 29870450, 29930850, 29991300, 30051800, 30112350, 30172950, 30233600, 30294300, 30355050, 30415850, 30476700, 30537600, 30598550, 30659550, 30720600, 30781700, 30842850, 30904050, 30965300, 31026600, 31087950, 31149350, 31210800, 31272300, 31333850, 31395450, 31457100, 31518800, 31580550, 31642350, 31704200, 31766100, 31828050, 31890050, 31952100, 32014200, 32076350, 32138550, 32200800, 32263100, 32325450, 32387850, 32450300, 32512800, 32575350, 32637950, 32700600, 32763300, 32826050, 32888850, 32951700, 33014600, 33077550, 33140550, 33203600, 33266700, 33329850, 33393050, 33456300, 33519600, 33582950, 33646350, 33709800, 33773300, 33836850, 33900450, 33964100, 34027800, 34091550, 34155350, 34219200, 34283100, 34347050, 34411050, 34475100, 34539200, 34603350, 34667550, 34731800, 34796100, 34860450, 34924850, 34989300, 35053800, 35118350, 35182950, 35247600, 35312300, 35377050, 35441850, 35506700, 35571600, 35636550, 35701550,
            35766600, 35831700, 35896850, 35962050, 36027300, 36092600, 36157950, 36223350, 36288800, 36354300, 36419850, 36485450, 36551100, 36616800, 36682550, 36748350, 36814200, 36880100, 36946050, 37012050, 37078100, 37144200, 37210350, 37276550, 37342800, 37409100, 37475450, 37541850, 37608300, 37674800, 37741350, 37807950, 37874600, 37941300, 38008050, 38074850, 38141700, 38208600, 38275550, 38342550, 38409600, 38476700, 38543850, 38611050, 38678300, 38745600, 38812950, 38880350, 38947800, 39015300, 39082850, 39150450, 39218100, 39285800, 39353550, 39421350, 39489200, 39557100, 39625050, 39693050, 39761100, 39829200, 39897350, 39965550, 40033800, 40102100, 40170450, 40238850, 40307300, 40375800, 40444350, 40512950, 40581600, 40650300, 40719050, 40787850, 40856700, 40925600, 40994550, 41063550, 41132600, 41201700, 41270850, 41340050, 41409300, 41478600, 41547950, 41617350, 41686800, 41756300, 41825850, 41895450, 41965100, 42034800, 42104550, 42174350, 42244200, 42314100, 42384050, 42454050, 42524100, 42594200, 42664350, 42734550, 42804800, 42875100, 42945450, 43015850, 43086300, 43156800, 43227350, 43297950, 43368600, 43439300, 43510050, 43580850, 43651700, 43722600, 43793550, 43864550, 43935600, 44006700, 44077850, 44149050, 44220300, 44291600, 44362950, 44434350, 44505800, 44577300, 44648850, 44720450, 44792100, 44863800, 44935550, 45007350, 45079200, 45151100, 45223050, 45295050, 45367100, 45439200, 45511350, 45583550, 45655800, 45728100, 45800450, 45872850, 45945300, 46017800, 46090350, 46162950, 46235600, 46308300, 46381050, 46453850, 46526700, 46599600, 46672550, 46745550, 46818600, 46891700, 46964850, 47038050, 47111300, 47184600, 47257950, 47331350, 47404800, 47478300, 47551850, 47625450, 47699100, 47772800, 47846550, 47920350, 47994200, 48068100, 48142050, 48216050, 48290100, 48364200, 48438350, 48512550, 48586800, 48661100, 48735450, 48809850, 48884300, 48958800, 49033350, 49107950, 49182600, 49257300, 49332050, 49406850, 49481700, 49556600, 49631550, 49706550, 49781600, 49856700, 49931850, 50007050, 50082300,
            50157600, 50232950, 50308350, 50383800, 50459300, 50534850, 50610450, 50686100, 50761800, 50837550, 50913350, 50989200, 51065100, 51141050, 51217050, 51293100, 51369200, 51445350, 51521550, 51597800, 51674100, 51750450, 51826850, 51903300, 51979800, 52056350, 52132950, 52209600, 52286300, 52363050, 52439850, 52516700, 52593600, 52670550, 52747550, 52824600, 52901700, 52978850, 53056050, 53133300, 53210600, 53287950, 53365350, 53442800, 53520300, 53597850, 53675450, 53753100, 53830800, 53908550, 53986350, 54064200, 54142100, 54220050, 54298050, 54376100, 54454200, 54532350, 54610550, 54688800, 54767100, 54845450, 54923850, 55002300, 55080800, 55159350, 55237950, 55316600, 55395300, 55474050, 55552850, 55631700, 55710600, 55789550, 55868550, 55947600, 56026700, 56105850, 56185050, 56264300, 56343600, 56422950, 56502350, 56581800, 56661300, 56740850, 56820450, 56900100, 56979800, 57059550, 57139350, 57219200, 57299100, 57379050, 57459050, 57539100, 57619200, 57699350, 57779550, 57859800, 57940100, 58020450, 58100850, 58181300, 58261800, 58342350, 58422950, 58503600, 58584300, 58665050, 58745850, 58826700, 58907600, 58988550, 59069550, 59150600, 59231700, 59312850, 59394050, 59475300, 59556600, 59637950, 59719350, 59800800, 59882300, 59963850, 60045450, 60127100, 60208800, 60290550, 60372350, 60454200, 60536100, 60618050, 60700050, 60782100, 60864200, 60946350, 61028550, 61110800, 61193100, 61275450, 61357850, 61440300, 61522800, 61605350, 61687950, 61770600, 61853300, 61936050, 62018850, 62101700, 62184600, 62267550, 62350550, 62433600, 62516700, 62599850, 62683050, 62766300, 62849600, 62932950, 63016350, 63099800, 63183300, 63266850, 63350450, 63434100, 63517800, 63601550, 63685350, 63769200, 63853100, 63937050, 64021050, 64105100, 64189200, 64273350, 64357550, 64441800, 64526100, 64610450, 64694850, 64779300, 64863800, 64948350, 65032950, 65117600, 65202300, 65287050, 65371850, 65456700, 65541600, 65626550, 65711550, 65796600, 65881700, 65966850, 66052050, 66137300, 66222600, 66307950, 66393350, 66478800, 66564300, 66649850, 66735450, 66821100, 66906800, 66992550,
            67078350, 67164200, 67250100, 67336050, 67422050, 67508100, 67594200, 67680350, 67766550, 67852800, 67939100, 68025450, 68111850, 68198300, 68284800, 68371350, 68457950, 68544600, 68631300, 68718050, 68804850, 68891700, 68978600, 69065550, 69152550, 69239600, 69326700, 69413850, 69501050, 69588300, 69675600, 69762950, 69850350, 69937800, 70025300, 70112850, 70200450, 70288100, 70375800, 70463550, 70551350, 70639200, 70727100, 70815050, 70903050, 70991100, 71079200, 71167350, 71255550, 71343800, 71432100, 71520450, 71608850, 71697300, 71785800, 71874350, 71962950, 72051600, 72140300, 72229050, 72317850, 72406700, 72495600, 72584550, 72673550, 72762600, 72851700, 72940850, 73030050, 73119300, 73208600, 73297950, 73387350, 73476800, 73566300, 73655850, 73745450, 73835100, 73924800, 74014550, 74104350, 74194200, 74284100, 74374050, 74464050, 74554100, 74644200, 74734350, 74824550, 74914800, 75005100, 75095450, 75185850, 75276300, 75366800, 75457350, 75547950, 75638600, 75729300, 75820050, 75910850, 76001700, 76092600, 76183550, 76274550, 76365600, 76456700, 76547850, 76639050, 76730300, 76821600, 76912950, 77004350, 77095800, 77187300, 77278850, 77370450, 77462100, 77553800, 77645550, 77737350, 77829200, 77921100, 78013050, 78105050, 78197100, 78289200, 78381350, 78473550, 78565800, 78658100, 78750450, 78842850, 78935300, 79027800, 79120350, 79212950, 79305600, 79398300, 79491050, 79583850, 79676700, 79769600, 79862550, 79955550, 80048600, 80141700, 80234850, 80328050, 80421300, 80514600, 80607950, 80701350, 80794800, 80888300, 80981850, 81075450, 81169100, 81262800, 81356550, 81450350, 81544200, 81638100, 81732050, 81826050, 81920100, 82014200, 82108350, 82202550, 82296800, 82391100, 82485450, 82579850, 82674300, 82768800, 82863350, 82957950, 83052600, 83147300, 83242050, 83336850, 83431700, 83526600, 83621550, 83716550, 83811600, 83906700, 84001850, 84097050, 84192300, 84287600, 84382950, 84478350, 84573800, 84669300, 84764850, 84860450, 84956100, 85051800, 85147550, 85243350, 85339200, 85435100, 85531050, 85627050, 85723100, 85819200, 85915350, 86011550, 86107800, 86204100, 86300450, 86396850,
            86493300, 86589800, 86686350, 86782950, 86879600, 86976300, 87073050, 87169850, 87266700, 87363600, 87460550, 87557550, 87654600, 87751700, 87848850, 87946050, 88043300, 88140600, 88237950, 88335350, 88432800, 88530300, 88627850, 88725450, 88823100, 88920800, 89018550, 89116350, 89214200, 89312100, 89410050, 89508050, 89606100, 89704200, 89802350, 89900550, 89998800, 90097100, 90195450, 90293850, 90392300, 90490800, 90589350, 90687950, 90786600, 90885300, 90984050, 91082850, 91181700, 91280600, 91379550, 91478550, 91577600, 91676700, 91775850, 91875050, 91974300, 92073600, 92172950, 92272350, 92371800, 92471300, 92570850, 92670450, 92770100, 92869800, 92969550, 93069350, 93169200, 93269100, 93369050, 93469050, 93569100, 93669200, 93769350, 93869550, 93969800, 94070100, 94170450, 94270850, 94371300, 94471800, 94572350, 94672950, 94773600, 94874300, 94975050, 95075850, 95176700, 95277600, 95378550, 95479550, 95580600, 95681700, 95782850, 95884050, 95985300, 96086600, 96187950, 96289350, 96390800, 96492300, 96593850, 96695450, 96797100, 96898800, 97000550, 97102350, 97204200, 97306100, 97408050, 97510050, 97612100, 97714200, 97816350, 97918550, 98020800, 98123100, 98225450, 98327850, 98430300, 98532800, 98635350, 98737950, 98840600, 98943300, 99046050, 99148850, 99251700, 99354600, 99457550, 99560550, 99663600, 99766700, 99869850, 99973050, 100076300, 100179600, 100282950, 100386350, 100489800, 100593300, 100696850, 100800450, 100904100, 101007800, 101111550, 101215350, 101319200, 101423100, 101527050, 101631050, 101735100, 101839200, 101943350, 102047550, 102151800, 102256100, 102360450, 102464850, 102569300, 102673800, 102778350, 102882950, 102987600, 103092300, 103197050, 103301850, 103406700, 103511600, 103616550, 103721550, 103826600, 103931700, 104036850, 104142050, 104247300, 104352600, 104457950, 104563350, 104668800, 104774300, 104879850, 104985450, 105091100, 105196800, 105302550, 105408350, 105514200, 105620100, 105726050, 105832050, 105938100, 106044200, 106150350, 106256550, 106362800, 106469100, 106575450, 106681850, 106788300, 106894800, 107001350, 107107950, 107214600, 107321300, 107428050, 107534850,
            107641700, 107748600, 107855550, 107962550, 108069600, 108176700, 108283850, 108391050, 108498300, 108605600, 108712950, 108820350, 108927800, 109035300, 109142850, 109250450, 109358100, 109465800, 109573550, 109681350, 109789200, 109897100, 110005050, 110113050, 110221100, 110329200, 110437350, 110545550, 110653800, 110762100, 110870450, 110978850, 111087300, 111195800, 111304350, 111412950, 111521600, 111630300, 111739050, 111847850, 111956700, 112065600, 112174550, 112283550, 112392600, 112501700, 112610850, 112720050, 112829300, 112938600, 113047950, 113157350, 113266800, 113376300, 113485850, 113595450, 113705100, 113814800, 113924550, 114034350, 114144200, 114254100, 114364050, 114474050, 114584100, 114694200, 114804350, 114914550, 115024800, 115135100, 115245450, 115355850, 115466300, 115576800, 115687350, 115797950, 115908600, 116019300, 116130050, 116240850, 116351700, 116462600, 116573550, 116684550, 116795600, 116906700, 117017850, 117129050, 117240300, 117351600, 117462950, 117574350, 117685800, 117797300, 117908850, 118020450, 118132100, 118243800, 118355550, 118467350, 118579200, 118691100, 118803050, 118915050, 119027100, 119139200, 119251350, 119363550, 119475800, 119588100, 119700450, 119812850, 119925300, 120037800, 120150350, 120262950, 120375600, 120488300, 120601050, 120713850, 120826700, 120939600, 121052550, 121165550, 121278600, 121391700, 121504850, 121618050, 121731300, 121844600, 121957950, 122071350, 122184800, 122298300, 122411850, 122525450, 122639100, 122752800, 122866550, 122980350, 123094200, 123208100, 123322050, 123436050, 123550100, 123664200, 123778350, 123892550, 124006800, 124121100, 124235450, 124349850, 124464300, 124578800, 124693350, 124807950, 124922600, 125037300, 125152050, 125266850, 125381700, 125496600, 125611550, 125726550, 125841600, 125956700, 126071850, 126187050, 126302300, 126417600, 126532950, 126648350, 126763800, 126879300, 126994850, 127110450, 127226100, 127341800, 127457550, 127573350, 127689200, 127805100, 127921050, 128037050, 128153100, 128269200, 128385350, 128501550, 128617800, 128734100, 128850450, 128966850, 129083300, 129199800, 129316350, 129432950, 129549600, 129666300,
            129783050, 129899850, 130016700, 130133600, 130250550, 130367550, 130484600, 130601700, 130718850, 130836050, 130953300, 131070600, 131187950, 131305350, 131422800, 131540300, 131657850, 131775450, 131893100, 132010800, 132128550, 132246350, 132364200, 132482100, 132600050, 132718050, 132836100, 132954200, 133072350, 133190550, 133308800, 133427100, 133545450, 133663850, 133782300, 133900800, 134019350, 134137950, 134256600, 134375300, 134494050, 134612850, 134731700, 134850600, 134969550, 135088550, 135207600, 135326700, 135445850, 135565050, 135684300, 135803600, 135922950, 136042350, 136161800, 136281300, 136400850, 136520450, 136640100, 136759800, 136879550, 136999350, 137119200, 137239100, 137359050, 137479050, 137599100, 137719200, 137839350, 137959550, 138079800, 138200100, 138320450, 138440850, 138561300, 138681800, 138802350, 138922950, 139043600, 139164300, 139285050, 139405850, 139526700, 139647600, 139768550, 139889550, 140010600, 140131700, 140252850, 140374050, 140495300, 140616600, 140737950, 140859350, 140980800, 141102300, 141223850, 141345450, 141467100, 141588800, 141710550, 141832350, 141954200, 142076100, 142198050, 142320050, 142442100, 142564200, 142686350, 142808550, 142930800, 143053100, 143175450, 143297850, 143420300, 143542800, 143665350, 143787950, 143910600, 144033300, 144156050, 144278850, 144401700, 144524600, 144647550, 144770550, 144893600, 145016700, 145139850, 145263050, 145386300, 145509600, 145632950, 145756350, 145879800, 146003300, 146126850, 146250450, 146374100, 146497800, 146621550, 146745350, 146869200, 146993100, 147117050, 147241050, 147365100, 147489200, 147613350, 147737550, 147861800, 147986100, 148110450, 148234850, 148359300, 148483800, 148608350, 148732950, 148857600, 148982300, 149107050, 149231850, 149356700, 149481600, 149606550, 149731550, 149856600, 149981700, 150106850, 150232050, 150357300, 150482600, 150607950, 150733350, 150858800, 150984300, 151109850, 151235450, 151361100, 151486800, 151612550, 151738350, 151864200, 151990100, 152116050, 152242050, 152368100, 152494200, 152620350, 152746550, 152872800, 152999100, 153125450, 153251850, 153378300, 153504800, 153631350, 153757950, 153884600,
            154011300, 154138050, 154264850, 154391700, 154518600, 154645550, 154772550, 154899600, 155026700, 155153850, 155281050, 155408300, 155535600, 155662950, 155790350, 155917800, 156045300, 156172850, 156300450, 156428100, 156555800, 156683550, 156811350, 156939200, 157067100, 157195050, 157323050, 157451100, 157579200, 157707350, 157835550, 157963800, 158092100, 158220450, 158348850, 158477300, 158605800, 158734350, 158862950, 158991600, 159120300, 159249050, 159377850, 159506700, 159635600, 159764550, 159893550, 160022600, 160151700, 160280850, 160410050, 160539300, 160668600, 160797950, 160927350, 161056800, 161186300, 161315850, 161445450, 161575100, 161704800, 161834550, 161964350, 162094200, 162224100, 162354050, 162484050, 162614100, 162744200, 162874350, 163004550, 163134800, 163265100, 163395450, 163525850, 163656300, 163786800, 163917350, 164047950, 164178600, 164309300, 164440050, 164570850, 164701700, 164832600, 164963550, 165094550, 165225600, 165356700, 165487850, 165619050, 165750300, 165881600, 166012950, 166144350, 166275800, 166407300, 166538850, 166670450, 166802100, 166933800, 167065550, 167197350, 167329200, 167461100, 167593050, 167725050, 167857100, 167989200, 168121350, 168253550, 168385800, 168518100, 168650450, 168782850, 168915300, 169047800, 169180350, 169312950, 169445600, 169578300, 169711050, 169843850, 169976700, 170109600, 170242550, 170375550, 170508600, 170641700, 170774850, 170908050, 171041300, 171174600, 171307950, 171441350, 171574800, 171708300, 171841850, 171975450, 172109100, 172242800, 172376550, 172510350, 172644200, 172778100, 172912050, 173046050, 173180100, 173314200, 173448350, 173582550, 173716800, 173851100, 173985450, 174119850, 174254300, 174388800, 174523350, 174657950, 174792600, 174927300, 175062050, 175196850, 175331700, 175466600, 175601550, 175736550, 175871600, 176006700, 176141850, 176277050, 176412300, 176547600, 176682950, 176818350, 176953800, 177089300, 177224850, 177360450, 177496100, 177631800, 177767550, 177903350, 178039200, 178175100, 178311050, 178447050, 178583100, 178719200, 178855350, 178991550, 179127800, 179264100, 179400450, 179536850, 179673300, 179809800, 179946350, 180082950,
            180219600, 180356300, 180493050, 180629850, 180766700, 180903600, 181040550, 181177550, 181314600, 181451700, 181588850, 181726050, 181863300, 182000600, 182137950, 182275350, 182412800, 182550300, 182687850, 182825450, 182963100, 183100800, 183238550, 183376350, 183514200, 183652100, 183790050, 183928050, 184066100, 184204200, 184342350, 184480550, 184618800, 184757100, 184895450, 185033850, 185172300, 185310800, 185449350, 185587950, 185726600, 185865300, 186004050, 186142850, 186281700, 186420600, 186559550, 186698550, 186837600, 186976700, 187115850, 187255050, 187394300, 187533600, 187672950, 187812350, 187951800, 188091300, 188230850, 188370450, 188510100, 188649800, 188789550, 188929350, 189069200, 189209100, 189349050, 189489050, 189629100, 189769200, 189909350, 190049550, 190189800, 190330100, 190470450, 190610850, 190751300, 190891800, 191032350, 191172950, 191313600, 191454300, 191595050, 191735850, 191876700, 192017600, 192158550, 192299550, 192440600, 192581700, 192722850, 192864050, 193005300, 193146600, 193287950, 193429350, 193570800, 193712300, 193853850, 193995450, 194137100, 194278800, 194420550, 194562350, 194704200, 194846100, 194988050, 195130050, 195272100, 195414200, 195556350, 195698550, 195840800, 195983100, 196125450, 196267850, 196410300, 196552800, 196695350, 196837950, 196980600, 197123300, 197266050, 197408850, 197551700, 197694600, 197837550, 197980550, 198123600, 198266700, 198409850, 198553050, 198696300, 198839600, 198982950, 199126350, 199269800, 199413300, 199556850, 199700450, 199844100, 199987800, 200131550, 200275350, 200419200, 200563100, 200707050, 200851050, 200995100, 201139200, 201283350, 201427550, 201571800, 201716100, 201860450, 202004850, 202149300, 202293800, 202438350, 202582950, 202727600, 202872300, 203017050, 203161850, 203306700, 203451600, 203596550, 203741550, 203886600, 204031700, 204176850, 204322050, 204467300, 204612600, 204757950, 204903350, 205048800, 205194300, 205339850, 205485450, 205631100, 205776800, 205922550, 206068350, 206214200, 206360100, 206506050, 206652050, 206798100, 206944200, 207090350, 207236550, 207382800, 207529100, 207675450, 207821850, 207968300, 208114800, 208261350,
            208407950, 208554600, 208701300, 208848050, 208994850, 209141700, 209288600, 209435550, 209582550, 209729600, 209876700, 210023850, 210171050, 210318300, 210465600, 210612950, 210760350, 210907800, 211055300, 211202850, 211350450, 211498100, 211645800, 211793550, 211941350, 212089200, 212237100, 212385050, 212533050, 212681100, 212829200, 212977350, 213125550, 213273800, 213422100, 213570450, 213718850, 213867300, 214015800, 214164350, 214312950, 214461600, 214610300, 214759050, 214907850, 215056700, 215205600, 215354550, 215503550, 215652600, 215801700, 215950850, 216100050, 216249300, 216398600, 216547950, 216697350, 216846800, 216996300, 217145850, 217295450, 217445100, 217594800, 217744550, 217894350, 218044200, 218194100, 218344050, 218494050, 218644100, 218794200, 218944350, 219094550, 219244800, 219395100, 219545450, 219695850, 219846300, 219996800, 220147350, 220297950, 220448600, 220599300, 220750050, 220900850, 221051700, 221202600, 221353550, 221504550, 221655600, 221806700, 221957850, 222109050, 222260300, 222411600, 222562950, 222714350, 222865800, 223017300, 223168850, 223320450, 223472100, 223623800, 223775550, 223927350, 224079200, 224231100, 224383050, 224535050, 224687100, 224839200, 224991350, 225143550, 225295800, 225448100, 225600450, 225752850, 225905300, 226057800, 226210350, 226362950, 226515600, 226668300, 226821050, 226973850, 227126700, 227279600, 227432550, 227585550, 227738600, 227891700, 228044850, 228198050, 228351300, 228504600, 228657950, 228811350, 228964800, 229118300, 229271850, 229425450, 229579100, 229732800, 229886550, 230040350, 230194200, 230348100, 230502050, 230656050, 230810100, 230964200, 231118350, 231272550, 231426800, 231581100, 231735450, 231889850, 232044300, 232198800, 232353350, 232507950, 232662600, 232817300, 232972050, 233126850, 233281700, 233436600, 233591550, 233746550, 233901600, 234056700, 234211850, 234367050, 234522300, 234677600, 234832950, 234988350, 235143800, 235299300, 235454850, 235610450, 235766100, 235921800, 236077550, 236233350, 236389200, 236545100, 236701050, 236857050, 237013100, 237169200, 237325350, 237481550, 237637800, 237794100, 237950450, 238106850, 238263300, 238419800,
            238576350, 238732950, 238889600, 239046300, 239203050, 239359850, 239516700, 239673600, 239830550, 239987550, 240144600, 240301700, 240458850, 240616050, 240773300, 240930600, 241087950, 241245350, 241402800, 241560300, 241717850, 241875450, 242033100, 242190800, 242348550, 242506350, 242664200, 242822100, 242980050, 243138050, 243296100, 243454200, 243612350, 243770550, 243928800, 244087100, 244245450, 244403850, 244562300, 244720800, 244879350, 245037950, 245196600, 245355300, 245514050, 245672850, 245831700, 245990600, 246149550, 246308550, 246467600, 246626700, 246785850, 246945050, 247104300, 247263600, 247422950, 247582350, 247741800, 247901300, 248060850, 248220450, 248380100, 248539800, 248699550, 248859350, 249019200, 249179100, 249339050, 249499050, 249659100, 249819200, 249979350, 250139550, 250299800, 250460100, 250620450, 250780850, 250941300, 251101800, 251262350, 251422950, 251583600, 251744300, 251905050, 252065850, 252226700, 252387600, 252548550, 252709550, 252870600, 253031700, 253192850, 253354050, 253515300, 253676600, 253837950, 253999350, 254160800, 254322300, 254483850, 254645450, 254807100, 254968800, 255130550, 255292350, 255454200, 255616100, 255778050, 255940050, 256102100, 256264200, 256426350, 256588550, 256750800, 256913100, 257075450, 257237850, 257400300, 257562800, 257725350, 257887950, 258050600, 258213300, 258376050, 258538850, 258701700, 258864600, 259027550, 259190550, 259353600, 259516700, 259679850, 259843050, 260006300, 260169600, 260332950, 260496350, 260659800, 260823300, 260986850, 261150450, 261314100, 261477800, 261641550, 261805350, 261969200, 262133100, 262297050, 262461050, 262625100, 262789200, 262953350, 263117550, 263281800, 263446100, 263610450, 263774850, 263939300, 264103800, 264268350, 264432950, 264597600, 264762300, 264927050, 265091850, 265256700, 265421600, 265586550, 265751550, 265916600, 266081700, 266246850, 266412050, 266577300, 266742600, 266907950, 267073350, 267238800, 267404300, 267569850, 267735450, 267901100, 268066800, 268232550, 268398350, 268564200, 268730100, 268896050, 269062050, 269228100, 269394200, 269560350, 269726550, 269892800, 270059100, 270225450, 270391850, 270558300, 270724800, 270891350,
            271057950, 271224600, 271391300, 271558050, 271724850, 271891700, 272058600, 272225550, 272392550, 272559600, 272726700, 272893850, 273061050, 273228300, 273395600, 273562950, 273730350, 273897800, 274065300, 274232850, 274400450, 274568100, 274735800, 274903550, 275071350, 275239200, 275407100, 275575050, 275743050, 275911100, 276079200, 276247350, 276415550, 276583800, 276752100, 276920450, 277088850, 277257300, 277425800, 277594350, 277762950, 277931600, 278100300, 278269050, 278437850, 278606700, 278775600, 278944550, 279113550, 279282600, 279451700, 279620850, 279790050, 279959300, 280128600, 280297950, 280467350, 280636800, 280806300, 280975850, 281145450, 281315100, 281484800, 281654550, 281824350, 281994200, 282164100, 282334050, 282504050, 282674100, 282844200, 283014350, 283184550, 283354800, 283525100, 283695450, 283865850, 284036300, 284206800, 284377350, 284547950, 284718600, 284889300, 285060050, 285230850, 285401700, 285572600, 285743550, 285914550, 286085600, 286256700, 286427850, 286599050, 286770300, 286941600, 287112950, 287284350, 287455800, 287627300, 287798850, 287970450, 288142100, 288313800, 288485550, 288657350, 288829200, 289001100, 289173050, 289345050, 289517100, 289689200, 289861350, 290033550, 290205800, 290378100, 290550450, 290722850, 290895300, 291067800, 291240350, 291412950, 291585600, 291758300, 291931050, 292103850, 292276700, 292449600, 292622550, 292795550, 292968600, 293141700, 293314850, 293488050, 293661300, 293834600, 294007950, 294181350, 294354800, 294528300, 294701850, 294875450, 295049100, 295222800, 295396550, 295570350, 295744200, 295918100, 296092050, 296266050, 296440100, 296614200, 296788350, 296962550, 297136800, 297311100, 297485450, 297659850, 297834300, 298008800, 298183350, 298357950, 298532600, 298707300, 298882050, 299056850, 299231700, 299406600, 299581550, 299756550, 299931600, 300106700, 300281850, 300457050, 300632300, 300807600, 300982950, 301158350, 301333800, 301509300, 301684850, 301860450, 302036100, 302211800, 302387550, 302563350, 302739200, 302915100, 303091050, 303267050, 303443100, 303619200, 303795350, 303971550, 304147800, 304324100, 304500450, 304676850, 304853300, 305029800, 305206350, 305382950,
            305559600, 305736300, 305913050, 306089850, 306266700, 306443600, 306620550, 306797550, 306974600, 307151700, 307328850, 307506050, 307683300, 307860600, 308037950, 308215350, 308392800, 308570300, 308747850, 308925450, 309103100, 309280800, 309458550, 309636350, 309814200, 309992100, 310170050, 310348050, 310526100, 310704200, 310882350, 311060550, 311238800, 311417100, 311595450, 311773850, 311952300, 312130800, 312309350, 312487950, 312666600, 312845300, 313024050, 313202850, 313381700, 313560600, 313739550, 313918550, 314097600, 314276700, 314455850, 314635050, 314814300, 314993600, 315172950, 315352350, 315531800, 315711300, 315890850, 316070450, 316250100, 316429800, 316609550, 316789350, 316969200, 317149100, 317329050, 317509050, 317689100, 317869200, 318049350, 318229550, 318409800, 318590100, 318770450, 318950850, 319131300, 319311800, 319492350, 319672950, 319853600, 320034300, 320215050, 320395850, 320576700, 320757600, 320938550, 321119550, 321300600, 321481700, 321662850, 321844050, 322025300, 322206600, 322387950, 322569350, 322750800, 322932300, 323113850, 323295450, 323477100, 323658800, 323840550, 324022350, 324204200, 324386100, 324568050, 324750050, 324932100, 325114200, 325296350, 325478550, 325660800, 325843100, 326025450, 326207850, 326390300, 326572800, 326755350, 326937950, 327120600, 327303300, 327486050, 327668850, 327851700, 328034600, 328217550, 328400550, 328583600, 328766700, 328949850, 329133050, 329316300, 329499600, 329682950, 329866350, 330049800, 330233300, 330416850, 330600450, 330784100, 330967800, 331151550, 331335350, 331519200, 331703100, 331887050, 332071050, 332255100, 332439200, 332623350, 332807550, 332991800, 333176100, 333360450, 333544850, 333729300, 333913800, 334098350, 334282950, 334467600, 334652300, 334837050, 335021850, 335206700, 335391600, 335576550, 335761550, 335946600, 336131700, 336316850, 336502050, 336687300, 336872600, 337057950, 337243350, 337428800, 337614300, 337799850, 337985450, 338171100, 338356800, 338542550, 338728350, 338914200, 339100100, 339286050, 339472050, 339658100, 339844200, 340030350, 340216550, 340402800, 340589100, 340775450, 340961850, 341148300, 341334800, 341521350, 341707950, 341894600, 342081300, 342268050, 342454850, 342641700, 342828600, 343015550, 343202550, 343389600, 343576700, 343763850, 343951050, 344138300, 344325600, 344512950, 344700350, 344887800, 345075300, 345262850, 345450450, 345638100, 345825800, 346013550, 346201350, 346389200, 346577100, 346765050, 346953050, 347141100, 347329200, 347517350, 347705550, 347893800, 348082100, 348270450, 348458850, 348647300, 348835800, 349024350, 349212950, 349401600, 349590300, 349779050, 349967850, 350156700, 350345600, 350534550, 350723550, 350912600, 351101700, 351290850, 351480050, 351669300, 351858600, 352047950, 352237350, 352426800, 352616300, 352805850, 352995450, 353185100, 353374800, 353564550, 353754350, 353944200, 354134100, 354324050, 354514050, 354704100, 354894200, 355084350, 355274550, 355464800, 355655100, 355845450, 356035850, 356226300, 356416800, 356607350, 356797950, 356988600, 357179300, 357370050, 357560850, 357751700, 357942600, 358133550, 358324550, 358515600, 358706700, 358897850, 359089050, 359280300, 359471600, 359662950, 359854350, 360045800, 360237300, 360428850, 360620450, 360812100, 361003800, 361195550, 361387350, 361579200, 361771100, 361963050, 362155050, 362347100, 362539200, 362731350, 362923550, 363115800, 363308100, 363500450, 363692850, 363885300, 364077800, 364270350, 364462950, 364655600, 364848300, 365041050, 365233850, 365426700, 365619600, 365812550, 366005550, 366198600, 366391700, 366584850, 366778050, 366971300, 367164600, 367357950, 367551350, 367744800, 367938300, 368131850, 368325450, 368519100, 368712800, 368906550, 369100350, 369294200, 369488100, 369682050, 369876050, 370070100, 370264200, 370458350, 370652550, 370846800, 371041100, 371235450, 371429850, 371624300, 371818800, 372013350, 372207950, 372402600, 372597300, 372792050, 372986850, 373181700, 373376600, 373571550, 373766550, 373961600, 374156700, 374351850, 374547050, 374742300, 374937600, 375132950, 375328350, 375523800, 375719300, 375914850, 376110450, 376306100, 376501800, 376697550, 376893350, 377089200, 377285100, 377481050, 377677050, 377873100, 378069200, 378265350, 378461550, 378657800, 378854100, 379050450, 379246850, 379443300, 379639800, 379836350, 380032950, 380229600, 380426300, 380623050, 380819850, 381016700, 381213600, 381410550, 381607550,
            381804600, 382001700, 382198850, 382396050, 382593300, 382790600, 382987950, 383185350, 383382800, 383580300, 383777850, 383975450, 384173100, 384370800, 384568550, 384766350, 384964200, 385162100, 385360050, 385558050, 385756100, 385954200, 386152350, 386350550, 386548800, 386747100, 386945450, 387143850, 387342300, 387540800, 387739350, 387937950, 388136600, 388335300, 388534050, 388732850, 388931700, 389130600, 389329550, 389528550, 389727600, 389926700, 390125850, 390325050, 390524300, 390723600, 390922950, 391122350, 391321800, 391521300, 391720850, 391920450, 392120100, 392319800, 392519550, 392719350, 392919200, 393119100, 393319050, 393519050, 393719100, 393919200, 394119350, 394319550, 394519800, 394720100, 394920450, 395120850, 395321300, 395521800, 395722350, 395922950, 396123600, 396324300, 396525050, 396725850, 396926700, 397127600, 397328550, 397529550, 397730600, 397931700, 398132850, 398334050, 398535300, 398736600, 398937950, 399139350, 399340800, 399542300, 399743850, 399945450, 400147100, 400348800, 400550550, 400752350, 400954200, 401156100, 401358050, 401560050, 401762100, 401964200, 402166350, 402368550, 402570800, 402773100, 402975450, 403177850, 403380300, 403582800, 403785350, 403987950, 404190600, 404393300, 404596050, 404798850, 405001700, 405204600, 405407550, 405610550, 405813600, 406016700, 406219850, 406423050, 406626300, 406829600, 407032950, 407236350, 407439800, 407643300, 407846850, 408050450, 408254100, 408457800, 408661550, 408865350, 409069200, 409273100, 409477050, 409681050, 409885100, 410089200, 410293350, 410497550, 410701800, 410906100, 411110450, 411314850, 411519300, 411723800, 411928350, 412132950, 412337600, 412542300, 412747050, 412951850, 413156700, 413361600, 413566550, 413771550, 413976600, 414181700, 414386850, 414592050, 414797300, 415002600, 415207950, 415413350, 415618800, 415824300, 416029850, 416235450, 416441100, 416646800, 416852550, 417058350, 417264200, 417470100, 417676050, 417882050, 418088100, 418294200, 418500350, 418706550, 418912800, 419119100, 419325450, 419531850, 419738300, 419944800, 420151350, 420357950, 420564600, 420771300, 420978050, 421184850, 421391700, 421598600, 421805550, 422012550, 422219600, 422426700, 422633850, 422841050, 423048300, 423255600, 423462950, 423670350, 423877800, 424085300, 424292850, 424500450, 424708100, 424915800, 425123550, 425331350, 425539200, 425747100, 425955050, 426163050, 426371100, 426579200, 426787350, 426995550, 427203800, 427412100, 427620450, 427828850, 428037300, 428245800, 428454350, 428662950, 428871600, 429080300, 429289050, 429497850, 429706700, 429915600, 430124550, 430333550, 430542600, 430751700, 430960850, 431170050, 431379300, 431588600, 431797950, 432007350, 432216800, 432426300, 432635850, 432845450, 433055100, 433264800, 433474550, 433684350, 433894200, 434104100, 434314050, 434524050, 434734100, 434944200, 435154350, 435364550, 435574800, 435785100, 435995450, 436205850, 436416300, 436626800, 436837350, 437047950, 437258600, 437469300, 437680050, 437890850, 438101700, 438312600, 438523550, 438734550, 438945600, 439156700, 439367850, 439579050, 439790300, 440001600, 440212950, 440424350, 440635800, 440847300, 441058850, 441270450, 441482100, 441693800, 441905550, 442117350, 442329200, 442541100, 442753050, 442965050, 443177100, 443389200, 443601350, 443813550, 444025800, 444238100, 444450450, 444662850, 444875300, 445087800, 445300350, 445512950, 445725600, 445938300, 446151050, 446363850, 446576700, 446789600, 447002550, 447215550, 447428600, 447641700, 447854850, 448068050, 448281300, 448494600, 448707950, 448921350, 449134800, 449348300, 449561850, 449775450, 449989100, 450202800, 450416550, 450630350, 450844200, 451058100, 451272050, 451486050, 451700100, 451914200, 452128350, 452342550, 452556800, 452771100, 452985450, 453199850, 453414300, 453628800, 453843350, 454057950, 454272600, 454487300, 454702050, 454916850, 455131700, 455346600, 455561550, 455776550, 455991600, 456206700, 456421850, 456637050, 456852300, 457067600, 457282950, 457498350, 457713800, 457929300, 458144850, 458360450, 458576100, 458791800, 459007550, 459223350, 459439200, 459655100, 459871050, 460087050, 460303100, 460519200, 460735350, 460951550, 461167800, 461384100, 461600450, 461816850, 462033300, 462249800, 462466350, 462682950, 462899600, 463116300, 463333050, 463549850, 463766700, 463983600, 464200550, 464417550, 464634600, 464851700, 465068850, 465286050, 465503300, 465720600, 465937950, 466155350,
            466372800, 466590300, 466807850, 467025450, 467243100, 467460800, 467678550, 467896350, 468114200, 468332100, 468550050, 468768050, 468986100, 469204200, 469422350, 469640550, 469858800, 470077100, 470295450, 470513850, 470732300, 470950800, 471169350, 471387950, 471606600, 471825300, 472044050, 472262850, 472481700, 472700600, 472919550, 473138550, 473357600, 473576700, 473795850, 474015050, 474234300, 474453600, 474672950, 474892350, 475111800, 475331300, 475550850, 475770450, 475990100, 476209800, 476429550, 476649350, 476869200, 477089100, 477309050, 477529050, 477749100, 477969200, 478189350, 478409550, 478629800, 478850100, 479070450, 479290850, 479511300, 479731800, 479952350, 480172950, 480393600, 480614300, 480835050, 481055850, 481276700, 481497600, 481718550, 481939550, 482160600, 482381700, 482602850, 482824050, 483045300, 483266600, 483487950, 483709350, 483930800, 484152300, 484373850, 484595450, 484817100, 485038800, 485260550, 485482350, 485704200, 485926100, 486148050, 486370050, 486592100, 486814200, 487036350, 487258550, 487480800, 487703100, 487925450, 488147850, 488370300, 488592800, 488815350, 489037950, 489260600, 489483300, 489706050, 489928850, 490151700, 490374600, 490597550, 490820550, 491043600, 491266700, 491489850, 491713050, 491936300, 492159600, 492382950, 492606350, 492829800, 493053300, 493276850, 493500450, 493724100, 493947800, 494171550, 494395350, 494619200, 494843100, 495067050, 495291050, 495515100, 495739200, 495963350, 496187550, 496411800, 496636100, 496860450, 497084850, 497309300, 497533800, 497758350, 497982950, 498207600, 498432300, 498657050, 498881850, 499106700, 499331600, 499556550, 499781550, 500006600, 500231700, 500456850, 500682050, 500907300, 501132600, 501357950, 501583350, 501808800, 502034300, 502259850, 502485450, 502711100, 502936800, 503162550, 503388350, 503614200, 503840100, 504066050, 504292050, 504518100, 504744200, 504970350, 505196550, 505422800, 505649100, 505875450, 506101850, 506328300, 506554800, 506781350, 507007950, 507234600, 507461300, 507688050, 507914850, 508141700, 508368600, 508595550, 508822550, 509049600, 509276700, 509503850, 509731050, 509958300, 510185600, 510412950, 510640350, 510867800, 511095300, 511322850, 511550450, 511778100, 512005800, 512233550, 512461350, 512689200, 512917100, 513145050, 513373050, 513601100, 513829200, 514057350, 514285550, 514513800, 514742100, 514970450, 515198850, 515427300, 515655800, 515884350, 516112950, 516341600, 516570300, 516799050, 517027850, 517256700, 517485600, 517714550, 517943550, 518172600, 518401700, 518630850, 518860050, 519089300, 519318600, 519547950, 519777350, 520006800, 520236300, 520465850, 520695450, 520925100, 521154800, 521384550, 521614350, 521844200, 522074100, 522304050, 522534050, 522764100, 522994200, 523224350, 523454550, 523684800, 523915100, 524145450, 524375850, 524606300, 524836800, 525067350, 525297950, 525528600, 525759300, 525990050, 526220850, 526451700, 526682600, 526913550, 527144550, 527375600, 527606700, 527837850, 528069050, 528300300, 528531600, 528762950, 528994350, 529225800, 529457300, 529688850, 529920450, 530152100, 530383800, 530615550, 530847350, 531079200, 531311100, 531543050, 531775050, 532007100, 532239200, 532471350, 532703550, 532935800, 533168100, 533400450, 533632850, 533865300, 534097800, 534330350, 534562950, 534795600, 535028300, 535261050, 535493850, 535726700, 535959600, 536192550, 536425550, 536658600, 536891700, 537124850, 537358050, 537591300, 537824600, 538057950, 538291350, 538524800, 538758300, 538991850, 539225450, 539459100, 539692800, 539926550, 540160350, 540394200, 540628100, 540862050, 541096050, 541330100, 541564200, 541798350, 542032550, 542266800, 542501100, 542735450, 542969850, 543204300, 543438800, 543673350, 543907950, 544142600, 544377300, 544612050, 544846850, 545081700, 545316600, 545551550, 545786550, 546021600, 546256700, 546491850, 546727050, 546962300, 547197600, 547432950, 547668350, 547903800, 548139300, 548374850, 548610450, 548846100, 549081800, 549317550, 549553350, 549789200, 550025100, 550261050, 550497050, 550733100, 550969200, 551205350, 551441550, 551677800, 551914100, 552150450, 552386850, 552623300, 552859800, 553096350, 553332950, 553569600, 553806300, 554043050, 554279850, 554516700, 554753600, 554990550, 555227550, 555464600, 555701700, 555938850, 556176050, 556413300, 556650600, 556887950, 557125350, 557362800, 557600300, 557837850, 558075450, 558313100, 558550800, 558788550, 559026350,
            559264200, 559502100, 559740050, 559978050, 560216100, 560454200, 560692350, 560930550, 561168800, 561407100, 561645450, 561883850, 562122300, 562360800, 562599350, 562837950, 563076600, 563315300, 563554050, 563792850, 564031700, 564270600, 564509550, 564748550, 564987600, 565226700, 565465850, 565705050, 565944300, 566183600, 566422950, 566662350, 566901800, 567141300, 567380850, 567620450, 567860100, 568099800, 568339550, 568579350, 568819200, 569059100, 569299050, 569539050, 569779100, 570019200, 570259350, 570499550, 570739800, 570980100, 571220450, 571460850, 571701300, 571941800, 572182350, 572422950, 572663600, 572904300, 573145050, 573385850, 573626700, 573867600, 574108550, 574349550, 574590600, 574831700, 575072850, 575314050, 575555300, 575796600, 576037950, 576279350, 576520800, 576762300, 577003850, 577245450, 577487100, 577728800, 577970550, 578212350, 578454200, 578696100, 578938050, 579180050, 579422100, 579664200, 579906350, 580148550, 580390800, 580633100, 580875450, 581117850, 581360300, 581602800, 581845350, 582087950, 582330600, 582573300, 582816050, 583058850, 583301700, 583544600, 583787550, 584030550, 584273600, 584516700, 584759850, 585003050, 585246300, 585489600, 585732950, 585976350, 586219800, 586463300, 586706850, 586950450, 587194100, 587437800, 587681550, 587925350, 588169200, 588413100, 588657050, 588901050, 589145100, 589389200, 589633350, 589877550, 590121800, 590366100, 590610450, 590854850, 591099300, 591343800, 591588350, 591832950, 592077600, 592322300, 592567050, 592811850, 593056700, 593301600, 593546550, 593791550, 594036600, 594281700, 594526850, 594772050, 595017300, 595262600, 595507950, 595753350, 595998800, 596244300, 596489850, 596735450, 596981100, 597226800, 597472550, 597718350, 597964200, 598210100, 598456050, 598702050, 598948100, 599194200, 599440350, 599686550, 599932800, 600179100, 600425450, 600671850, 600918300, 601164800, 601411350, 601657950, 601904600, 602151300, 602398050, 602644850, 602891700, 603138600, 603385550, 603632550, 603879600, 604126700, 604373850, 604621050, 604868300, 605115600, 605362950, 605610350, 605857800, 606105300, 606352850, 606600450, 606848100, 607095800, 607343550, 607591350, 607839200, 608087100, 608335050, 608583050, 608831100, 609079200, 609327350, 609575550, 609823800, 610072100, 610320450, 610568850, 610817300, 611065800, 611314350, 611562950, 611811600, 612060300, 612309050, 612557850, 612806700, 613055600, 613304550, 613553550, 613802600, 614051700, 614300850, 614550050, 614799300, 615048600, 615297950, 615547350, 615796800, 616046300, 616295850, 616545450, 616795100, 617044800, 617294550, 617544350, 617794200, 618044100, 618294050, 618544050, 618794100, 619044200, 619294350, 619544550, 619794800, 620045100, 620295450, 620545850, 620796300, 621046800, 621297350, 621547950, 621798600, 622049300, 622300050, 622550850, 622801700, 623052600, 623303550, 623554550, 623805600, 624056700, 624307850, 624559050, 624810300, 625061600, 625312950, 625564350, 625815800, 626067300, 626318850, 626570450, 626822100, 627073800, 627325550, 627577350, 627829200, 628081100, 628333050, 628585050, 628837100, 629089200, 629341350, 629593550, 629845800, 630098100, 630350450, 630602850, 630855300, 631107800, 631360350, 631612950, 631865600, 632118300, 632371050, 632623850, 632876700, 633129600, 633382550, 633635550, 633888600, 634141700, 634394850, 634648050, 634901300, 635154600, 635407950, 635661350, 635914800, 636168300, 636421850, 636675450, 636929100, 637182800, 637436550, 637690350, 637944200, 638198100, 638452050, 638706050, 638960100, 639214200, 639468350, 639722550, 639976800, 640231100, 640485450, 640739850, 640994300, 641248800, 641503350, 641757950, 642012600, 642267300, 642522050, 642776850, 643031700, 643286600, 643541550, 643796550, 644051600, 644306700, 644561850, 644817050, 645072300, 645327600, 645582950, 645838350, 646093800, 646349300, 646604850, 646860450, 647116100, 647371800, 647627550, 647883350, 648139200, 648395100, 648651050, 648907050, 649163100, 649419200, 649675350, 649931550, 650187800, 650444100, 650700450, 650956850, 651213300, 651469800, 651726350, 651982950, 652239600, 652496300, 652753050, 653009850, 653266700, 653523600, 653780550, 654037550, 654294600, 654551700, 654808850, 655066050, 655323300, 655580600, 655837950, 656095350, 656352800, 656610300, 656867850, 657125450, 657383100, 657640800, 657898550, 658156350, 658414200, 658672100, 658930050, 659188050, 659446100, 659704200, 659962350, 660220550,
            660478800, 660737100, 660995450, 661253850, 661512300, 661770800, 662029350, 662287950, 662546600, 662805300, 663064050, 663322850, 663581700, 663840600, 664099550, 664358550, 664617600, 664876700, 665135850, 665395050, 665654300, 665913600, 666172950, 666432350, 666691800, 666951300, 667210850, 667470450, 667730100, 667989800, 668249550, 668509350, 668769200, 669029100, 669289050, 669549050, 669809100, 670069200, 670329350, 670589550, 670849800, 671110100, 671370450, 671630850, 671891300, 672151800, 672412350, 672672950, 672933600, 673194300, 673455050, 673715850, 673976700, 674237600, 674498550, 674759550, 675020600, 675281700, 675542850, 675804050, 676065300, 676326600, 676587950, 676849350, 677110800, 677372300, 677633850, 677895450, 678157100, 678418800, 678680550, 678942350, 679204200, 679466100, 679728050, 679990050, 680252100, 680514200, 680776350, 681038550, 681300800, 681563100, 681825450, 682087850, 682350300, 682612800, 682875350, 683137950, 683400600, 683663300, 683926050, 684188850, 684451700, 684714600, 684977550, 685240550, 685503600, 685766700, 686029850, 686293050, 686556300, 686819600, 687082950, 687346350, 687609800, 687873300, 688136850, 688400450, 688664100, 688927800, 689191550, 689455350, 689719200, 689983100, 690247050, 690511050, 690775100, 691039200, 691303350, 691567550, 691831800, 692096100, 692360450, 692624850, 692889300, 693153800, 693418350, 693682950, 693947600, 694212300, 694477050, 694741850, 695006700, 695271600, 695536550, 695801550, 696066600, 696331700, 696596850, 696862050, 697127300, 697392600, 697657950, 697923350, 698188800, 698454300, 698719850, 698985450, 699251100, 699516800, 699782550, 700048350, 700314200, 700580100, 700846050, 701112050, 701378100, 701644200, 701910350, 702176550, 702442800, 702709100, 702975450, 703241850, 703508300, 703774800, 704041350, 704307950, 704574600, 704841300, 705108050, 705374850, 705641700, 705908600, 706175550, 706442550, 706709600, 706976700, 707243850, 707511050, 707778300, 708045600, 708312950, 708580350, 708847800, 709115300, 709382850, 709650450, 709918100, 710185800, 710453550, 710721350, 710989200, 711257100, 711525050, 711793050, 712061100, 712329200, 712597350, 712865550, 713133800, 713402100, 713670450, 713938850, 714207300, 714475800, 714744350, 715012950, 715281600, 715550300, 715819050, 716087850, 716356700, 716625600, 716894550, 717163550, 717432600, 717701700, 717970850, 718240050, 718509300, 718778600, 719047950, 719317350, 719586800, 719856300, 720125850, 720395450, 720665100, 720934800, 721204550, 721474350, 721744200, 722014100, 722284050, 722554050, 722824100, 723094200, 723364350, 723634550, 723904800, 724175100, 724445450, 724715850, 724986300, 725256800, 725527350, 725797950, 726068600, 726339300, 726610050, 726880850, 727151700, 727422600, 727693550, 727964550, 728235600, 728506700, 728777850, 729049050, 729320300, 729591600, 729862950, 730134350, 730405800, 730677300, 730948850, 731220450, 731492100, 731763800, 732035550, 732307350, 732579200, 732851100, 733123050, 733395050, 733667100, 733939200, 734211350, 734483550, 734755800, 735028100, 735300450, 735572850, 735845300, 736117800, 736390350, 736662950, 736935600, 737208300, 737481050, 737753850, 738026700, 738299600, 738572550, 738845550, 739118600, 739391700, 739664850, 739938050, 740211300, 740484600, 740757950, 741031350, 741304800, 741578300, 741851850, 742125450, 742399100, 742672800, 742946550, 743220350, 743494200, 743768100, 744042050, 744316050, 744590100, 744864200, 745138350, 745412550, 745686800, 745961100, 746235450, 746509850, 746784300, 747058800, 747333350, 747607950, 747882600, 748157300, 748432050, 748706850, 748981700, 749256600, 749531550, 749806550, 750081600, 750356700, 750631850, 750907050, 751182300, 751457600, 751732950, 752008350, 752283800, 752559300, 752834850, 753110450, 753386100, 753661800, 753937550, 754213350, 754489200, 754765100, 755041050, 755317050, 755593100, 755869200, 756145350, 756421550, 756697800, 756974100, 757250450, 757526850, 757803300, 758079800, 758356350, 758632950, 758909600, 759186300, 759463050, 759739850, 760016700, 760293600, 760570550, 760847550, 761124600, 761401700, 761678850, 761956050, 762233300, 762510600, 762787950, 763065350, 763342800, 763620300, 763897850, 764175450, 764453100, 764730800, 765008550, 765286350, 765564200, 765842100, 766120050, 766398050, 766676100, 766954200, 767232350, 767510550, 767788800, 768067100, 768345450, 768623850, 768902300, 769180800, 769459350, 769737950,
            770016600, 770295300, 770574050, 770852850, 771131700, 771410600, 771689550, 771968550, 772247600, 772526700, 772805850, 773085050, 773364300, 773643600, 773922950, 774202350, 774481800, 774761300, 775040850, 775320450, 775600100, 775879800, 776159550, 776439350, 776719200, 776999100, 777279050, 777559050, 777839100, 778119200, 778399350, 778679550, 778959800, 779240100, 779520450, 779800850, 780081300, 780361800, 780642350, 780922950, 781203600, 781484300, 781765050, 782045850, 782326700, 782607600, 782888550, 783169550, 783450600, 783731700, 784012850, 784294050, 784575300, 784856600, 785137950, 785419350, 785700800, 785982300, 786263850, 786545450, 786827100, 787108800, 787390550, 787672350, 787954200, 788236100, 788518050, 788800050, 789082100, 789364200, 789646350, 789928550, 790210800, 790493100, 790775450, 791057850, 791340300, 791622800, 791905350, 792187950, 792470600, 792753300, 793036050, 793318850, 793601700, 793884600, 794167550, 794450550, 794733600, 795016700, 795299850, 795583050, 795866300, 796149600, 796432950, 796716350, 796999800, 797283300, 797566850, 797850450, 798134100, 798417800, 798701550, 798985350, 799269200, 799553100, 799837050, 800121050, 800405100, 800689200, 800973350, 801257550, 801541800, 801826100, 802110450, 802394850, 802679300, 802963800, 803248350, 803532950, 803817600, 804102300, 804387050, 804671850, 804956700, 805241600, 805526550, 805811550, 806096600, 806381700, 806666850, 806952050, 807237300, 807522600, 807807950, 808093350, 808378800, 808664300, 808949850, 809235450, 809521100, 809806800, 810092550, 810378350, 810664200, 810950100, 811236050, 811522050, 811808100, 812094200, 812380350, 812666550, 812952800, 813239100, 813525450, 813811850, 814098300, 814384800, 814671350, 814957950, 815244600, 815531300, 815818050, 816104850, 816391700, 816678600, 816965550, 817252550, 817539600, 817826700, 818113850, 818401050, 818688300, 818975600, 819262950, 819550350, 819837800, 820125300, 820412850, 820700450, 820988100, 821275800, 821563550, 821851350, 822139200, 822427100, 822715050, 823003050, 823291100, 823579200, 823867350, 824155550, 824443800, 824732100, 825020450, 825308850, 825597300, 825885800, 826174350, 826462950, 826751600, 827040300, 827329050, 827617850, 827906700, 828195600, 828484550, 828773550, 829062600, 829351700, 829640850, 829930050, 830219300, 830508600, 830797950, 831087350, 831376800, 831666300, 831955850, 832245450, 832535100, 832824800, 833114550, 833404350, 833694200, 833984100, 834274050, 834564050, 834854100, 835144200, 835434350, 835724550, 836014800, 836305100, 836595450, 836885850, 837176300, 837466800, 837757350, 838047950, 838338600, 838629300, 838920050, 839210850, 839501700, 839792600, 840083550, 840374550, 840665600, 840956700, 841247850, 841539050, 841830300, 842121600, 842412950, 842704350, 842995800, 843287300, 843578850, 843870450, 844162100, 844453800, 844745550, 845037350, 845329200, 845621100, 845913050, 846205050, 846497100, 846789200, 847081350, 847373550, 847665800, 847958100, 848250450, 848542850, 848835300, 849127800, 849420350, 849712950, 850005600, 850298300, 850591050, 850883850, 851176700, 851469600, 851762550, 852055550, 852348600, 852641700, 852934850, 853228050, 853521300, 853814600, 854107950, 854401350, 854694800, 854988300, 855281850, 855575450, 855869100, 856162800, 856456550, 856750350, 857044200, 857338100, 857632050, 857926050, 858220100, 858514200, 858808350, 859102550, 859396800, 859691100, 859985450, 860279850, 860574300, 860868800, 861163350, 861457950, 861752600, 862047300, 862342050, 862636850, 862931700, 863226600, 863521550, 863816550, 864111600, 864406700, 864701850, 864997050, 865292300, 865587600, 865882950, 866178350, 866473800, 866769300, 867064850, 867360450, 867656100, 867951800, 868247550, 868543350, 868839200, 869135100, 869431050, 869727050, 870023100, 870319200, 870615350, 870911550, 871207800, 871504100, 871800450, 872096850, 872393300, 872689800, 872986350, 873282950, 873579600, 873876300, 874173050, 874469850, 874766700, 875063600, 875360550, 875657550, 875954600, 876251700, 876548850, 876846050, 877143300, 877440600, 877737950, 878035350, 878332800, 878630300, 878927850, 879225450, 879523100, 879820800, 880118550, 880416350, 880714200, 881012100, 881310050, 881608050, 881906100, 882204200, 882502350, 882800550, 883098800, 883397100, 883695450, 883993850, 884292300, 884590800, 884889350, 885187950, 885486600, 885785300, 886084050, 886382850, 886681700, 886980600, 887279550, 887578550,
            887877600, 888176700, 888475850, 888775050, 889074300, 889373600, 889672950, 889972350, 890271800, 890571300, 890870850, 891170450, 891470100, 891769800, 892069550, 892369350, 892669200, 892969100, 893269050, 893569050, 893869100, 894169200, 894469350, 894769550, 895069800, 895370100, 895670450, 895970850, 896271300, 896571800, 896872350, 897172950, 897473600, 897774300, 898075050, 898375850, 898676700, 898977600, 899278550, 899579550, 899880600, 900181700, 900482850, 900784050, 901085300, 901386600, 901687950, 901989350, 902290800, 902592300, 902893850, 903195450, 903497100, 903798800, 904100550, 904402350, 904704200, 905006100, 905308050, 905610050, 905912100, 906214200, 906516350, 906818550, 907120800, 907423100, 907725450, 908027850, 908330300, 908632800, 908935350, 909237950, 909540600, 909843300, 910146050, 910448850, 910751700, 911054600, 911357550, 911660550, 911963600, 912266700, 912569850, 912873050, 913176300, 913479600, 913782950, 914086350, 914389800, 914693300, 914996850, 915300450, 915604100, 915907800, 916211550, 916515350, 916819200, 917123100, 917427050, 917731050, 918035100, 918339200, 918643350, 918947550, 919251800, 919556100, 919860450, 920164850, 920469300, 920773800, 921078350, 921382950, 921687600, 921992300, 922297050, 922601850, 922906700, 923211600, 923516550, 923821550, 924126600, 924431700, 924736850, 925042050, 925347300, 925652600, 925957950, 926263350, 926568800, 926874300, 927179850, 927485450, 927791100, 928096800, 928402550, 928708350, 929014200, 929320100, 929626050, 929932050, 930238100, 930544200, 930850350, 931156550, 931462800, 931769100, 932075450, 932381850, 932688300, 932994800, 933301350, 933607950, 933914600, 934221300, 934528050, 934834850, 935141700, 935448600, 935755550, 936062550, 936369600, 936676700, 936983850, 937291050, 937598300, 937905600, 938212950, 938520350, 938827800, 939135300, 939442850, 939750450, 940058100, 940365800, 940673550, 940981350, 941289200, 941597100, 941905050, 942213050, 942521100, 942829200, 943137350, 943445550, 943753800, 944062100, 944370450, 944678850, 944987300, 945295800, 945604350, 945912950, 946221600, 946530300, 946839050, 947147850, 947456700, 947765600, 948074550, 948383550, 948692600, 949001700, 949310850, 949620050, 949929300, 950238600, 950547950, 950857350, 951166800, 951476300, 951785850, 952095450, 952405100, 952714800, 953024550, 953334350, 953644200, 953954100, 954264050, 954574050, 954884100, 955194200, 955504350, 955814550, 956124800, 956435100, 956745450, 957055850, 957366300, 957676800, 957987350, 958297950, 958608600, 958919300, 959230050, 959540850, 959851700, 960162600, 960473550, 960784550, 961095600, 961406700, 961717850, 962029050, 962340300, 962651600, 962962950, 963274350, 963585800, 963897300, 964208850, 964520450, 964832100, 965143800, 965455550, 965767350, 966079200, 966391100, 966703050, 967015050, 967327100, 967639200, 967951350, 968263550, 968575800, 968888100, 969200450, 969512850, 969825300, 970137800, 970450350, 970762950, 971075600, 971388300, 971701050, 972013850, 972326700, 972639600, 972952550, 973265550, 973578600, 973891700, 974204850, 974518050, 974831300, 975144600, 975457950, 975771350, 976084800, 976398300, 976711850, 977025450, 977339100, 977652800, 977966550, 978280350, 978594200, 978908100, 979222050, 979536050, 979850100, 980164200, 980478350, 980792550, 981106800, 981421100, 981735450, 982049850, 982364300, 982678800, 982993350, 983307950, 983622600, 983937300, 984252050, 984566850, 984881700, 985196600, 985511550, 985826550, 986141600, 986456700, 986771850, 987087050, 987402300, 987717600, 988032950, 988348350, 988663800, 988979300, 989294850, 989610450, 989926100, 990241800, 990557550, 990873350, 991189200, 991505100, 991821050, 992137050, 992453100, 992769200, 993085350, 993401550, 993717800, 994034100, 994350450, 994666850, 994983300, 995299800, 995616350, 995932950, 996249600, 996566300, 996883050, 997199850, 997516700, 997833600, 998150550, 998467550, 998784600, 999101700, 999418850, 999736050, 1000053300, 1000370600, 1000687950, 1001005350, 1001322800, 1001640300, 1001957850, 1002275450, 1002593100, 1002910800, 1003228550, 1003546350, 1003864200, 1004182100, 1004500050, 1004818050, 1005136100, 1005454200, 1005772350, 1006090550, 1006408800, 1006727100, 1007045450, 1007363850, 1007682300, 1008000800, 1008319350, 1008637950, 1008956600, 1009275300, 1009594050, 1009912850, 1010231700, 1010550600, 1010869550, 1011188550, 1011507600, 1011826700, 1012145850, 1012465050, 1012784300,
            1013103600, 1013422950, 1013742350, 1014061800, 1014381300, 1014700850, 1015020450, 1015340100, 1015659800, 1015979550, 1016299350, 1016619200, 1016939100, 1017259050, 1017579050, 1017899100, 1018219200, 1018539350, 1018859550, 1019179800, 1019500100, 1019820450, 1020140850, 1020461300, 1020781800, 1021102350, 1021422950, 1021743600, 1022064300, 1022385050, 1022705850, 1023026700, 1023347600, 1023668550, 1023989550, 1024310600, 1024631700, 1024952850, 1025274050, 1025595300, 1025916600, 1026237950, 1026559350, 1026880800, 1027202300, 1027523850, 1027845450, 1028167100, 1028488800, 1028810550, 1029132350, 1029454200, 1029776100, 1030098050, 1030420050, 1030742100, 1031064200, 1031386350, 1031708550, 1032030800, 1032353100, 1032675450, 1032997850, 1033320300, 1033642800, 1033965350, 1034287950, 1034610600, 1034933300, 1035256050, 1035578850, 1035901700, 1036224600, 1036547550, 1036870550, 1037193600, 1037516700, 1037839850, 1038163050, 1038486300, 1038809600, 1039132950, 1039456350, 1039779800, 1040103300, 1040426850, 1040750450, 1041074100, 1041397800, 1041721550, 1042045350, 1042369200, 1042693100, 1043017050, 1043341050, 1043665100, 1043989200, 1044313350, 1044637550, 1044961800, 1045286100, 1045610450, 1045934850, 1046259300, 1046583800, 1046908350, 1047232950, 1047557600, 1047882300, 1048207050, 1048531850, 1048856700, 1049181600, 1049506550, 1049831550, 1050156600, 1050481700, 1050806850, 1051132050, 1051457300, 1051782600, 1052107950, 1052433350, 1052758800, 1053084300, 1053409850, 1053735450, 1054061100, 1054386800, 1054712550, 1055038350, 1055364200, 1055690100, 1056016050, 1056342050, 1056668100, 1056994200, 1057320350, 1057646550, 1057972800, 1058299100, 1058625450, 1058951850, 1059278300, 1059604800, 1059931350, 1060257950, 1060584600, 1060911300, 1061238050, 1061564850, 1061891700, 1062218600, 1062545550, 1062872550, 1063199600, 1063526700, 1063853850, 1064181050, 1064508300, 1064835600, 1065162950, 1065490350, 1065817800, 1066145300, 1066472850, 1066800450, 1067128100, 1067455800, 1067783550, 1068111350, 1068439200, 1068767100, 1069095050, 1069423050, 1069751100, 1070079200, 1070407350, 1070735550, 1071063800, 1071392100, 1071720450, 1072048850, 1072377300, 1072705800, 1073034350, 1073362950, 1073691600, 1074020300, 1074349050, 1074677850, 1075006700, 1075335600, 1075664550, 1075993550, 1076322600, 1076651700, 1076980850, 1077310050, 1077639300, 1077968600, 1078297950, 1078627350, 1078956800, 1079286300, 1079615850, 1079945450, 1080275100, 1080604800, 1080934550, 1081264350, 1081594200, 1081924100, 1082254050, 1082584050, 1082914100, 1083244200, 1083574350, 1083904550, 1084234800, 1084565100, 1084895450, 1085225850, 1085556300, 1085886800, 1086217350, 1086547950, 1086878600, 1087209300, 1087540050, 1087870850, 1088201700, 1088532600, 1088863550, 1089194550, 1089525600, 1089856700, 1090187850, 1090519050, 1090850300, 1091181600, 1091512950, 1091844350, 1092175800, 1092507300, 1092838850, 1093170450, 1093502100, 1093833800, 1094165550, 1094497350, 1094829200, 1095161100, 1095493050, 1095825050, 1096157100, 1096489200, 1096821350, 1097153550, 1097485800, 1097818100, 1098150450, 1098482850, 1098815300, 1099147800, 1099480350, 1099812950, 1100145600, 1100478300, 1100811050, 1101143850, 1101476700, 1101809600, 1102142550, 1102475550, 1102808600, 1103141700, 1103474850, 1103808050, 1104141300, 1104474600, 1104807950, 1105141350, 1105474800, 1105808300, 1106141850, 1106475450, 1106809100, 1107142800, 1107476550, 1107810350, 1108144200, 1108478100, 1108812050, 1109146050, 1109480100, 1109814200, 1110148350, 1110482550, 1110816800, 1111151100, 1111485450, 1111819850, 1112154300, 1112488800, 1112823350, 1113157950, 1113492600, 1113827300, 1114162050, 1114496850, 1114831700, 1115166600, 1115501550, 1115836550, 1116171600, 1116506700, 1116841850, 1117177050, 1117512300, 1117847600, 1118182950, 1118518350, 1118853800, 1119189300, 1119524850, 1119860450, 1120196100, 1120531800, 1120867550, 1121203350, 1121539200, 1121875100, 1122211050, 1122547050, 1122883100, 1123219200, 1123555350, 1123891550, 1124227800, 1124564100, 1124900450, 1125236850, 1125573300, 1125909800, 1126246350, 1126582950, 1126919600, 1127256300, 1127593050, 1127929850, 1128266700, 1128603600, 1128940550, 1129277550, 1129614600, 1129951700, 1130288850, 1130626050, 1130963300, 1131300600, 1131637950, 1131975350, 1132312800, 1132650300, 1132987850, 1133325450, 1133663100, 1134000800, 1134338550, 1134676350, 1135014200, 1135352100, 1135690050, 1136028050,
            1136366100, 1136704200, 1137042350, 1137380550, 1137718800, 1138057100, 1138395450, 1138733850, 1139072300, 1139410800, 1139749350, 1140087950, 1140426600, 1140765300, 1141104050, 1141442850, 1141781700, 1142120600, 1142459550, 1142798550, 1143137600, 1143476700, 1143815850, 1144155050, 1144494300, 1144833600, 1145172950, 1145512350, 1145851800, 1146191300, 1146530850, 1146870450, 1147210100, 1147549800, 1147889550, 1148229350, 1148569200, 1148909100, 1149249050, 1149589050, 1149929100, 1150269200, 1150609350, 1150949550, 1151289800, 1151630100, 1151970450, 1152310850, 1152651300, 1152991800, 1153332350, 1153672950, 1154013600, 1154354300, 1154695050, 1155035850, 1155376700, 1155717600, 1156058550, 1156399550, 1156740600, 1157081700, 1157422850, 1157764050, 1158105300, 1158446600, 1158787950, 1159129350, 1159470800, 1159812300, 1160153850, 1160495450, 1160837100, 1161178800, 1161520550, 1161862350, 1162204200, 1162546100, 1162888050, 1163230050, 1163572100, 1163914200, 1164256350, 1164598550, 1164940800, 1165283100, 1165625450, 1165967850, 1166310300, 1166652800, 1166995350, 1167337950, 1167680600, 1168023300, 1168366050, 1168708850, 1169051700, 1169394600, 1169737550, 1170080550, 1170423600, 1170766700, 1171109850, 1171453050, 1171796300, 1172139600, 1172482950, 1172826350, 1173169800, 1173513300, 1173856850, 1174200450, 1174544100, 1174887800, 1175231550, 1175575350, 1175919200, 1176263100, 1176607050, 1176951050, 1177295100, 1177639200, 1177983350, 1178327550, 1178671800, 1179016100, 1179360450, 1179704850, 1180049300, 1180393800, 1180738350, 1181082950, 1181427600, 1181772300, 1182117050, 1182461850, 1182806700, 1183151600, 1183496550, 1183841550, 1184186600, 1184531700, 1184876850, 1185222050, 1185567300, 1185912600, 1186257950, 1186603350, 1186948800, 1187294300, 1187639850, 1187985450, 1188331100, 1188676800, 1189022550, 1189368350, 1189714200, 1190060100, 1190406050, 1190752050, 1191098100, 1191444200, 1191790350, 1192136550, 1192482800, 1192829100, 1193175450, 1193521850, 1193868300, 1194214800, 1194561350, 1194907950, 1195254600, 1195601300, 1195948050, 1196294850, 1196641700, 1196988600, 1197335550, 1197682550, 1198029600, 1198376700, 1198723850, 1199071050, 1199418300, 1199765600, 1200112950, 1200460350, 1200807800, 1201155300, 1201502850, 1201850450, 1202198100, 1202545800, 1202893550, 1203241350, 1203589200, 1203937100, 1204285050, 1204633050, 1204981100, 1205329200, 1205677350, 1206025550, 1206373800, 1206722100, 1207070450, 1207418850, 1207767300, 1208115800, 1208464350, 1208812950, 1209161600, 1209510300, 1209859050, 1210207850, 1210556700, 1210905600, 1211254550, 1211603550, 1211952600, 1212301700, 1212650850, 1213000050, 1213349300, 1213698600, 1214047950, 1214397350, 1214746800, 1215096300, 1215445850, 1215795450, 1216145100, 1216494800, 1216844550, 1217194350, 1217544200, 1217894100, 1218244050, 1218594050, 1218944100, 1219294200, 1219644350, 1219994550, 1220344800, 1220695100, 1221045450, 1221395850, 1221746300, 1222096800, 1222447350, 1222797950, 1223148600, 1223499300, 1223850050, 1224200850, 1224551700, 1224902600, 1225253550, 1225604550, 1225955600, 1226306700, 1226657850, 1227009050, 1227360300, 1227711600, 1228062950, 1228414350, 1228765800, 1229117300, 1229468850, 1229820450, 1230172100, 1230523800, 1230875550, 1231227350, 1231579200, 1231931100, 1232283050, 1232635050, 1232987100, 1233339200, 1233691350, 1234043550, 1234395800, 1234748100, 1235100450, 1235452850, 1235805300, 1236157800, 1236510350, 1236862950, 1237215600, 1237568300, 1237921050, 1238273850, 1238626700, 1238979600, 1239332550, 1239685550, 1240038600, 1240391700, 1240744850, 1241098050, 1241451300, 1241804600, 1242157950, 1242511350, 1242864800, 1243218300, 1243571850, 1243925450, 1244279100, 1244632800, 1244986550, 1245340350, 1245694200, 1246048100, 1246402050, 1246756050, 1247110100, 1247464200, 1247818350, 1248172550, 1248526800, 1248881100, 1249235450, 1249589850, 1249944300, 1250298800, 1250653350, 1251007950, 1251362600, 1251717300, 1252072050, 1252426850, 1252781700, 1253136600, 1253491550, 1253846550, 1254201600, 1254556700, 1254911850, 1255267050, 1255622300, 1255977600, 1256332950, 1256688350, 1257043800, 1257399300, 1257754850, 1258110450, 1258466100, 1258821800, 1259177550, 1259533350, 1259889200, 1260245100, 1260601050, 1260957050, 1261313100, 1261669200, 1262025350, 1262381550, 1262737800, 1263094100, 1263450450, 1263806850, 1264163300, 1264519800, 1264876350, 1265232950, 1265589600, 1265946300, 1266303050,
            1266659850, 1267016700, 1267373600, 1267730550, 1268087550, 1268444600, 1268801700, 1269158850, 1269516050, 1269873300, 1270230600, 1270587950, 1270945350, 1271302800, 1271660300, 1272017850, 1272375450, 1272733100, 1273090800, 1273448550, 1273806350, 1274164200, 1274522100, 1274880050, 1275238050, 1275596100, 1275954200, 1276312350, 1276670550, 1277028800, 1277387100, 1277745450, 1278103850, 1278462300, 1278820800, 1279179350, 1279537950, 1279896600, 1280255300, 1280614050, 1280972850, 1281331700, 1281690600, 1282049550, 1282408550, 1282767600, 1283126700, 1283485850, 1283845050, 1284204300, 1284563600, 1284922950, 1285282350, 1285641800, 1286001300, 1286360850, 1286720450, 1287080100, 1287439800, 1287799550, 1288159350, 1288519200, 1288879100, 1289239050, 1289599050, 1289959100, 1290319200, 1290679350, 1291039550, 1291399800, 1291760100, 1292120450, 1292480850, 1292841300, 1293201800, 1293562350, 1293922950, 1294283600, 1294644300, 1295005050, 1295365850, 1295726700, 1296087600, 1296448550, 1296809550, 1297170600, 1297531700, 1297892850, 1298254050, 1298615300, 1298976600, 1299337950, 1299699350, 1300060800, 1300422300, 1300783850, 1301145450, 1301507100, 1301868800, 1302230550, 1302592350, 1302954200, 1303316100, 1303678050, 1304040050, 1304402100, 1304764200, 1305126350, 1305488550, 1305850800, 1306213100, 1306575450, 1306937850, 1307300300, 1307662800, 1308025350, 1308387950, 1308750600, 1309113300, 1309476050, 1309838850, 1310201700, 1310564600, 1310927550, 1311290550, 1311653600, 1312016700, 1312379850, 1312743050, 1313106300, 1313469600, 1313832950, 1314196350, 1314559800, 1314923300, 1315286850, 1315650450, 1316014100, 1316377800, 1316741550, 1317105350, 1317469200, 1317833100, 1318197050, 1318561050, 1318925100, 1319289200, 1319653350, 1320017550, 1320381800, 1320746100, 1321110450, 1321474850, 1321839300, 1322203800, 1322568350, 1322932950, 1323297600, 1323662300, 1324027050, 1324391850, 1324756700, 1325121600, 1325486550, 1325851550, 1326216600, 1326581700, 1326946850, 1327312050, 1327677300, 1328042600, 1328407950, 1328773350, 1329138800, 1329504300, 1329869850, 1330235450, 1330601100, 1330966800, 1331332550, 1331698350, 1332064200, 1332430100, 1332796050, 1333162050, 1333528100, 1333894200, 1334260350, 1334626550, 1334992800, 1335359100, 1335725450, 1336091850, 1336458300, 1336824800, 1337191350, 1337557950, 1337924600, 1338291300, 1338658050, 1339024850, 1339391700, 1339758600, 1340125550, 1340492550, 1340859600, 1341226700, 1341593850, 1341961050, 1342328300, 1342695600, 1343062950, 1343430350, 1343797800, 1344165300, 1344532850, 1344900450, 1345268100, 1345635800, 1346003550, 1346371350, 1346739200, 1347107100, 1347475050, 1347843050, 1348211100, 1348579200, 1348947350, 1349315550, 1349683800, 1350052100, 1350420450, 1350788850, 1351157300, 1351525800, 1351894350, 1352262950, 1352631600, 1353000300, 1353369050, 1353737850, 1354106700, 1354475600, 1354844550, 1355213550, 1355582600, 1355951700, 1356320850, 1356690050, 1357059300, 1357428600, 1357797950, 1358167350, 1358536800, 1358906300, 1359275850, 1359645450, 1360015100, 1360384800, 1360754550, 1361124350, 1361494200, 1361864100, 1362234050, 1362604050, 1362974100, 1363344200, 1363714350, 1364084550, 1364454800, 1364825100, 1365195450, 1365565850, 1365936300, 1366306800, 1366677350, 1367047950, 1367418600, 1367789300, 1368160050, 1368530850, 1368901700, 1369272600, 1369643550, 1370014550, 1370385600, 1370756700, 1371127850, 1371499050, 1371870300, 1372241600, 1372612950, 1372984350, 1373355800, 1373727300, 1374098850, 1374470450, 1374842100, 1375213800, 1375585550, 1375957350, 1376329200, 1376701100, 1377073050, 1377445050, 1377817100, 1378189200, 1378561350, 1378933550, 1379305800, 1379678100, 1380050450, 1380422850, 1380795300, 1381167800, 1381540350, 1381912950, 1382285600, 1382658300, 1383031050, 1383403850, 1383776700, 1384149600, 1384522550, 1384895550, 1385268600, 1385641700, 1386014850, 1386388050, 1386761300, 1387134600, 1387507950, 1387881350, 1388254800, 1388628300, 1389001850, 1389375450, 1389749100, 1390122800, 1390496550, 1390870350, 1391244200, 1391618100, 1391992050, 1392366050, 1392740100, 1393114200, 1393488350, 1393862550, 1394236800, 1394611100, 1394985450, 1395359850, 1395734300, 1396108800, 1396483350, 1396857950, 1397232600, 1397607300, 1397982050, 1398356850, 1398731700, 1399106600, 1399481550, 1399856550, 1400231600, 1400606700, 1400981850, 1401357050, 1401732300, 1402107600, 1402482950, 1402858350, 1403233800, 1403609300,
            1403984850, 1404360450, 1404736100, 1405111800, 1405487550, 1405863350, 1406239200, 1406615100, 1406991050, 1407367050, 1407743100, 1408119200, 1408495350, 1408871550, 1409247800, 1409624100, 1410000450, 1410376850, 1410753300, 1411129800, 1411506350, 1411882950, 1412259600, 1412636300, 1413013050, 1413389850, 1413766700, 1414143600, 1414520550, 1414897550, 1415274600, 1415651700, 1416028850, 1416406050, 1416783300, 1417160600, 1417537950, 1417915350, 1418292800, 1418670300, 1419047850, 1419425450, 1419803100, 1420180800, 1420558550, 1420936350, 1421314200, 1421692100, 1422070050, 1422448050, 1422826100, 1423204200, 1423582350, 1423960550, 1424338800, 1424717100, 1425095450, 1425473850, 1425852300, 1426230800, 1426609350, 1426987950, 1427366600, 1427745300, 1428124050, 1428502850, 1428881700, 1429260600, 1429639550, 1430018550, 1430397600, 1430776700, 1431155850, 1431535050, 1431914300, 1432293600, 1432672950, 1433052350, 1433431800, 1433811300, 1434190850, 1434570450, 1434950100, 1435329800, 1435709550, 1436089350, 1436469200, 1436849100, 1437229050, 1437609050, 1437989100, 1438369200, 1438749350, 1439129550, 1439509800, 1439890100, 1440270450, 1440650850, 1441031300, 1441411800, 1441792350, 1442172950, 1442553600, 1442934300, 1443315050, 1443695850, 1444076700, 1444457600, 1444838550, 1445219550, 1445600600, 1445981700, 1446362850, 1446744050, 1447125300, 1447506600, 1447887950, 1448269350, 1448650800, 1449032300, 1449413850, 1449795450, 1450177100, 1450558800, 1450940550, 1451322350, 1451704200, 1452086100, 1452468050, 1452850050, 1453232100, 1453614200, 1453996350, 1454378550, 1454760800, 1455143100, 1455525450, 1455907850, 1456290300, 1456672800, 1457055350, 1457437950, 1457820600, 1458203300, 1458586050, 1458968850, 1459351700, 1459734600, 1460117550, 1460500550, 1460883600, 1461266700, 1461649850, 1462033050, 1462416300, 1462799600, 1463182950, 1463566350, 1463949800, 1464333300, 1464716850, 1465100450, 1465484100, 1465867800, 1466251550, 1466635350, 1467019200, 1467403100, 1467787050, 1468171050, 1468555100, 1468939200, 1469323350, 1469707550, 1470091800, 1470476100, 1470860450, 1471244850, 1471629300, 1472013800, 1472398350, 1472782950, 1473167600, 1473552300, 1473937050, 1474321850, 1474706700, 1475091600, 1475476550, 1475861550, 1476246600, 1476631700, 1477016850, 1477402050, 1477787300, 1478172600, 1478557950, 1478943350, 1479328800, 1479714300, 1480099850, 1480485450, 1480871100, 1481256800, 1481642550, 1482028350, 1482414200, 1482800100, 1483186050, 1483572050, 1483958100, 1484344200, 1484730350, 1485116550, 1485502800, 1485889100, 1486275450, 1486661850, 1487048300, 1487434800, 1487821350, 1488207950, 1488594600, 1488981300, 1489368050, 1489754850, 1490141700, 1490528600, 1490915550, 1491302550, 1491689600, 1492076700, 1492463850, 1492851050, 1493238300, 1493625600, 1494012950, 1494400350, 1494787800, 1495175300, 1495562850, 1495950450, 1496338100, 1496725800, 1497113550, 1497501350, 1497889200, 1498277100, 1498665050, 1499053050, 1499441100, 1499829200, 1500217350, 1500605550, 1500993800, 1501382100, 1501770450, 1502158850, 1502547300, 1502935800, 1503324350, 1503712950, 1504101600, 1504490300, 1504879050, 1505267850, 1505656700, 1506045600, 1506434550, 1506823550, 1507212600, 1507601700, 1507990850, 1508380050, 1508769300, 1509158600, 1509547950, 1509937350, 1510326800, 1510716300, 1511105850, 1511495450, 1511885100, 1512274800, 1512664550, 1513054350, 1513444200, 1513834100, 1514224050, 1514614050, 1515004100, 1515394200, 1515784350, 1516174550, 1516564800, 1516955100, 1517345450, 1517735850, 1518126300, 1518516800, 1518907350, 1519297950, 1519688600, 1520079300, 1520470050, 1520860850, 1521251700, 1521642600, 1522033550, 1522424550, 1522815600, 1523206700, 1523597850, 1523989050, 1524380300, 1524771600, 1525162950, 1525554350, 1525945800, 1526337300, 1526728850, 1527120450, 1527512100, 1527903800, 1528295550, 1528687350, 1529079200, 1529471100, 1529863050, 1530255050, 1530647100, 1531039200, 1531431350, 1531823550, 1532215800, 1532608100, 1533000450, 1533392850, 1533785300, 1534177800, 1534570350, 1534962950, 1535355600, 1535748300, 1536141050, 1536533850, 1536926700, 1537319600, 1537712550, 1538105550, 1538498600, 1538891700, 1539284850, 1539678050, 1540071300, 1540464600, 1540857950, 1541251350, 1541644800, 1542038300, 1542431850, 1542825450, 1543219100, 1543612800, 1544006550, 1544400350, 1544794200, 1545188100, 1545582050, 1545976050, 1546370100, 1546764200, 1547158350, 1547552550, 1547946800,
            1548341100, 1548735450, 1549129850, 1549524300, 1549918800, 1550313350, 1550707950, 1551102600, 1551497300, 1551892050, 1552286850, 1552681700, 1553076600, 1553471550, 1553866550, 1554261600, 1554656700, 1555051850, 1555447050, 1555842300, 1556237600, 1556632950, 1557028350, 1557423800, 1557819300, 1558214850, 1558610450, 1559006100, 1559401800, 1559797550, 1560193350, 1560589200, 1560985100, 1561381050, 1561777050, 1562173100, 1562569200, 1562965350, 1563361550, 1563757800, 1564154100, 1564550450, 1564946850, 1565343300, 1565739800, 1566136350, 1566532950, 1566929600, 1567326300, 1567723050, 1568119850, 1568516700, 1568913600, 1569310550, 1569707550, 1570104600, 1570501700, 1570898850, 1571296050, 1571693300, 1572090600, 1572487950, 1572885350, 1573282800, 1573680300, 1574077850, 1574475450, 1574873100, 1575270800, 1575668550, 1576066350, 1576464200, 1576862100, 1577260050, 1577658050, 1578056100, 1578454200, 1578852350, 1579250550, 1579648800, 1580047100, 1580445450, 1580843850, 1581242300, 1581640800, 1582039350, 1582437950, 1582836600, 1583235300, 1583634050, 1584032850, 1584431700, 1584830600, 1585229550, 1585628550, 1586027600, 1586426700, 1586825850, 1587225050, 1587624300, 1588023600, 1588422950, 1588822350, 1589221800, 1589621300, 1590020850, 1590420450, 1590820100, 1591219800, 1591619550, 1592019350, 1592419200, 1592819100, 1593219050, 1593619050, 1594019100, 1594419200, 1594819350, 1595219550, 1595619800, 1596020100, 1596420450, 1596820850, 1597221300, 1597621800, 1598022350, 1598422950, 1598823600, 1599224300, 1599625050, 1600025850, 1600426700, 1600827600, 1601228550, 1601629550, 1602030600, 1602431700, 1602832850, 1603234050, 1603635300, 1604036600, 1604437950, 1604839350, 1605240800, 1605642300, 1606043850, 1606445450, 1606847100, 1607248800, 1607650550, 1608052350, 1608454200, 1608856100, 1609258050, 1609660050, 1610062100, 1610464200, 1610866350, 1611268550, 1611670800, 1612073100, 1612475450, 1612877850, 1613280300, 1613682800, 1614085350, 1614487950, 1614890600, 1615293300, 1615696050, 1616098850, 1616501700, 1616904600, 1617307550, 1617710550, 1618113600, 1618516700, 1618919850, 1619323050, 1619726300, 1620129600, 1620532950, 1620936350, 1621339800, 1621743300, 1622146850, 1622550450, 1622954100, 1623357800, 1623761550, 1624165350, 1624569200, 1624973100, 1625377050, 1625781050, 1626185100, 1626589200, 1626993350, 1627397550, 1627801800, 1628206100, 1628610450, 1629014850, 1629419300, 1629823800, 1630228350, 1630632950, 1631037600, 1631442300, 1631847050, 1632251850, 1632656700, 1633061600, 1633466550, 1633871550, 1634276600, 1634681700, 1635086850, 1635492050, 1635897300, 1636302600, 1636707950, 1637113350, 1637518800, 1637924300, 1638329850, 1638735450, 1639141100, 1639546800, 1639952550, 1640358350, 1640764200, 1641170100, 1641576050, 1641982050, 1642388100, 1642794200, 1643200350, 1643606550, 1644012800, 1644419100, 1644825450, 1645231850, 1645638300, 1646044800, 1646451350, 1646857950, 1647264600, 1647671300, 1648078050, 1648484850, 1648891700, 1649298600, 1649705550, 1650112550, 1650519600, 1650926700, 1651333850, 1651741050, 1652148300, 1652555600, 1652962950, 1653370350, 1653777800, 1654185300, 1654592850, 1655000450, 1655408100, 1655815800, 1656223550, 1656631350, 1657039200, 1657447100, 1657855050, 1658263050, 1658671100, 1659079200, 1659487350, 1659895550, 1660303800, 1660712100, 1661120450, 1661528850, 1661937300, 1662345800, 1662754350, 1663162950, 1663571600, 1663980300, 1664389050, 1664797850, 1665206700, 1665615600, 1666024550, 1666433550, 1666842600, 1667251700, 1667660850, 1668070050, 1668479300, 1668888600, 1669297950, 1669707350, 1670116800, 1670526300, 1670935850, 1671345450, 1671755100, 1672164800, 1672574550, 1672984350, 1673394200, 1673804100, 1674214050, 1674624050, 1675034100, 1675444200, 1675854350, 1676264550, 1676674800, 1677085100, 1677495450, 1677905850, 1678316300, 1678726800, 1679137350, 1679547950, 1679958600, 1680369300, 1680780050, 1681190850, 1681601700, 1682012600, 1682423550, 1682834550, 1683245600, 1683656700, 1684067850, 1684479050, 1684890300, 1685301600, 1685712950, 1686124350, 1686535800, 1686947300, 1687358850, 1687770450, 1688182100, 1688593800, 1689005550, 1689417350, 1689829200, 1690241100, 1690653050, 1691065050, 1691477100, 1691889200, 1692301350, 1692713550, 1693125800, 1693538100, 1693950450, 1694362850, 1694775300, 1695187800, 1695600350, 1696012950, 1696425600, 1696838300, 1697251050, 1697663850, 1698076700, 1698489600, 1698902550, 1699315550,
            1699728600, 1700141700, 1700554850, 1700968050, 1701381300, 1701794600, 1702207950, 1702621350, 1703034800, 1703448300, 1703861850, 1704275450, 1704689100, 1705102800, 1705516550, 1705930350, 1706344200, 1706758100, 1707172050, 1707586050, 1708000100, 1708414200, 1708828350, 1709242550, 1709656800, 1710071100, 1710485450, 1710899850, 1711314300, 1711728800, 1712143350, 1712557950, 1712972600, 1713387300, 1713802050, 1714216850, 1714631700, 1715046600, 1715461550, 1715876550, 1716291600, 1716706700, 1717121850, 1717537050, 1717952300, 1718367600, 1718782950, 1719198350, 1719613800, 1720029300, 1720444850, 1720860450, 1721276100, 1721691800, 1722107550, 1722523350, 1722939200, 1723355100, 1723771050, 1724187050, 1724603100, 1725019200, 1725435350, 1725851550, 1726267800, 1726684100, 1727100450, 1727516850, 1727933300, 1728349800, 1728766350, 1729182950, 1729599600, 1730016300, 1730433050, 1730849850, 1731266700, 1731683600, 1732100550, 1732517550, 1732934600, 1733351700, 1733768850, 1734186050, 1734603300, 1735020600, 1735437950, 1735855350, 1736272800, 1736690300, 1737107850, 1737525450, 1737943100, 1738360800, 1738778550, 1739196350, 1739614200, 1740032100, 1740450050, 1740868050, 1741286100, 1741704200, 1742122350, 1742540550, 1742958800, 1743377100, 1743795450, 1744213850, 1744632300, 1745050800, 1745469350, 1745887950, 1746306600, 1746725300, 1747144050, 1747562850, 1747981700, 1748400600, 1748819550, 1749238550, 1749657600, 1750076700, 1750495850, 1750915050, 1751334300, 1751753600, 1752172950, 1752592350, 1753011800, 1753431300, 1753850850, 1754270450, 1754690100, 1755109800, 1755529550, 1755949350, 1756369200, 1756789100, 1757209050, 1757629050, 1758049100, 1758469200, 1758889350, 1759309550, 1759729800, 1760150100, 1760570450, 1760990850, 1761411300, 1761831800, 1762252350, 1762672950, 1763093600, 1763514300, 1763935050, 1764355850, 1764776700, 1765197600, 1765618550, 1766039550, 1766460600, 1766881700, 1767302850, 1767724050, 1768145300, 1768566600, 1768987950, 1769409350, 1769830800, 1770252300, 1770673850, 1771095450, 1771517100, 1771938800, 1772360550, 1772782350, 1773204200, 1773626100, 1774048050, 1774470050, 1774892100, 1775314200, 1775736350, 1776158550, 1776580800, 1777003100, 1777425450, 1777847850, 1778270300, 1778692800, 1779115350, 1779537950, 1779960600, 1780383300, 1780806050, 1781228850, 1781651700, 1782074600, 1782497550, 1782920550, 1783343600, 1783766700, 1784189850, 1784613050, 1785036300, 1785459600, 1785882950, 1786306350, 1786729800, 1787153300, 1787576850 };
        #endregion

        public Main()
        {
            InitializeComponent();
            DevExpress.Skins.SkinManager.EnableFormSkins();
            
            uint_10 = 19709880U;
            uint_11 = 19710844U;
            uint_13 = 0;
            uint_14 = 0;
            uint_12 = 0;
            byte_4 = new byte[0x1000000];
            byte_2 = new byte[] { 0x4c, 0x41, 90, 0x45, 0x52, 0, 0, 0, 0 };
            byte_3 = new byte[] { 0xb3, 0x9b, 10, 230 };
            uint_6 = 31916916U;
            Create9 = new int[250];
            ccc = 0;
            sss = 0;
            zzz = new int[250];
            aaa = 0;
            bbb = 0;
            ddd = 0;
            eee = 0;
            fff = 0;
            ffff = 0;
            CreatedNumber8 = 0;
            EntityCreated2 = new int[250];
            SpawnPed = new int[250];
            SpawnedPed = 0;
            EntityCreated3 = new int[250];
            EntityCreated4 = new int[250];
            EntityCreated5 = new int[250];
            EntityCreated6 = new int[250];
            EntityCreated7 = new int[250];
            EntityCreated8 = new int[250];
            EntityCreated10 = new int[250];
            EntityCreated10 = new int[250];
            OffTheRadarPointer = 31916948U;
            uint_3 = 844103680U;

            Normalmodelman1 = new byte[4]
            {
                (byte) 25,
                (byte) 15,
                byte.MaxValue,
                (byte) 240
            };
            Normalmodelman2 = new byte[4]
            {
                (byte) 25,
                (byte) 16,
                byte.MaxValue,
                (byte) 240
            };

            carhashes.Add(3078201489, "adder");
            carhashes.Add(1283517198, "airbus");
            carhashes.Add(1560980623, "airtug");
            carhashes.Add(1672195559, "akuma");
            carhashes.Add(1171614426, "ambulance");
            carhashes.Add(837858166, "annihilator");
            carhashes.Add(3087536137, "armytanker");
            carhashes.Add(2818520053, "armytrailer");
            carhashes.Add(2657817814, "armytrailer2");
            carhashes.Add(2485144969, "asea");
            carhashes.Add(2487343317, "asea2");
            carhashes.Add(2391954683, "asterope");
            carhashes.Add(2154536131, "bagger");
            carhashes.Add(3895125590, "baletrailer");
            carhashes.Add(3486135912, "baller");
            carhashes.Add(142944341, "baller2");
            carhashes.Add(3253274834, "banshee");
            carhashes.Add(3471458123, "barracks");
            carhashes.Add(1074326203, "barracks2");
            carhashes.Add(4180675781, "bati");
            carhashes.Add(3403504941, "bati2");
            carhashes.Add(2053223216, "benson");
            carhashes.Add(1126868326, "bfinjection");
            carhashes.Add(850991848, "biff");
            carhashes.Add(4278019151, "bison");
            carhashes.Add(2072156101, "bison2");
            carhashes.Add(1739845664, "bison3");
            carhashes.Add(850565707, "bjxl");
            carhashes.Add(2166734073, "blazer");
            carhashes.Add(4246935337, "blazer2");
            carhashes.Add(3025077634, "blazer3");
            carhashes.Add(4143991942, "blimp");
            carhashes.Add(3950024287, "blista");
            carhashes.Add(1131912276, "bmx");
            carhashes.Add(524108981, "boattrailer");
            carhashes.Add(1069929536, "bobcatxl");
            carhashes.Add(2859047862, "bodhi2");
            carhashes.Add(2307837162, "boxville");
            carhashes.Add(4061868990, "boxville2");
            carhashes.Add(121658888, "boxville3");
            carhashes.Add(3612755468, "buccaneer");
            carhashes.Add(3990165190, "buffalo");
            carhashes.Add(736902334, "buffalo2");
            carhashes.Add(1886712733, "bulldozer");
            carhashes.Add(2598821281, "bullet");
            carhashes.Add(2948279460, "burrito");
            carhashes.Add(3387490166, "burrito2");
            carhashes.Add(2551651283, "burrito3");
            carhashes.Add(893081117, "burrito4");
            carhashes.Add(1132262048, "burrito5");
            carhashes.Add(3581397346, "bus");
            carhashes.Add(788747387, "buzzard");
            carhashes.Add(745926877, "buzzard2");
            carhashes.Add(3334677549, "cablecar");
            carhashes.Add(1147287684, "caddy");
            carhashes.Add(3757070668, "caddy2");
            carhashes.Add(1876516712, "camper");
            carhashes.Add(2072687711, "carbonizzare");
            carhashes.Add(11251904, "carbonrs");
            carhashes.Add(4244420235, "cargobob");
            carhashes.Add(1621617168, "cargobob2");
            carhashes.Add(1394036463, "cargobob3");
            carhashes.Add(368211810, "cargoplane");
            carhashes.Add(2006918058, "cavalcade");
            carhashes.Add(3505073125, "cavalcade2");
            carhashes.Add(2983812512, "cheetah");
            carhashes.Add(2222034228, "coach");
            carhashes.Add(330661258, "cogcabrio");
            carhashes.Add(3249425686, "comet2");
            carhashes.Add(108773431, "coquette");
            carhashes.Add(448402357, "cruiser");
            carhashes.Add(321739290, "crusader");
            carhashes.Add(3650256867, "cuban800");
            carhashes.Add(3288047904, "cutter");
            carhashes.Add(2006142190, "daemon");
            carhashes.Add(3164157193, "dilettante");
            carhashes.Add(1682114128, "dilettante2");
            carhashes.Add(1033245328, "dinghy");
            carhashes.Add(276773164, "dinghy2");
            carhashes.Add(1770332643, "dloader");
            carhashes.Add(2154757102, "docktrailer");
            carhashes.Add(3410276810, "docktug");
            carhashes.Add(80636076, "dominator");
            carhashes.Add(2623969160, "double");
            carhashes.Add(1177543287, "dubsta");
            carhashes.Add(3900892662, "dubsta2");
            carhashes.Add(2164484578, "dump");
            carhashes.Add(2633113103, "dune");
            carhashes.Add(534258863, "dune2");
            carhashes.Add(970356638, "duster");
            carhashes.Add(3728579874, "elegy2");
            carhashes.Add(3609690755, "emperor");
            carhashes.Add(2411965148, "emperor2");
            carhashes.Add(3053254478, "emperor3");
            carhashes.Add(3003014393, "entityxf");
            carhashes.Add(4289813342, "exemplar");
            carhashes.Add(3703357000, "f620");
            carhashes.Add(55628203, "faggio2");
            carhashes.Add(1127131465, "fbi");
            carhashes.Add(2647026068, "fbi2");
            carhashes.Add(3903372712, "felon");
            carhashes.Add(4205676014, "felon2");
            carhashes.Add(2299640309, "feltzer2");
            carhashes.Add(1938952078, "firetruk");
            carhashes.Add(3458454463, "fixter");
            carhashes.Add(1353720154, "flatbed");
            carhashes.Add(1491375716, "forklift");
            carhashes.Add(3157435195, "fq2");
            carhashes.Add(1030400667, "freight");
            carhashes.Add(184361638, "freightcar");
            carhashes.Add(920453016, "freightcont1");
            carhashes.Add(240201337, "freightcont2");
            carhashes.Add(642617954, "freightgrain");
            carhashes.Add(3517691494, "freighttrailer");
            carhashes.Add(744705981, "frogger");
            carhashes.Add(1949211328, "frogger2");
            carhashes.Add(1909141499, "fugitive");
            carhashes.Add(499169875, "fusilade");
            carhashes.Add(2016857647, "futo");
            carhashes.Add(2494797253, "gauntlet");
            carhashes.Add(2549763894, "gburrito");
            carhashes.Add(1019737494, "graintrailer");
            carhashes.Add(2519238556, "granger");
            carhashes.Add(2751205197, "gresley");
            carhashes.Add(884422927, "habanero");
            carhashes.Add(444583674, "handler");
            carhashes.Add(1518533038, "hauler");
            carhashes.Add(301427732, "hexer");
            carhashes.Add(37348240, "hotknife");
            carhashes.Add(418536135, "infernus");
            carhashes.Add(3005245074, "ingot");
            carhashes.Add(886934177, "intruder");
            carhashes.Add(3117103977, "issi2");
            carhashes.Add(3670438162, "jackal");
            carhashes.Add(1051415893, "jb700");
            carhashes.Add(1058115860, "jet");
            carhashes.Add(861409633, "jetmax");
            carhashes.Add(4174679674, "journey");
            carhashes.Add(544021352, "khamelion");
            carhashes.Add(1269098716, "landstalker");
            carhashes.Add(3013282534, "lazer");
            carhashes.Add(469291905, "lguard");
            carhashes.Add(621481054, "luxor");
            carhashes.Add(2548391185, "mammatus");
            carhashes.Add(2170765704, "manana");
            carhashes.Add(3251507587, "marquis");
            carhashes.Add(2634305738, "maverick");
            carhashes.Add(914654722, "mesa");
            carhashes.Add(3546958660, "mesa2");
            carhashes.Add(2230595153, "mesa3");
            carhashes.Add(868868440, "metrotrain");
            carhashes.Add(3984502180, "minivan");
            carhashes.Add(3510150843, "mixer");
            carhashes.Add(475220373, "mixer2");
            carhashes.Add(3861591579, "monroe");
            carhashes.Add(1783355638, "mower");
            carhashes.Add(904750859, "mule");
            carhashes.Add(3244501995, "mule2");
            carhashes.Add(3660088182, "nemesis");
            carhashes.Add(1032823388, "ninef");
            carhashes.Add(2833484545, "ninef2");
            carhashes.Add(1348744438, "oracle");
            carhashes.Add(3783366066, "oracle2");
            carhashes.Add(569305213, "packer");
            carhashes.Add(3486509883, "patriot");
            carhashes.Add(2287941233, "pbus");
            carhashes.Add(3385765638, "pcj");
            carhashes.Add(3917501776, "penumbra");
            carhashes.Add(1830407356, "peyote");
            carhashes.Add(2157618379, "phantom");
            carhashes.Add(2199527893, "phoenix");
            carhashes.Add(1507916787, "picador");
            carhashes.Add(2046537925, "police");
            carhashes.Add(2667966721, "police2");
            carhashes.Add(1912215274, "police3");
            carhashes.Add(2321795001, "police4");
            carhashes.Add(4260343491, "policeb");
            carhashes.Add(2758042359, "policeold1");
            carhashes.Add(2515846680, "policeold2");
            carhashes.Add(456714581, "policet");
            carhashes.Add(353883353, "polmav");
            carhashes.Add(4175309224, "pony");
            carhashes.Add(943752001, "pony2");
            carhashes.Add(2112052861, "pounder");
            carhashes.Add(2844316578, "prairie");
            carhashes.Add(741586030, "pranger");
            carhashes.Add(3806844075, "predator");
            carhashes.Add(2411098011, "premier");
            carhashes.Add(3144368207, "primo");
            carhashes.Add(356391690, "proptrailer");
            carhashes.Add(2643899483, "radi");
            carhashes.Add(390902130, "raketrailer");
            carhashes.Add(1645267888, "rancherxl");
            carhashes.Add(1933662059, "rancherxl2");
            carhashes.Add(2360515092, "rapidgt");
            carhashes.Add(1737773231, "rapidgt2");
            carhashes.Add(3627815886, "ratloader");
            carhashes.Add(3087195462, "rebel");
            carhashes.Add(2249373259, "rebel2");
            carhashes.Add(4280472072, "regina");
            carhashes.Add(3196165219, "rentalbus");
            carhashes.Add(782665360, "rhino");
            carhashes.Add(3089277354, "riot");
            carhashes.Add(3448987385, "ripley");
            carhashes.Add(2136773105, "rocoto");
            carhashes.Add(627094268, "romero");
            carhashes.Add(2589662668, "rubble");
            carhashes.Add(3401388520, "ruffian");
            carhashes.Add(4067225593, "ruiner");
            carhashes.Add(1162065741, "rumpo");
            carhashes.Add(2518351607, "rumpo2");
            carhashes.Add(2609945748, "sabregt");
            carhashes.Add(3695398481, "sadler");
            carhashes.Add(734217681, "sadler2");
            carhashes.Add(788045382, "sanchez");
            carhashes.Add(2841686334, "sanchez2");
            carhashes.Add(3105951696, "sandking");
            carhashes.Add(989381445, "sandking2");
            carhashes.Add(3039514899, "schafter2");
            carhashes.Add(3548084598, "schwarzer");
            carhashes.Add(4108429845, "scorcher");
            carhashes.Add(2594165727, "scrap");
            carhashes.Add(3264692260, "seashark");
            carhashes.Add(3678636260, "seashark2");
            carhashes.Add(1221512915, "seminole");
            carhashes.Add(1349725314, "sentinel");
            carhashes.Add(873639469, "sentinel2");
            carhashes.Add(1337041428, "serrano");
            carhashes.Add(3080461301, "shamal");
            carhashes.Add(2611638396, "sheriff");
            carhashes.Add(1922257928, "sheriff2");
            carhashes.Add(1044954915, "skylift");
            carhashes.Add(3484649228, "speedo");
            carhashes.Add(728614474, "speedo2");
            carhashes.Add(400514754, "squalo");
            carhashes.Add(2817386317, "stanier");
            carhashes.Add(1545842587, "stinger");
            carhashes.Add(2196019706, "stingergt");
            carhashes.Add(1747439474, "stockade");
            carhashes.Add(4080511798, "stockade3");
            carhashes.Add(1723137093, "stratum");
            carhashes.Add(2333339779, "stretch");
            carhashes.Add(2172210288, "stunt");
            carhashes.Add(771711535, "submersible");
            carhashes.Add(970598228, "sultan");
            carhashes.Add(4012021193, "suntrap");
            carhashes.Add(1123216662, "superd");
            carhashes.Add(384071873, "surano");
            carhashes.Add(699456151, "surfer");
            carhashes.Add(2983726598, "surfer2");
            carhashes.Add(2400073108, "surge");
            carhashes.Add(1951180813, "taco");
            carhashes.Add(3286105550, "tailgater");
            carhashes.Add(3564062519, "tanker");
            carhashes.Add(586013744, "tankercar");
            carhashes.Add(3338918751, "taxi");
            carhashes.Add(48339065, "tiptruck");
            carhashes.Add(3347205726, "tiptruck2");
            carhashes.Add(1981688531, "titan");
            carhashes.Add(464687292, "tornado");
            carhashes.Add(1531094468, "tornado2");
            carhashes.Add(1762279763, "tornado3");
            carhashes.Add(2261744861, "tornado4");
            carhashes.Add(1941029835, "tourbus");
            carhashes.Add(2971866336, "towtruck");
            carhashes.Add(3852654278, "towtruck2");
            carhashes.Add(2078290630, "tr2");
            carhashes.Add(1784254509, "tr3");
            carhashes.Add(2091594960, "tr4");
            carhashes.Add(1641462412, "tractor");
            carhashes.Add(2218488798, "tractor2");
            carhashes.Add(1445631933, "tractor3");
            carhashes.Add(2016027501, "trailerlogs");
            carhashes.Add(3417488910, "trailers");
            carhashes.Add(2715434129, "trailers2");
            carhashes.Add(2236089197, "trailers3");
            carhashes.Add(712162987, "trailersmall");
            carhashes.Add(1917016601, "trash");
            carhashes.Add(2942498482, "trflat");
            carhashes.Add(1127861609, "tribike");
            carhashes.Add(3061159916, "tribike2");
            carhashes.Add(3894672200, "tribike3");
            carhashes.Add(290013743, "tropic");
            carhashes.Add(2524324030, "tvtrailer");
            carhashes.Add(516990260, "utillitruck");
            carhashes.Add(887537515, "utillitruck2");
            carhashes.Add(2132890591, "utillitruck3");
            carhashes.Add(338562499, "vacca");
            carhashes.Add(4154065143, "vader");
            carhashes.Add(2621610858, "velum");
            carhashes.Add(3469130167, "vigero");
            carhashes.Add(2672523198, "voltic");
            carhashes.Add(523724515, "voodoo2");
            carhashes.Add(1777363799, "washington");
            carhashes.Add(65402552, "youga");
            carhashes.Add(3172678083, "zion");
            carhashes.Add(3101863448, "zion2");
            carhashes.Add(758895617, "ztype");
            carhashes.Add(3945366167, "bifta");
            carhashes.Add(92612664, "kalahari");
            carhashes.Add(1488164764, "paradise");
            carhashes.Add(231083307, "speeder");
            carhashes.Add(117401876, "btype");
            carhashes.Add(2997294755, "jester");
            carhashes.Add(408192225, "turismor");
            carhashes.Add(767087018, "alpha");
            carhashes.Add(1341619767, "vestra");
            carhashes.Add(4152024626, "massacro");
            carhashes.Add(2891838741, "zentorno");
            carhashes.Add(486987393, "huntley");
            carhashes.Add(1836027715, "thrust");
            carhashes.Add(841808271, "rhapsody");
            carhashes.Add(1373123368, "warrener");
            carhashes.Add(3089165662, "blade");
            carhashes.Add(75131841, "glendale");
            carhashes.Add(3863274624, "panto");
            carhashes.Add(3057713523, "dubsta3");
            carhashes.Add(1078682497, "pigalle");
            carhashes.Add(3449006043, "monster");
            carhashes.Add(743478836, "sovereign");
            carhashes.Add(1824333165, "besra");
            carhashes.Add(165154707, "miljet");
            carhashes.Add(1011753235, "coquette2");
            carhashes.Add(3955379698, "swift");
            carhashes.Add(1265391242, "hakuchou");
            carhashes.Add(2076032661, "furoregt");
            carhashes.Add(4135840458, "innovat");
            carhashes.Add(0xBE0E6126, "jester2");
            carhashes.Add(0xDA5819A3, "massacro2");
            carhashes.Add(0xDCE1D9F7, "ratloader2");
            carhashes.Add(0x2B7F9DE3, "slamvan");
            carhashes.Add(2242229361, "mule3");
            carhashes.Add(1077420264, "velum2");
            carhashes.Add(1956216962, "tanker2");
            carhashes.Add(941800958, "casco");
            carhashes.Add(444171386, "boxville4");
            carhashes.Add(970385471, "hydra");
            carhashes.Add(2434067162, "insurgent");
            carhashes.Add(2071877360, "insurgent2");
            carhashes.Add(296357396, "gburrito2");
            carhashes.Add(2198148358, "technical");
            carhashes.Add(509498602, "dinghy3");
            carhashes.Add(4212341271, "savage");
            carhashes.Add(1753414259, "enduro");
            carhashes.Add(2186977100, "guardian");
            carhashes.Add(640818791, "lectro");
            carhashes.Add(2922118804, "kuruma");
            carhashes.Add(410882957, "kuruma2");
            carhashes.Add(3039269212, "trash2");
            carhashes.Add(630371791, "barracks3");
            carhashes.Add(2694714877, "valkyrie");
            carhashes.Add(833469436, "slamvan2");
            carhashes.Add(0x4019CB4C, "swift2");
            carhashes.Add(0xB79F589E, "luxor2");
            carhashes.Add(0xA29D6D10, "feltzer3");
            carhashes.Add(0x767164D6, "osiris");
            carhashes.Add(0xE2504942, "virgo");
            carhashes.Add(0x5E4327C8, "windsor");
            carhashes.Add(0x14d69010, "chino");
            carhashes.Add(0x2ec385fe, "coquette3");
            carhashes.Add(0x6322b39a, "t20");
            carhashes.Add(0xaf599f01, "vindicator");
            carhashes.Add(0x3fd5aa2f, "toro");
            carhashes.Add(0xa7ce1bc5, "brawler");

            var list = carhashes.Values.ToList();
            list.Sort();
        }

        private void Main_Shown(Object sender, EventArgs e)
        {
            splashScreenManager2.ShowWaitForm();
            //CheckforOLDComm();
            //CheckforCommunication();
            //CheckforUpdates();
            labelControl12.Text = Environment.UserName;
            if (splashScreenManager2.IsSplashFormVisible)
            {
                splashScreenManager2.CloseWaitForm();
            }
        }
        
        private void Main_Load(object sender, EventArgs e)
        {
            for (int i = 0; i < 16; i++)
            {
                DataG1Tasks[i] = false;
                DataG1LockInVeh[i] = false;
                DataG1ForceF[i] = false;
                DataG1InfStars[i] = false;
                DataG1DropMoney[i] = false;
                DataG1WantedLevel[i] = 0;
                DataG3GodMode[i] = false;
                DataG3Invisible[i] = false;
                DataG3ohk[i] = false;
                DataG4loopshoot[i] = false;
                DataG5GodMode[i] = false;
                DataG5Invisible[i] = false;
                DataG5ohk[i] = false;
            }
            for (int i = 0; i < 20; i++)
            {
                Thread.Sleep(100);
            }
        }

        private void Main_Closed(object sender, FormClosedEventArgs e)
        {
            Application.Exit();
        }

        #region Things
        void setStatKeywordQuery(params string[] snippets)
        {
            new Thread(() =>
            {
                foreach (string snippet in snippets)
                {
                    var query = from item in Stats
                                where item.Value.keyword.ToLower().Contains(snippet.ToLower())
                                orderby item.Key ascending
                                select item;
                    foreach (KeyValuePair<string, StatData> item in query)
                    {
                        setStat(item.Key, item.Value.value);
                    }
                }
            }).Start();
        }

        public static bool boolNotify(bool x)
        {
            XtraMessageBox.Show(x ? "Enabled" : "Disabled", "Mod Info", MessageBoxButtons.OK, MessageBoxIcon.Information);
            return x;
        }

        void setStat(string stat, object value)
        {
            if (value is int || value is bool)
            {
                NewNatives address = value is int ? NewNatives.STAT_SET_INT : NewNatives.STAT_SET_BOOL;
                if (stat.Contains("MPPLY_"))
                {
                    ClassicRPC.NCall(address, Hash(stat), Convert.ToInt32(value), 1);
                }
                else
                {
                    ClassicRPC.NCall(address, Hash("MP0_" + stat), Convert.ToInt32(value), 1);
                }
            }
            else if (value is float || value is double)
            {
                if (stat.Contains("MPPLY_"))
                {
                    ClassicRPC.Call(OLDNatives.STAT_SET_FLOAT, Hash(stat), (float)value, 1);
                }
                else
                {
                    ClassicRPC.Call(OLDNatives.STAT_SET_FLOAT, Hash("MP0_" + stat), (float)value, 1);
                }
            }
            else
            {
                XtraMessageBox.Show("Unkown stat type..");
            }
        }

        string formatStat(string stat)
        {
            return stat.Contains("MPPLY_") ? stat : ("MP0_" + stat);
        }

        public static uint Hash(string input)
        {
            byte[] stingbytes = Encoding.UTF8.GetBytes(input.ToLower());
            uint num1 = 0U;
            for (int i = 0; i < stingbytes.Length; i++)
            {
                uint num2 = num1 + (uint)stingbytes[i];
                uint num3 = num2 + (num2 << 10);
                num1 = num3 ^ num3 >> 6;
            }
            uint num4 = num1 + (num1 << 3);
            uint num5 = num4 ^ num4 >> 11;
            return num5 + (num5 << 15);
        }

        public static Dictionary<string, StatData> Stats = new Dictionary<string, StatData>()
        {
            { "ADMIN_CLOTHES_GV_BS_1", new StatData(-1, "clothingDLC") },
            { "ADMIN_CLOTHES_GV_BS_10", new StatData(-1, "clothingDLC") },
            { "ADMIN_CLOTHES_GV_BS_11", new StatData(-1, "clothingDLC") },
            { "ADMIN_CLOTHES_GV_BS_12", new StatData(-1, "clothingDLC") },
            { "ADMIN_CLOTHES_GV_BS_2", new StatData(-1, "clothingDLC") },
            { "ADMIN_CLOTHES_GV_BS_3", new StatData(-1, "clothingDLC") },
            { "ADMIN_CLOTHES_GV_BS_4", new StatData(-1, "clothingDLC") },
            { "ADMIN_CLOTHES_GV_BS_5", new StatData(-1, "clothingDLC") },
            { "ADMIN_CLOTHES_GV_BS_6", new StatData(-1, "clothingDLC") },
            { "ADMIN_CLOTHES_GV_BS_7", new StatData(-1, "clothingDLC") },
            { "ADMIN_CLOTHES_GV_BS_8", new StatData(-1, "clothingDLC") },
            { "ADMIN_CLOTHES_GV_BS_9", new StatData(-1, "clothingDLC") },
            { "ADMIN_WEAPON_GV_BS_1", new StatData(-1, "weapons") },
            { "AIR_LAUNCHES_OVER_40M", new StatData(25, "awards") },
            { "AWD_5STAR_WANTED_AVOIDANCE", new StatData(50, "awards") },
            { "AWD_ACTIVATE_2_PERSON_KEY", new StatData(true, "awards") },
            { "AWD_ALL_ROLES_HEIST", new StatData(true, "awards") },
            { "AWD_BUY_EVERY_GUN", new StatData(true, "awards") },
            { "AWD_CAR_BOMBS_ENEMY_KILLS", new StatData(25, "awards") },
            { "AWD_CARS_EXPORTED", new StatData(50, "awards") },
            { "AWD_CONTROL_CROWDS", new StatData(25, "awards") },
            { "AWD_DAILYOBJCOMPLETED", new StatData(100, "awards") },
            { "AWD_DAILYOBJMONTHBONUS", new StatData(true, "awards") },
            { "AWD_DAILYOBJWEEKBONUS", new StatData(true, "awards") },
            { "AWD_DO_HEIST_AS_MEMBER", new StatData(25, "clothingExclusive") },
            { "AWD_DO_HEIST_AS_THE_LEADER", new StatData(25, "clothingExclusive") },
            { "AWD_DRIVELESTERCAR5MINS", new StatData(true, "awards") },
            { "AWD_DROPOFF_CAP_PACKAGES", new StatData(100, "chromeRims") },
            { "AWD_FINISH_HEIST_NO_DAMAGE", new StatData(true, "clothingExclusive") },
            { "AWD_FINISH_HEIST_SETUP_JOB", new StatData(50, "chromeRims") },
            { "AWD_FINISH_HEISTS", new StatData(50, "chromeRims") },
            { "AWD_FM25DIFFERENTDM", new StatData(true, "awards") },
            { "AWD_FM25DIFFERENTRACES", new StatData(true, "awards") },
            { "AWD_FM25DIFITEMSCLOTHES", new StatData(true, "awards") },
            { "AWD_FM6DARTCHKOUT", new StatData(true, "awards") },
            { "AWD_FM_DM_3KILLSAMEGUY", new StatData(50, "awards") },
            { "AWD_FM_DM_KILLSTREAK", new StatData(100, "awards") },
            { "AWD_FM_DM_STOLENKILL", new StatData(50, "awards") },
            { "AWD_FM_DM_TOTALKILLS", new StatData(500, "tattoos") },
            { "AWD_FM_DM_WINS", new StatData(50, "awards") },
            { "AWD_FM_GOLF_BIRDIES", new StatData(25, "awards") },
            { "AWD_FM_GOLF_HOLE_IN_1", new StatData(true, "awards") },
            { "AWD_FM_GOLF_WON", new StatData(25, "awards") },
            { "AWD_FM_GTA_RACES_WON", new StatData(50, "awards") },
            { "AWD_FM_RACE_LAST_FIRST", new StatData(25, "awards") },
            { "AWD_FM_RACES_FASTEST_LAP", new StatData(50, "vehicleMods") },
            { "AWD_FM_SHOOTRANG_CT_WON", new StatData(25, "awards") },
            { "AWD_FM_SHOOTRANG_GRAN_WON", new StatData(true, "awards") },
            { "AWD_FM_SHOOTRANG_RT_WON", new StatData(25, "awards") },
            { "AWD_FM_SHOOTRANG_TG_WON", new StatData(25, "awards") },
            { "AWD_FM_TDM_MVP", new StatData(50, "awards") },
            { "AWD_FM_TDM_WINS", new StatData(50, "awards") },
            { "AWD_FM_TENNIS_5_SET_WINS", new StatData(true, "awards") },
            { "AWD_FM_TENNIS_ACE", new StatData(25, "awards") },
            { "AWD_FM_TENNIS_STASETWIN", new StatData(true, "awards") },
            { "AWD_FM_TENNIS_WON", new StatData(25, "awards") },
            { "AWD_FMATTGANGHQ", new StatData(true, "awards") },
            { "AWD_FMBASEJMP", new StatData(25, "awards") },
            { "AWD_FMBBETWIN", new StatData(50000, "awards") },
            { "AWD_FMCRATEDROPS", new StatData(25, "awards") },
            { "AWD_FMDRIVEWITHOUTCRASH", new StatData(30, "awards") },
            { "AWD_FMFULLYMODDEDCAR", new StatData(true, "awards") },
            { "AWD_FMHORDWAVESSURVIVE", new StatData(10, "clothingExclusive") },
            { "AWD_FMKILL3ANDWINGTARACE", new StatData(true, "awards") },
            { "AWD_FMKILLBOUNTY", new StatData(25, "awards") },
            { "AWD_FMKILLSTREAKSDM", new StatData(true, "awards") },
            { "AWD_FMMOSTKILLSGANGHIDE", new StatData(true, "awards") },
            { "AWD_FMMOSTKILLSSURVIVE", new StatData(true, "awards") },
            { "AWD_FMPICKUPDLCCRATE1ST", new StatData(true, "awards") },
            { "AWD_FMRACEWORLDRECHOLDER", new StatData(true, "awards") },
            { "AWD_FMRALLYWONDRIVE", new StatData(25, "awards") },
            { "AWD_FMRALLYWONNAV", new StatData(25, "awards") },
            { "AWD_FMREVENGEKILLSDM", new StatData(50, "tattoos") },
            { "AWD_FMSHOOTDOWNCOPHELI", new StatData(25, "awards") },
            { "AWD_FMTATTOOALLBODYPARTS", new StatData(true, "awards") },
            { "AWD_FMWINAIRRACE", new StatData(25, "awards") },
            { "AWD_FMWINALLRACEMODES", new StatData(true, "awards") },
            { "AWD_FMWINCUSTOMRACE", new StatData(true, "awards") },
            { "AWD_FMWINEVERYGAMEMODE", new StatData(true, "awards") },
            { "AWD_FMWINRACETOPOINTS", new StatData(25, "awards") },
            { "AWD_FMWINSEARACE", new StatData(25, "awards") },
            { "AWD_HOLD_UP_SHOPS", new StatData(20, "awards") },
            { "AWD_KILL_CARRIER_CAPTURE", new StatData(100, "chromeRims") },
            { "AWD_KILL_PSYCHOPATHS", new StatData(100, "clothingExclusive") },
            { "AWD_KILL_TEAM_YOURSELF_LTS", new StatData(25, "clothingExclusive") },
            { "AWD_LAPDANCES", new StatData(25, "awards") },
            { "AWD_LESTERDELIVERVEHICLES", new StatData(25, "awards") },
            { "AWD_MENTALSTATE_TO_NORMAL", new StatData(50, "awards") },
            { "AWD_NIGHTVISION_KILLS", new StatData(100, "chromeRims") },
            { "AWD_NO_HAIRCUTS", new StatData(25, "awards") },
            { "AWD_ODISTRACTCOPSNOEATH", new StatData(25, "awards") },
            { "AWD_ONLY_PLAYER_ALIVE_LTS", new StatData(50, "chromeRims") },
            { "AWD_PARACHUTE_JUMPS_20M", new StatData(25, "awards") },
            { "AWD_PARACHUTE_JUMPS_50M", new StatData(25, "awards") },
            { "AWD_PASSENGERTIME", new StatData(4, "awards") },
            { "AWD_PICKUP_CAP_PACKAGES", new StatData(100, "clothingExclusive") },
            { "AWD_RACES_WON", new StatData(50, "awards") },
            { "AWD_SECURITY_CARS_ROBBED", new StatData(25, "awards") },
            { "AWD_SPLIT_HEIST_TAKE_EVENLY", new StatData(true, "awards") },
            { "AWD_STORE_20_CAR_IN_GARAGES", new StatData(true, "clothingExclusive") },
            { "AWD_TAKEDOWNSMUGPLANE", new StatData(50, "awards") },
            { "AWD_TIME_IN_HELICOPTER", new StatData(4, "awards") },
            { "AWD_TRADE_IN_YOUR_PROPERTY", new StatData(25, "awards") },
            { "AWD_VEHICLES_JACKEDR", new StatData(500, "awards") },
            { "AWD_WIN_AT_DARTS", new StatData(25, "awards") },
            { "AWD_WIN_CAPTURE_DONT_DYING", new StatData(25, "clothingExclusive") },
            { "AWD_WIN_CAPTURES", new StatData(50, "chromeRims") },
            { "AWD_WIN_GOLD_MEDAL_HEISTS", new StatData(25, "clothingExclusive") },
            { "AWD_WIN_LAST_TEAM_STANDINGS", new StatData(50, "chromeRims") },
            { "BOTTLE_IN_POSSESSION", new StatData(-1, "weapons") },
            { "CARS_EXPLODED", new StatData(500, "awards") },
            { "CHAR_FM_CARMOD_1_UNLCK", new StatData(-1, "vehicleMods") },
            { "CHAR_FM_CARMOD_2_UNLCK", new StatData(-1, "vehicleMods") },
            { "CHAR_FM_CARMOD_3_UNLCK", new StatData(-1, "vehicleMods") },
            { "CHAR_FM_CARMOD_4_UNLCK", new StatData(-1, "vehicleMods") },
            { "CHAR_FM_CARMOD_5_UNLCK", new StatData(-1, "vehicleMods") },
            { "CHAR_FM_CARMOD_6_UNLCK", new StatData(-1, "vehicleMods") },
            { "CHAR_FM_CARMOD_7_UNLCK", new StatData(-1, "vehicleMods") },
            { "CHAR_FM_VEHICLE_1_UNLCK", new StatData(-1, "heistVehicles") },
            { "CHAR_FM_VEHICLE_2_UNLCK", new StatData(-1, "heistVehicles") },
            { "CHAR_FM_WEAP_ADDON_1_UNLCK", new StatData(-1, "weapons") },
            { "CHAR_FM_WEAP_ADDON_2_UNLCK", new StatData(-1, "weapons") },
            { "CHAR_FM_WEAP_ADDON_3_UNLCK", new StatData(-1, "weapons") },
            { "CHAR_FM_WEAP_ADDON_4_UNLCK", new StatData(-1, "weapons") },
            { "CHAR_FM_WEAP_ADDON_5_UNLCK", new StatData(-1, "weapons") },
            { "CHAR_FM_WEAP_UNLOCKED", new StatData(-1, "weapons") },
            { "CHAR_FM_WEAP_UNLOCKED2", new StatData(-1, "weapons") },
            { "CHAR_KIT_10_FM_UNLCK", new StatData(-1, "kits") },
            { "CHAR_KIT_11_FM_UNLCK", new StatData(-1, "kits") },
            { "CHAR_KIT_12_FM_UNLCK", new StatData(-1, "kits") },
            { "CHAR_KIT_1_FM_UNLCK", new StatData(-1, "kits") },
            { "CHAR_KIT_2_FM_UNLCK", new StatData(-1, "kits") },
            { "CHAR_KIT_3_FM_UNLCK", new StatData(-1, "kits") },
            { "CHAR_KIT_4_FM_UNLCK", new StatData(-1, "kits") },
            { "CHAR_KIT_5_FM_UNLCK", new StatData(-1, "kits") },
            { "CHAR_KIT_6_FM_UNLCK", new StatData(-1, "kits") },
            { "CHAR_KIT_7_FM_UNLCK", new StatData(-1, "kits") },
            { "CHAR_KIT_8_FM_UNLCK", new StatData(-1, "kits") },
            { "CHAR_KIT_9_FM_UNLCK", new StatData(-1, "kits") },
            { "CHAR_KIT_FM_PURCHASE", new StatData(-1, "kits") },
            { "CHAR_KIT_FM_PURCHASE10", new StatData(-1, "kits") },
            { "CHAR_KIT_FM_PURCHASE11", new StatData(-1, "kits") },
            { "CHAR_KIT_FM_PURCHASE12", new StatData(-1, "kits") },
            { "CHAR_KIT_FM_PURCHASE2", new StatData(-1, "kits") },
            { "CHAR_KIT_FM_PURCHASE3", new StatData(-1, "kits") },
            { "CHAR_KIT_FM_PURCHASE4", new StatData(-1, "kits") },
            { "CHAR_KIT_FM_PURCHASE5", new StatData(-1, "kits") },
            { "CHAR_KIT_FM_PURCHASE6", new StatData(-1, "kits") },
            { "CHAR_KIT_FM_PURCHASE7", new StatData(-1, "kits") },
            { "CHAR_KIT_FM_PURCHASE8", new StatData(-1, "kits") },
            { "CHAR_KIT_FM_PURCHASE9", new StatData(-1, "kits") },
            { "CHAR_WANTED_LEVEL_TIME5STAR", new StatData(-1, "awards") },
            { "CHAR_WEAP_FM_PURCHASE", new StatData(-1, "weapons") },
            { "CHAR_WEAP_FM_PURCHASE2", new StatData(-1, "weapons") },
            { "CLTHS_ACQUIRED_BERD", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_BERD_1", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_BERD_2", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_BERD_3", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_BERD_4", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_BERD_5", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_BERD_6", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_BERD_7", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_DECL", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_FEET", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_FEET_1", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_FEET_2", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_FEET_3", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_FEET_4", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_FEET_5", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_FEET_6", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_FEET_7", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_JBIB", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_JBIB_1", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_JBIB_2", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_JBIB_3", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_JBIB_4", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_JBIB_5", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_JBIB_6", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_JBIB_7", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_LEGS", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_LEGS_1", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_LEGS_2", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_LEGS_3", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_LEGS_4", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_LEGS_5", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_LEGS_6", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_LEGS_7", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_OUTFIT", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_PROPS", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_PROPS_1", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_PROPS_10", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_PROPS_2", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_PROPS_3", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_PROPS_4", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_PROPS_5", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_PROPS_6", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_PROPS_7", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_PROPS_8", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_PROPS_9", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_SPECIAL", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_SPECIAL2", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_SPECIAL2_1", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_SPECIAL_1", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_SPECIAL_2", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_SPECIAL_3", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_SPECIAL_4", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_SPECIAL_5", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_SPECIAL_6", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_SPECIAL_7", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_TEETH", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_TEETH_1", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_TEETH_2", new StatData(-1, "clothing") },
            { "CLTHS_ACQUIRED_TORSO", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_BERD", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_BERD_1", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_BERD_2", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_BERD_3", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_BERD_4", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_BERD_5", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_BERD_6", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_BERD_7", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_DECL", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_FEET", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_FEET_1", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_FEET_2", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_FEET_3", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_FEET_4", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_FEET_5", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_FEET_6", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_FEET_7", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_HAIR", new StatData(-1, "clothingHair") },
            { "CLTHS_AVAILABLE_HAIR_1", new StatData(-1, "clothingHair") },
            { "CLTHS_AVAILABLE_HAIR_2", new StatData(-1, "clothingHair") },
            { "CLTHS_AVAILABLE_HAIR_3", new StatData(-1, "clothingHair") },
            { "CLTHS_AVAILABLE_HAIR_4", new StatData(-1, "clothingHair") },
            { "CLTHS_AVAILABLE_HAIR_5", new StatData(-1, "clothingHair") },
            { "CLTHS_AVAILABLE_HAIR_6", new StatData(-1, "clothingHair") },
            { "CLTHS_AVAILABLE_HAIR_7", new StatData(-1, "clothingHair") },
            { "CLTHS_AVAILABLE_JBIB", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_JBIB_1", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_JBIB_2", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_JBIB_3", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_JBIB_4", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_JBIB_5", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_JBIB_6", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_JBIB_7", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_LEGS", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_LEGS_1", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_LEGS_2", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_LEGS_3", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_LEGS_4", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_LEGS_5", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_LEGS_6", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_LEGS_7", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_OUTFIT", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_PROPS", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_PROPS_1", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_PROPS_10", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_PROPS_2", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_PROPS_3", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_PROPS_4", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_PROPS_5", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_PROPS_6", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_PROPS_7", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_PROPS_8", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_PROPS_9", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_SPECIAL", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_SPECIAL2", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_SPECIAL2_1", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_SPECIAL_1", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_SPECIAL_2", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_SPECIAL_3", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_SPECIAL_4", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_SPECIAL_5", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_SPECIAL_6", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_SPECIAL_7", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_TEETH", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_TEETH_1", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_TEETH_2", new StatData(-1, "clothing") },
            { "CLTHS_AVAILABLE_TORSO", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_0", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_1", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_10", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_11", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_12", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_13", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_14", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_15", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_16", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_17", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_18", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_19", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_2", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_20", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_21", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_22", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_23", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_24", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_25", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_26", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_27", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_28", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_29", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_3", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_30", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_31", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_32", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_33", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_34", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_35", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_36", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_37", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_38", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_39", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_4", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_40", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_5", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_6", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_7", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_8", new StatData(-1, "clothing") },
            { "DLC_APPAREL_ACQUIRED_9", new StatData(-1, "clothing") },
            { "FM_CHANGECHAR_ASKED", new StatData(false, "redesign") },
            { "GRENADE_ENEMY_KILLS", new StatData(50, "awards") },
            { "KILLS_PLAYERS", new StatData(1000, "awards") },
            { "LONGEST_WHEELIE_DIST", new StatData(1000f, "awards") },
            { "MOST_ARM_WRESTLING_WINS", new StatData(25, "awards") },
            { "MOST_FLIPS_IN_ONE_JUMP", new StatData(5, "awards") },
            { "MOST_SPINS_IN_ONE_JUMP", new StatData(5, "awards") },
            { "MPPLY_AWD_COMPLET_HEIST_MEM", new StatData(true, "awards") },
            { "MPPLY_AWD_FLEECA_FIN", new StatData(true, "awards") },
            { "MPPLY_AWD_FM_CR_DM_MADE", new StatData(25, "awards") },
            { "MPPLY_AWD_FM_CR_PLAYED_BY_PEEP", new StatData(100, "awards") },
            { "MPPLY_AWD_FM_CR_RACES_MADE", new StatData(25, "awards") },
            { "MPPLY_AWD_HST_ORDER", new StatData(true, "awards") },
            { "MPPLY_AWD_HST_SAME_TEAM", new StatData(true, "awards") },
            { "MPPLY_AWD_HST_ULT_CHAL", new StatData(true, "awards") },
            { "MPPLY_AWD_HUMANE_FIN", new StatData(true, "awards") },
            { "MPPLY_AWD_PACIFIC_FIN", new StatData(true, "awards") },
            { "MPPLY_AWD_PRISON_FIN", new StatData(true, "awards") },
            { "MPPLY_AWD_SERIESA_FIN", new StatData(true, "awards") },
            { "MPPLY_NO_MORE_TUTORIALS", new StatData(true, "tutorial") },
            { "NUMBER_SLIPSTREAMS_IN_RACE", new StatData(100, "vehicleMods") },
            { "NUMBER_TURBO_STARTS_IN_RACE", new StatData(50, "vehicleMods") },
            { "PASS_DB_PLAYER_KILLS", new StatData(100, "awards") },
            { "PISTOL_ENEMY_KILLS", new StatData(500, "tattoos") },
            { "PLAYER_HEADSHOTS", new StatData(500, "tattoos") },
            { "RACES_WON", new StatData(50, "vehicleMods") },
            { "SAWNOFF_ENEMY_KILLS", new StatData(500, "awards") },
            { "SCRIPT_INCREASE_DRIV", new StatData(100, "skills") },
            { "SCRIPT_INCREASE_FLY", new StatData(100, "skills") },
            { "SCRIPT_INCREASE_LUNG", new StatData(100, "skills") },
            { "SCRIPT_INCREASE_MECH", new StatData(100, "skills") },
            { "SCRIPT_INCREASE_SHO", new StatData(100, "skills") },
            { "SCRIPT_INCREASE_STAM", new StatData(100, "skills") },
            { "SCRIPT_INCREASE_STL", new StatData(100, "skills") },
            { "SCRIPT_INCREASE_STRN", new StatData(100, "skills") },
            { "STKYBMB_ENEMY_KILLS", new StatData(50, "awards") },
            { "UNARMED_ENEMY_KILLS", new StatData(50, "awards") },
            { "USJS_COMPLETED", new StatData(50, "vehicleMods") },
            { "WEAP_FM_ADDON_PURCH", new StatData(-1, "weapons") },
            { "WEAP_FM_ADDON_PURCH2", new StatData(-1, "weapons") },
            { "WEAP_FM_ADDON_PURCH3", new StatData(-1, "weapons") },
            { "WEAP_FM_ADDON_PURCH4", new StatData(-1, "weapons") },
            { "WEAP_FM_ADDON_PURCH5", new StatData(-1, "weapons") },
            { "FM_ACT_PHN", new StatData(-1, "contacts") },
            { "FM_ACT_PH2", new StatData(-1, "contacts") },
            { "FM_ACT_PH3", new StatData(-1, "contacts") },
            { "FM_ACT_PH4", new StatData(-1, "contacts") },
            { "FM_ACT_PH5", new StatData(-1, "contacts") },
            { "FM_ACT_TX1", new StatData(-1, "contacts") },
            { "FLAREGUN_FM_AMMO_CURRENT", new StatData(-1, "infiniteAmmo") },
            { "GRNLAUNCH_FM_AMMO_CURRENT", new StatData(-1, "infiniteAmmo") },
            { "RPG_FM_AMMO_CURRENT", new StatData(-1, "infiniteAmmo") },
            { "MINIGUNS_FM_AMMO_CURRENT", new StatData(-1, "infiniteAmmo") },
            { "GRENADE_FM_AMMO_CURRENT", new StatData(-1, "infiniteAmmo") },
            { "SMKGRENADE_FM_AMMO_CURRENT", new StatData(-1, "infiniteAmmo") },
            { "STKYBMB_FM_AMMO_CURRENT", new StatData(-1, "infiniteAmmo") },
            { "MOLOTOV_FM_AMMO_CURRENT", new StatData(-1, "infiniteAmmo") },
            { "PETROLCAN_FM_AMMO_CURRENT", new StatData(-1, "infiniteAmmo") },
            { "PRXMINE_FM_AMMO_CURRENT", new StatData(-1, "infiniteAmmo") },
            { "HOMLNCH_FM_AMMO_CURRENT", new StatData(-1, "infiniteAmmo") },
            { "MPPLY_HEIST_ACH_TRACKER", new StatData(-1, "heistTrophies") },

        };

        public static int NETWORK_REQUEST_CONTROL_OF_ENTITY(int netid)
        {
            return RPC3.Call(OLDNatives.NETWORK_REQUEST_CONTROL_OF_ENTITY, (object)netid);
        }

        public static int NETWORK_HAS_CONTROL_OF_ENTITY(int netid)
        {
            return RPC3.Call(OLDNatives.NETWORK_HAS_CONTROL_OF_ENTITY, (object)netid);
        }

        public static bool NEW_NETWORK_HAS_CONTROL_OF_ENTITY(int Entity)
        {
            if (ClassicRPC.NCall(NewNatives.NETWORK_HAS_CONTROL_OF_ENTITY, (object)Entity) != 0)
                return true;
            else return false;
        }

        public static bool NETWORK_CONTROL(int id)
        {
            uint num = 0;
            NETWORK_REQUEST_CONTROL_OF_ENTITY(id);
            do
            {
                ++num;
                NETWORK_REQUEST_CONTROL_OF_ENTITY(id);
                if (NETWORK_HAS_CONTROL_OF_ENTITY(id) != 0)
                    goto label_3;
            }
            while (num < 50U);
            goto label_4;
            label_3:
            return true;
            label_4:
            return false;
        }

        public class StatData
        {
            public object value { get; set; }
            public string keyword { get; set; }
            public StatData(object _value, string _keyword)
            {
                value = _value;
                keyword = _keyword;
            }
        }
        #endregion

        #region ID Spoof
        public static class GeneratorP
        {
            private static Random randP = new Random();

            public static char Part1()
            {
                char[] chArray = "7B1CA08".ToCharArray();
                int index = randP.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part10()
            {
                char[] chArray = "19CD153A67".ToCharArray();
                int index = randP.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part11()
            {
                char[] chArray = "1A3EDB98".ToCharArray();
                int index = randP.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part12()
            {
                char[] chArray = "480A2FB".ToCharArray();
                int index = randP.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part13()
            {
                char[] chArray = "9F75A8BE64D".ToCharArray();
                int index = randP.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part14()
            {
                char[] chArray = "897C1AFE".ToCharArray();
                int index = randP.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part15()
            {
                char[] chArray = "A7FB49683C".ToCharArray();
                int index = randP.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part16()
            {
                char[] chArray = "85362ACBFED".ToCharArray();
                int index = randP.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part17()
            {
                char[] chArray = "B9014AC7T".ToCharArray();
                int index = randP.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part18()
            {
                char[] chArray = "0CB438AD".ToCharArray();
                int index = randP.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part19()
            {
                char[] chArray = "B019CA".ToCharArray();
                int index = randP.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part20()
            {
                char[] chArray = "A12630BDE".ToCharArray();
                int index = randP.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part21()
            {
                char[] chArray = "FC5E470".ToCharArray();
                int index = randP.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part2()
            {
                char[] chArray = "109D".ToCharArray();
                int index = randP.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part3()
            {
                char[] chArray = "217BC".ToCharArray();
                int index = randP.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part3a()
            {
                char[] chArray = "58C".ToCharArray();
                int index = randP.Next(chArray.Length);
                return chArray[index];
            }

            public static string Part3b()
            {
                return "000";
            }

            public static char Part3c()
            {
                char[] chArray = "5BA0".ToCharArray();
                int index = randP.Next(chArray.Length);
                return chArray[index];
            }

            public static string Part3d()
            {
                return "140";
            }

            public static char Part3e()
            {
                char[] chArray = "698A1".ToCharArray();
                int index = randP.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part3f()
            {
                char[] chArray = "1092ED".ToCharArray();
                int index = randP.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part3g()
            {
                char[] chArray = "CN8379R".ToCharArray();
                int index = randP.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part4()
            {
                char[] chArray = "24D60318537".ToCharArray();
                int index = randP.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part5()
            {
                char[] chArray = "B863DE257C1".ToCharArray();
                int index = randP.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part6()
            {
                char[] chArray = "3EA7FB8596C".ToCharArray();
                int index = randP.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part7()
            {
                char[] chArray = "D304A5C82E".ToCharArray();
                int index = randP.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part8()
            {
                char[] chArray = "3B21CE7F".ToCharArray();
                int index = randP.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part9()
            {
                char[] chArray = "86C4f90B12".ToCharArray();
                int index = randP.Next(chArray.Length);
                return chArray[index];
            }
        }

        public static class Generator
        {
            private static Random rand = new Random();

            public static string Part1()
            {
                return "0000000";
            }

            public static char Part10()
            {
                char[] chArray = "19CD153A67".ToCharArray();
                int index = rand.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part11()
            {
                char[] chArray = "1A3EDB98".ToCharArray();
                int index = rand.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part12()
            {
                char[] chArray = "480A2FB".ToCharArray();
                int index = rand.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part13()
            {
                char[] chArray = "9F75A8BE64D".ToCharArray();
                int index = rand.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part14()
            {
                char[] chArray = "897C1AFE".ToCharArray();
                int index = rand.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part15()
            {
                char[] chArray = "A7FB49683C".ToCharArray();
                int index = rand.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part16()
            {
                char[] chArray = "85362ACBFED".ToCharArray();
                int index = rand.Next(chArray.Length);
                return chArray[index];
            }

            public static string Part2()
            {
                return "100";
            }

            public static char Part3()
            {
                return '8';
            }

            public static char Part3a()
            {
                char[] chArray = "58C3A".ToCharArray();
                int index = rand.Next(chArray.Length);
                return chArray[index];
            }

            public static string Part3b()
            {
                return "000";
            }

            public static char Part3c()
            {
                char[] chArray = "5B".ToCharArray();
                int index = rand.Next(chArray.Length);
                return chArray[index];
            }

            public static string Part3d()
            {
                return "140";
            }

            public static char Part4()
            {
                char[] chArray = "24D60318537".ToCharArray();
                int index = rand.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part5()
            {
                char[] chArray = "B863DE257C1".ToCharArray();
                int index = rand.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part6()
            {
                char[] chArray = "3EA7FB8596C".ToCharArray();
                int index = rand.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part7()
            {
                char[] chArray = "D304A5C82E".ToCharArray();
                int index = rand.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part8()
            {
                char[] chArray = "3B21CE7F".ToCharArray();
                int index = rand.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part9()
            {
                char[] chArray = "86C4F90B12".ToCharArray();
                int index = rand.Next(chArray.Length);
                return chArray[index];
            }
        }

        public static class GeneratorS
        {
            private static Random rands = new Random();

            public static string Part1()
            {
                return "00000001008";
            }

            public static char Part2()
            {
                char[] chArray = "58C3A".ToCharArray();
                int index = GeneratorS.rands.Next(chArray.Length);
                return chArray[index];
            }

            public static string Part3()
            {
                return "000";
            }

            public static char Part4()
            {
                char[] chArray = "5B".ToCharArray();
                int index = GeneratorS.rands.Next(chArray.Length);
                return chArray[index];
            }

            public static string Part5()
            {
                return "140";
            }

            public static char Part6()
            {
                char[] chArray = "24D60318537".ToCharArray();
                int index = GeneratorS.rands.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part7()
            {
                char[] chArray = "B863DE257C1".ToCharArray();
                int index = GeneratorS.rands.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part8()
            {
                char[] chArray = "3EA7FB596C".ToCharArray();
                int index = GeneratorS.rands.Next(chArray.Length);
                return chArray[index];
            }

            public static char Part9()
            {
                char[] chArray = "D304A5C82E".ToCharArray();
                int index = GeneratorS.rands.Next(chArray.Length);
                return chArray[index];
            }

            public static char Par1()
            {
                char[] chArray = "3B21CE7F".ToCharArray();
                int index = GeneratorS.rands.Next(chArray.Length);
                return chArray[index];
            }

            public static char Par2()
            {
                char[] chArray = "86C4F90B12".ToCharArray();
                int index = GeneratorS.rands.Next(chArray.Length);
                return chArray[index];
            }

            public static char Par3()
            {
                char[] chArray = "29CD153A67".ToCharArray();
                int index = GeneratorS.rands.Next(chArray.Length);
                return chArray[index];
            }

            public static char Par4()
            {
                char[] chArray = "1A3EDB98".ToCharArray();
                int index = GeneratorS.rands.Next(chArray.Length);
                return chArray[index];
            }

            public static char Par5()
            {
                char[] chArray = "480A2FB".ToCharArray();
                int index = GeneratorS.rands.Next(chArray.Length);
                return chArray[index];
            }

            public static char Par6()
            {
                char[] chArray = "9F75A8BE64D".ToCharArray();
                int index = GeneratorS.rands.Next(chArray.Length);
                return chArray[index];
            }

            public static char Par7()
            {
                char[] chArray = "897C1AFE".ToCharArray();
                int index = GeneratorS.rands.Next(chArray.Length);
                return chArray[index];
            }

            public static char Par8()
            {
                char[] chArray = "A7FB49683C".ToCharArray();
                int index = GeneratorS.rands.Next(chArray.Length);
                return chArray[index];
            }

            public static char Par9()
            {
                char[] chArray = "853662ACBFED".ToCharArray();
                int index = GeneratorS.rands.Next(chArray.Length);
                return chArray[index];
            }
        }
        #endregion

        #region Garage Editor
        class Garage
        {
            public static uint pointer = 0x1E70390;
            public static uint Armor = 115,
            Body = 211,
            Brakes = 99,
            Bulletproof = 195,
            Bulletproof2 = 210,
            Bumper_Front = 55,
            Bumper_Rear = 59,
            Chassis = 71,
            CustomTire_Front = 155,
            CustomTire_Rear = 159,
            Engine = 95,
            Exhaust = 67,
            Grille = 75,
            Hood = 79,
            Horn = 107,
            Insurance = 287,
            Model = 176,
            Padding = 400,
            Paint_Pearl = 39,
            Paint_Primary = 31,
            Paint_Secondary = 35,
            Plate_Type = 11,
            Plate_Text = 12,
            Repair = 285,
            Rims_Color = 43,
            Rims_Front = 143,
            Rims_Rear = 147,
            Rims_Type = 191,
            Roof = 91,
            Skirts = 63,
            Smoke_B = 171,
            Smoke_Enabled = 131,
            Smoke_G = 167,
            Smoke_R = 163,
            Spolier = 51,
            Suspension = 111,
            Transmission = 103,
            Turbo = 123,
            Window = 175,
            Xenon = 139,
            RGB_Cache_R = 49 * 4,
            RGB_Cache_G = 50 * 4,
            RGB_Cache_B = 51 * 4,
            RGB = 52 * 4,
            RGB_Primary = 0x2000,
            RGB_Secondary = 0x1000;

            public static uint offset()
            {
                return PS3.Extension.ReadUInt32(pointer);
            }
            public static uint getUint(int slot, uint mod)
            {
                return PS3.Extension.ReadUInt32(Convert.ToUInt32(offset() + (slot * Padding) + mod));
            }
            public static void setUint(int slot, uint mod, uint value)
            {
                PS3.Extension.WriteUInt32(Convert.ToUInt32(offset() + (slot * Padding) + mod), value);
            }
            public static int getInt(int slot, uint mod)
            {
                return PS3.Extension.ReadInt32(Convert.ToUInt32(offset() + (slot * Padding) + mod));
            }
            public static void setByte(int slot, uint mod, byte value)
            {
                PS3.Extension.WriteByte(Convert.ToUInt32(offset() + (slot * Padding) + mod), value);
            }
            public static byte getByte(int slot, uint mod)
            {
                return PS3.Extension.ReadByte(Convert.ToUInt32(offset() + (slot * Padding) + mod));
            }
            public static void setInt(int slot, uint mod, int value)
            {
                PS3.Extension.WriteInt32(Convert.ToUInt32(offset() + (slot * Padding) + mod), value);
            }
            public static void setString(int slot, uint mod, string value)
            {
                PS3.Extension.WriteString(Convert.ToUInt32(offset() + (slot * Padding) + mod), value);
            }
            public static string getString(int slot, uint mod)
            {
                return PS3.Extension.ReadString(Convert.ToUInt32(offset() + (slot * Padding) + mod));
            }
            public static void resetSlot(int slot)
            {
                uint model = Garage.getUint(slot, Garage.Model);
                Garage.setUint(slot, Garage.Model, 0);
                Thread.Sleep(250);
                Garage.setUint(slot, Garage.Model, model);
            }
        }

        private void FillWheels(int category)
        {
            comboBoxEdit25.Properties.Items.Clear();
            switch (category)
            {
                case 0:
                    comboBoxEdit25.Properties.Items.Add("Default");
                    comboBoxEdit25.Properties.Items.Add("Inferno");
                    comboBoxEdit25.Properties.Items.Add("Deep Fice");
                    comboBoxEdit25.Properties.Items.Add("Lozspeed Mk V");
                    comboBoxEdit25.Properties.Items.Add("Diamond Cut");
                    comboBoxEdit25.Properties.Items.Add("Chrono");
                    comboBoxEdit25.Properties.Items.Add("Feroci RR");
                    comboBoxEdit25.Properties.Items.Add("FiftyNine");
                    comboBoxEdit25.Properties.Items.Add("Mercie");
                    comboBoxEdit25.Properties.Items.Add("SYnthetic Z");
                    comboBoxEdit25.Properties.Items.Add("Organic Type");
                    comboBoxEdit25.Properties.Items.Add("Endo v.1");
                    comboBoxEdit25.Properties.Items.Add("GT One");
                    comboBoxEdit25.Properties.Items.Add("Duper 7");
                    comboBoxEdit25.Properties.Items.Add("Uzer");
                    comboBoxEdit25.Properties.Items.Add("GroundRide");
                    comboBoxEdit25.Properties.Items.Add("S Racer");
                    comboBoxEdit25.Properties.Items.Add("Venum");
                    comboBoxEdit25.Properties.Items.Add("Cosmo");
                    comboBoxEdit25.Properties.Items.Add("Dash VIP");
                    comboBoxEdit25.Properties.Items.Add("Ice Kid");
                    comboBoxEdit25.Properties.Items.Add("Ruff Weld");
                    comboBoxEdit25.Properties.Items.Add("Wangan Master");
                    comboBoxEdit25.Properties.Items.Add("Super Five");
                    comboBoxEdit25.Properties.Items.Add("Endo v.2");
                    comboBoxEdit25.Properties.Items.Add("Split Six");
                    break;
                case 1:
                    comboBoxEdit25.Properties.Items.Add("Default");
                    comboBoxEdit25.Properties.Items.Add("Classic Five");
                    comboBoxEdit25.Properties.Items.Add("Dukes");
                    comboBoxEdit25.Properties.Items.Add("Muscle Freak");
                    comboBoxEdit25.Properties.Items.Add("Kracka");
                    comboBoxEdit25.Properties.Items.Add("Azreal");
                    comboBoxEdit25.Properties.Items.Add("Mecha");
                    comboBoxEdit25.Properties.Items.Add("Black Top");
                    comboBoxEdit25.Properties.Items.Add("Drag SPL");
                    comboBoxEdit25.Properties.Items.Add("Revolver");
                    comboBoxEdit25.Properties.Items.Add("Classic Rod");
                    comboBoxEdit25.Properties.Items.Add("Fairlie");
                    comboBoxEdit25.Properties.Items.Add("Spooner");
                    comboBoxEdit25.Properties.Items.Add("Five Star");
                    comboBoxEdit25.Properties.Items.Add("Old School");
                    comboBoxEdit25.Properties.Items.Add("El Jefe");
                    comboBoxEdit25.Properties.Items.Add("Dodman");
                    comboBoxEdit25.Properties.Items.Add("Six Gun");
                    comboBoxEdit25.Properties.Items.Add("Mercenary");
                    break;
                case 2:
                    comboBoxEdit25.Properties.Items.Add("Default");
                    comboBoxEdit25.Properties.Items.Add("Flare");
                    comboBoxEdit25.Properties.Items.Add("Wired");
                    comboBoxEdit25.Properties.Items.Add("Triple Golds");
                    comboBoxEdit25.Properties.Items.Add("Big Worm");
                    comboBoxEdit25.Properties.Items.Add("Seven Fives");
                    comboBoxEdit25.Properties.Items.Add("Split Six");
                    comboBoxEdit25.Properties.Items.Add("Frech Mesh");
                    comboBoxEdit25.Properties.Items.Add("Lead Sled");
                    comboBoxEdit25.Properties.Items.Add("Turbine");
                    comboBoxEdit25.Properties.Items.Add("Super Fin");
                    comboBoxEdit25.Properties.Items.Add("Classic Rod");
                    comboBoxEdit25.Properties.Items.Add("Dollar");
                    comboBoxEdit25.Properties.Items.Add("Dukes");
                    comboBoxEdit25.Properties.Items.Add("Low Five");
                    comboBoxEdit25.Properties.Items.Add("Gooch");
                    break;
                case 3:
                    comboBoxEdit25.Properties.Items.Add("Default");
                    comboBoxEdit25.Properties.Items.Add("VIP");
                    comboBoxEdit25.Properties.Items.Add("Benefactor");
                    comboBoxEdit25.Properties.Items.Add("Cosmo");
                    comboBoxEdit25.Properties.Items.Add("Bippu");
                    comboBoxEdit25.Properties.Items.Add("Royal Six");
                    comboBoxEdit25.Properties.Items.Add("Fagorme");
                    comboBoxEdit25.Properties.Items.Add("Deluxe");
                    comboBoxEdit25.Properties.Items.Add("Iced Out");
                    comboBoxEdit25.Properties.Items.Add("Cignoscenti");
                    comboBoxEdit25.Properties.Items.Add("LowSpeed Ten");
                    comboBoxEdit25.Properties.Items.Add("SuperNova");
                    comboBoxEdit25.Properties.Items.Add("Obey RS");
                    comboBoxEdit25.Properties.Items.Add("LozSpeed Baller");
                    comboBoxEdit25.Properties.Items.Add("Extravaganzo");
                    comboBoxEdit25.Properties.Items.Add("Split Six");
                    comboBoxEdit25.Properties.Items.Add("Empowered");
                    comboBoxEdit25.Properties.Items.Add("Sunrise");
                    comboBoxEdit25.Properties.Items.Add("Dash VIP");
                    comboBoxEdit25.Properties.Items.Add("Cutter");
                    break;
                case 4:
                    comboBoxEdit25.Properties.Items.Add("Raider");
                    comboBoxEdit25.Properties.Items.Add("Mugslinger");
                    comboBoxEdit25.Properties.Items.Add("Nevis");
                    comboBoxEdit25.Properties.Items.Add("Cairngorm");
                    comboBoxEdit25.Properties.Items.Add("Amazon");
                    comboBoxEdit25.Properties.Items.Add("Challenger");
                    comboBoxEdit25.Properties.Items.Add("Dune Basher");
                    comboBoxEdit25.Properties.Items.Add("Five Star");
                    comboBoxEdit25.Properties.Items.Add("Rock Crawler");
                    comboBoxEdit25.Properties.Items.Add("Mil Spec Steelie");
                    break;
                case 5:
                    comboBoxEdit25.Properties.Items.Add("Default");
                    comboBoxEdit25.Properties.Items.Add("Cosmo");
                    comboBoxEdit25.Properties.Items.Add("Super Mesh");
                    comboBoxEdit25.Properties.Items.Add("Outsider");
                    comboBoxEdit25.Properties.Items.Add("Rollas");
                    comboBoxEdit25.Properties.Items.Add("Driftmeister");
                    comboBoxEdit25.Properties.Items.Add("Slicer");
                    comboBoxEdit25.Properties.Items.Add("El Quatro");
                    comboBoxEdit25.Properties.Items.Add("Dubbed");
                    comboBoxEdit25.Properties.Items.Add("Five Star");
                    comboBoxEdit25.Properties.Items.Add("Slideways");
                    comboBoxEdit25.Properties.Items.Add("Apex");
                    comboBoxEdit25.Properties.Items.Add("Stanced EG");
                    comboBoxEdit25.Properties.Items.Add("Countersteer");
                    comboBoxEdit25.Properties.Items.Add("Endo v.1 ");
                    comboBoxEdit25.Properties.Items.Add("Endo v.2 Dish");
                    comboBoxEdit25.Properties.Items.Add("Gruppe Z");
                    comboBoxEdit25.Properties.Items.Add("Choku-Dori");
                    comboBoxEdit25.Properties.Items.Add("Chicane");
                    comboBoxEdit25.Properties.Items.Add("Saisoku");
                    comboBoxEdit25.Properties.Items.Add("Dushed Eight");
                    comboBoxEdit25.Properties.Items.Add("Fujiwara");
                    comboBoxEdit25.Properties.Items.Add("Zokusha");
                    comboBoxEdit25.Properties.Items.Add("Battle VIII");
                    comboBoxEdit25.Properties.Items.Add("Rally Master");
                    break;
                case 6:
                    comboBoxEdit25.Properties.Items.Add("Stock Wheels");
                    comboBoxEdit25.Properties.Items.Add("Speedway");
                    comboBoxEdit25.Properties.Items.Add("Street Special");
                    comboBoxEdit25.Properties.Items.Add("Racer");
                    comboBoxEdit25.Properties.Items.Add("Track Star");
                    comboBoxEdit25.Properties.Items.Add("Overlord");
                    comboBoxEdit25.Properties.Items.Add("Trident");
                    comboBoxEdit25.Properties.Items.Add("Triple Threat");
                    comboBoxEdit25.Properties.Items.Add("Stilleto");
                    comboBoxEdit25.Properties.Items.Add("Wire");
                    comboBoxEdit25.Properties.Items.Add("Bobber");
                    comboBoxEdit25.Properties.Items.Add("Solidus");
                    comboBoxEdit25.Properties.Items.Add("Ice Shield");
                    break;
                case 7:
                    comboBoxEdit25.Properties.Items.Add("Default");
                    comboBoxEdit25.Properties.Items.Add("Shadow");
                    comboBoxEdit25.Properties.Items.Add("Hypher");
                    comboBoxEdit25.Properties.Items.Add("Blade");
                    comboBoxEdit25.Properties.Items.Add("Diamond");
                    comboBoxEdit25.Properties.Items.Add("Supa Gee");
                    comboBoxEdit25.Properties.Items.Add("Chromatic Z");
                    comboBoxEdit25.Properties.Items.Add("Mercie Ch.Lip");
                    comboBoxEdit25.Properties.Items.Add("Obey RS");
                    comboBoxEdit25.Properties.Items.Add("GT Chrome");
                    comboBoxEdit25.Properties.Items.Add("Cheetah RR");
                    comboBoxEdit25.Properties.Items.Add("Solar");
                    comboBoxEdit25.Properties.Items.Add("Split Ten");
                    comboBoxEdit25.Properties.Items.Add("Dash VIP");
                    comboBoxEdit25.Properties.Items.Add("LozSpeed Ten");
                    comboBoxEdit25.Properties.Items.Add("Carbon Inferno");
                    comboBoxEdit25.Properties.Items.Add("Carbon Shadow");
                    comboBoxEdit25.Properties.Items.Add("Carbonic Z");
                    comboBoxEdit25.Properties.Items.Add("Carbon Solar");
                    comboBoxEdit25.Properties.Items.Add("Cheetah Carbon");
                    comboBoxEdit25.Properties.Items.Add("Carbon S Racer");
                    break;
                default:
                    return;
            }
        }

        private void applycarchange(uint selcar)
        {
            byte[] Cartype = PS3.GetBytes(garageoffset + CARTYPEOFFSET + (selcar * 0x400), 4);
            PS3.SetMemory(garageoffset + CARTYPEOFFSET + (selcar * 0x400), new Byte[] { 0x00, 0x00, 0x00, 0x00 });
            Thread.Sleep(50);
            PS3.SetMemory(garageoffset + CARTYPEOFFSET + (selcar * 0x400), Cartype);
        }

        void RefreshGarageInfo()
        {
            garUpdating = true;
            byte[] bLicense = PS3.GetBytes(garageoffset + ((uint)listBoxControl1.SelectedIndex * GARAGEITEMLENGTH) + LICENSE, 8);
            string sLicense = Encoding.ASCII.GetString(bLicense);
            buttonEdit24.Text = sLicense;

            comboBoxEdit2.SelectedIndex = Convert.ToInt32(PS3.GetBytes(garageoffset + ((uint)listBoxControl1.SelectedIndex * GARAGEITEMLENGTH) + 11, 8));
            
            byte[] bEngine = PS3.GetBytes(garageoffset + ((uint)listBoxControl1.SelectedIndex * GARAGEITEMLENGTH) + ENGINE, 1);
            if (bEngine[0] < 5)
                comboBoxEdit18.SelectedIndex = bEngine[0];

            byte[] bSuspension = PS3.GetBytes(garageoffset + ((uint)listBoxControl1.SelectedIndex * GARAGEITEMLENGTH) + SUSPENSION, 1);
            if (bSuspension[0] < 5)
                comboBoxEdit19.SelectedIndex = bSuspension[0];

            byte[] bTrans = PS3.GetBytes(garageoffset + ((uint)listBoxControl1.SelectedIndex * GARAGEITEMLENGTH) + TRANSMISSION, 1);
            if (bTrans[0] < 4)
                comboBoxEdit17.SelectedIndex = bTrans[0];

            byte[] bBrakes = PS3.GetBytes(garageoffset + ((uint)listBoxControl1.SelectedIndex * GARAGEITEMLENGTH) + BRAKES, 1);
            if (bBrakes[0] < 4)
                comboBoxEdit21.SelectedIndex = bBrakes[0];

            byte[] bArmor = PS3.GetBytes(garageoffset + ((uint)listBoxControl1.SelectedIndex * GARAGEITEMLENGTH) + ARMOR, 1);
            if (bArmor[0] < 6)
                comboBoxEdit22.SelectedIndex = bArmor[0];

            byte[] bWindow = PS3.GetBytes(garageoffset + ((uint)listBoxControl1.SelectedIndex * GARAGEITEMLENGTH) + WINDOW, 1);
            if (bWindow[0] < 7)
                comboBoxEdit6.SelectedIndex = bWindow[0];

            byte[] bHorn = PS3.GetBytes(garageoffset + ((uint)listBoxControl1.SelectedIndex * GARAGEITEMLENGTH) + HORN, 1);
            if (bHorn[0] < 32)
                comboBoxEdit7.SelectedIndex = bHorn[0];

            byte[] bWheelCat = PS3.GetBytes(garageoffset + ((uint)listBoxControl1.SelectedIndex * GARAGEITEMLENGTH) + RIMCLASS, 1);
            if (bWheelCat[0] < 8)
                comboBoxEdit26.SelectedIndex = bWheelCat[0];

            byte[] bWheel = PS3.GetBytes(garageoffset + ((uint)listBoxControl1.SelectedIndex * GARAGEITEMLENGTH) + RIMS, 1);

            int MaxWheel = comboBoxEdit25.Properties.Items.Count;
            if (bWheel[0] < MaxWheel)
                comboBoxEdit25.SelectedIndex = bWheel[0];

            else if (bWheel[0] < MaxWheel + MaxWheel)
            {
                checkEdit30.Checked = true;
                comboBoxEdit25.SelectedIndex = (int)bWheel[0] - (MaxWheel - 1);
            }

            byte[] bRimcolor = PS3.GetBytes(garageoffset + ((uint)listBoxControl1.SelectedIndex * GARAGEITEMLENGTH) + RIMCOLOR, 1);
            if (bRimcolor[0] < 161)
                comboBoxEdit24.SelectedIndex = bRimcolor[0];

            byte[] bLcolor = PS3.GetBytes(garageoffset + ((uint)listBoxControl1.SelectedIndex * GARAGEITEMLENGTH) + LICENSECOLOR, 1);
            if (bLcolor[0] < 6)
                comboBoxEdit2.SelectedIndex = bLcolor[0];

            byte[] bPcolor = PS3.GetBytes(garageoffset + ((uint)listBoxControl1.SelectedIndex * GARAGEITEMLENGTH) + PRIM_COLOR, 1);
            if (bPcolor[0] < 161)
                comboBoxEdit3.SelectedIndex = bPcolor[0];

            byte[] bScolor = PS3.GetBytes(garageoffset + ((uint)listBoxControl1.SelectedIndex * GARAGEITEMLENGTH) + SEC_COLOR, 1);
            if (bScolor[0] < 161)
                comboBoxEdit4.SelectedIndex = bScolor[0];

            byte[] bXcolor = PS3.GetBytes(garageoffset + ((uint)listBoxControl1.SelectedIndex * GARAGEITEMLENGTH) + PEARL_COLOR, 1);
            if (bXcolor[0] < 161)
                comboBoxEdit5.SelectedIndex = bXcolor[0];

            byte[] bTurbo = PS3.GetBytes(garageoffset + ((uint)listBoxControl1.SelectedIndex * GARAGEITEMLENGTH) + TURBO, 1);
            if (bTurbo[0] == 1)
                comboBoxEdit20.SelectedIndex = 1;
            else
                comboBoxEdit20.SelectedIndex = 0;

            byte[] bXenon = PS3.GetBytes(garageoffset + ((uint)listBoxControl1.SelectedIndex * GARAGEITEMLENGTH) + XENON, 1);
            if (bXenon[0] == 1)
                comboBoxEdit23.SelectedIndex = 1;
            else
                comboBoxEdit23.SelectedIndex = 0;

            byte[] bProof = PS3.GetBytes(garageoffset + ((uint)listBoxControl1.SelectedIndex * GARAGEITEMLENGTH) + BULLETPROOF, 1);
            if (bProof[0] == 1)
                checkEdit31.Checked = true;
            else
                checkEdit31.Checked = false;

            byte[] bIns = PS3.GetBytes(garageoffset + ((uint)listBoxControl1.SelectedIndex * GARAGEITEMLENGTH) + 287, 1);
            if (bIns[0] == 0)
                checkEdit1.Checked = false;
            else
                checkEdit1.Checked = true;

            byte[] bPatriotSm = PS3.GetBytes(garageoffset + ((uint)listBoxControl1.SelectedIndex * GARAGEITEMLENGTH) + 287, 1);
            if (bPatriotSm[0] == 0)
                checkEdit36.Checked = false;
            else
                checkEdit36.Checked = true;

            byte[] bSpoiler = PS3.GetBytes(garageoffset + ((uint)listBoxControl1.SelectedIndex * GARAGEITEMLENGTH) + 51, 1);
            if (bSpoiler[0] < 5)
                comboBoxEdit8.SelectedIndex = bSpoiler[0];

            byte[] bExhaust = PS3.GetBytes(garageoffset + ((uint)listBoxControl1.SelectedIndex * GARAGEITEMLENGTH) + 67, 1);
            if (bExhaust[0] < 5)
                comboBoxEdit9.SelectedIndex = bExhaust[0];

            byte[] bFrontB = PS3.GetBytes(garageoffset + ((uint)listBoxControl1.SelectedIndex * GARAGEITEMLENGTH) + 55, 1);
            if (bFrontB[0] < 5)
                comboBoxEdit10.SelectedIndex = bFrontB[0];

            byte[] bRearB = PS3.GetBytes(garageoffset + ((uint)listBoxControl1.SelectedIndex * GARAGEITEMLENGTH) + 59, 1);
            if (bRearB[0] < 5)
                comboBoxEdit11.SelectedIndex = bRearB[0];

            byte[] bSkirt = PS3.GetBytes(garageoffset + ((uint)listBoxControl1.SelectedIndex * GARAGEITEMLENGTH) + 63, 1);
            if (bSkirt[0] < 5)
                comboBoxEdit12.SelectedIndex = bSkirt[0];

            byte[] bhood = PS3.GetBytes(garageoffset + ((uint)listBoxControl1.SelectedIndex * GARAGEITEMLENGTH) + 79, 1);
            if (bhood[0] < 5)
                comboBoxEdit16.SelectedIndex = bhood[0];

            byte[] broof = PS3.GetBytes(garageoffset + ((uint)listBoxControl1.SelectedIndex * GARAGEITEMLENGTH) + 91, 1);
            if (broof[0] < 5)
                comboBoxEdit15.SelectedIndex = broof[0];

            byte[] broll = PS3.GetBytes(garageoffset + ((uint)listBoxControl1.SelectedIndex * GARAGEITEMLENGTH) + 71, 1);
            if (broll[0] < 5)
                comboBoxEdit14.SelectedIndex = broll[0];

            byte[] bgrille = PS3.GetBytes(garageoffset + ((uint)listBoxControl1.SelectedIndex * GARAGEITEMLENGTH) + 75, 1);
            if (bgrille[0] < 5)
                comboBoxEdit13.SelectedIndex = bgrille[0];

            garUpdating = false;
        }

        uint GaragePointer = 0x1E70390;
        const uint PRIM_COLOR = 31;
        const uint SEC_COLOR = 35;
        const uint PEARL_COLOR = 39;
        const uint HORN = 107;
        const uint RIMS = 143;
        const uint REARRIM = 147;
        const uint RIMCLASS = 191;
        const uint RIMCOLOR = 43;
        const uint BULLETPROOF = 195;
        const uint WINDOW = 175;
        const uint LICENSE = 12;
        const uint XENON = 139;
        const uint SUSPENSION = 111;
        const uint TRANSMISSION = 103;
        const uint TURBO = 123;
        const uint ENGINE = 95;
        const uint ARMOR = 115;
        const uint BRAKES = 99;
        const uint GARAGEITEMLENGTH = 400;

        private string hash2car(uint car)
        {
            if (carhashes.ContainsKey(car))
                return carhashes[car];
            else
                return "...";
        }

        Dictionary<uint, string> carhashes = new Dictionary<uint, string>();

        private void LoadGarage(uint garage)
        {
            int tempindex = listBoxControl1.SelectedIndex;
            listBoxControl1.Items.Clear();
            uint i = 0;
            for (i = 0; i < 39; i++)
            {
                byte[] Cartype = PS3.GetBytes(garage + CARTYPEOFFSET + (i * GARAGEITEMLENGTH), 4);
                Array.Reverse(Cartype);
                listBoxControl1.Items.Add(hash2car(BitConverter.ToUInt32(Cartype, 0)));

            }

            if (tempindex == -1)
                listBoxControl1.SelectedIndex = 0;
            else
                listBoxControl1.SelectedIndex = tempindex;
        }

        private void SetChange(uint uint_44)
        {
            byte[] buffer = PS3.GetBytes((uint)((int)ChiappaDX + 176 + (int)uint_44 * 400), 4);
            PS3.SetMemory((uint)((int)ChiappaDX + 176 + (int)uint_44 * 400), new byte[4]);
            Thread.Sleep(50);
            PS3.SetMemory((uint)((int)ChiappaDX + 176 + (int)uint_44 * 400), buffer);
        }
        #endregion

        #region Stats
        string[] getOutfitTitles()
        {
            string filepath = "Files/Outfits.xml";
            if (File.Exists(filepath))
            {
                List<string> list = new List<string>();
                XmlReaderSettings settings = new XmlReaderSettings();
                settings.ConformanceLevel = ConformanceLevel.Fragment;
                using (XmlReader reader = XmlReader.Create(new StringReader(File.ReadAllText(filepath)), settings))
                {
                    while (reader.ReadToFollowing("outfit"))
                    {
                        reader.MoveToFirstAttribute();
                        list.Add(reader.Value);
                    }
                }
                return list.ToArray();
            }
            return null;
        }

        void setClothing(string family, string model, string texture)
        {
            int fam = 0;
            if (family == "HAT" || family == "EYES" || family == "EARS")
            {
                switch (family)
                {
                    case "HAT": fam = 0; break;
                    case "EYES": fam = 1; break;
                    case "EARS": fam = 2; break;
                }
                if (model != "-1" && texture != "-1")
                    ClassicRPC.NCall(NewNatives.SET_PED_PROP_INDEX, PLAYER_PED_ID(), fam, Convert.ToInt32(model) - 1, Convert.ToInt32(texture));
            }
            else
            {
                switch (family)
                {
                    case "FACE": fam = 0; break;
                    case "MASK": fam = 1; break;
                    case "HAIR": fam = 2; break;
                    case "TORSO": fam = 3; break;
                    case "LEGS": fam = 4; break;
                    case "HANDS": fam = 5; break;
                    case "SHOES": fam = 6; break;
                    case "EXTRA": fam = 7; break;
                    case "TOPS1": fam = 8; break;
                    case "ARMOR": fam = 9; break;
                    case "EMBLEM": fam = 10; break;
                    case "TOPS2": fam = 11; break;
                }
                if (model != "-1" && texture != "-1")
                    ClassicRPC.NCall(NewNatives.SET_PED_COMPONENT_VARIATION, PLAYER_PED_ID(), fam, Convert.ToInt32(model), Convert.ToInt32(texture));
            }
        }

        string[] aoElements = new string[] { "mask", "hat", "eyes", "ears", "hair", "torso", "tops1", "tops2", "legs", "shoes", "face", "extra", "hands", "armor", "emblem" };

        Dictionary<string, object[]> getOutfitData(string title)
        {
            string filepath = "Files/Outfits.xml";
            XmlDocument doc = new XmlDocument();
            doc.Load(filepath);

            XmlNode foundNode = null;
            foreach (XmlNode node in doc.DocumentElement.SelectNodes("/root/outfit"))
            {
                if (node.Attributes["title"].InnerText == title)
                {
                    foundNode = node;
                }
            }

            Dictionary<string, object[]> data = new Dictionary<string, object[]>();
            if (foundNode != null)
            {
                data.Add("gender", new object[] { foundNode.Attributes["gender"].InnerText });
                data.Add("creator", new object[] { foundNode.Attributes["creator"].InnerText });
                for (int i = 0; i < aoElements.Count(); i++)
                {
                    data.Add(aoElements[i], new object[] { Convert.ToInt32(foundNode.SelectSingleNode(aoElements[i]).Attributes["model"].InnerText), Convert.ToInt32(foundNode.SelectSingleNode(aoElements[i]).Attributes["texture"].InnerText) });
                }
                data.Add("description", new object[] { foundNode.SelectSingleNode("description").InnerXml });
            }
            return data;
        }

        void refreshOutfitListing()
        {
            int index = aoListing.SelectedIndex;
            aoListing.Items.Clear();
            foreach (string label in getOutfitTitles())
            {
                aoListing.Items.Add(label);
            }
            aoListing.SelectedIndex = index;
        }

        void aoeRefreshControls()
        {
            if (aoListing.SelectedIndex != -1)
            {
                DevExpress.XtraEditors.SpinEdit[] aoeControls_m = new DevExpress.XtraEditors.SpinEdit[] { aoeMask_m, aoeHat_m, aoeEyes_m, aoeEars_m, aoeHair_m, aoeTorso_m, aoeTops1_m, aoeTops2_m, aoeLegs_m, aoeShoes_m, aoeFace_m, aoeExtra_m, aoeHands_m, aoeArmor_m, aoeEmblem_m };
                DevExpress.XtraEditors.SpinEdit[] aoeControls_t = new DevExpress.XtraEditors.SpinEdit[] { aoeMask_t, aoeHat_t, aoeEyes_t, aoeEars_t, aoeHair_t, aoeTorso_t, aoeTops1_t, aoeTops2_t, aoeLegs_t, aoeShoes_t, aoeFace_t, aoeExtra_t, aoeHands_t, aoeArmor_t, aoeEmblem_t };
                Dictionary<string, object[]> data = getOutfitData(aoListing.Text);
                aoeTitle.Text = getOutfitTitles()[aoListing.SelectedIndex];

                for (int i = 0; i < aoeControls_m.Count(); i++)
                {
                    aoeControls_m[i].Text = data[aoElements[i]][0].ToString();
                    aoeControls_t[i].Text = data[aoElements[i]][1].ToString();
                }

                aoeDescription.Text = data["description"][0].ToString();
                aoeGender.SelectedIndex = data["gender"][0].ToString() == "male" ? 0 : 1;
                aoeCreator.Text = "Creator: " + data["creator"][0].ToString();
            }
        }

        void RP(string val)
        {
            try
            {
                STAT_INT("CHAR_XP_FM", Convert.ToInt32(val), 0);
            }
            catch (Exception ex)
            {
                DevExpress.XtraEditors.XtraMessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        void Add_Cash(string cash)
        {
            ClassicRPC.Call((uint)Natives.MONEY, Convert.ToInt32(cash), 0);
        }

        void Add_Cash2(string cash, int index)
        {
            ClassicRPC.Call((uint)Natives.MONEY, Convert.ToInt32(cash), index);
        }

        public uint DateStruct_2_Memory(int _year, int _month, int _day, int _hour, int _minute, int _second, int _millisecond)
        {
            uint location = 0x10030000;
            PS3.Extension.WriteInt32(0x10030000, _year);
            PS3.Extension.WriteInt32(0x10030000 + 4, _month);
            PS3.Extension.WriteInt32(0x10030000 + 8, _day);
            PS3.Extension.WriteInt32(0x10030000 + 12, _hour);
            PS3.Extension.WriteInt32(0x10030000 + 16, _minute);
            PS3.Extension.WriteInt32(0x10030000 + 20, _second);
            PS3.Extension.WriteInt32(0x10030000 + 24, _millisecond);
            return location;
        }

        void Clear()
        {
            STAT_INT("MPPLY_REPORT_STRENGTH", 0, 1);
            STAT_INT("MPPLY_COMMEND_STRENGTH", 100, 1);
            STAT_INT("MPPLY_FRIENDLY", 100, 1);
            STAT_INT("MPPLY_HELPFUL", 100, 1);
            STAT_INT("MPPLY_GRIEFING", 0, 1);
            STAT_INT("MPPLY_VC_ANNOYINGME", 0, 1);
            STAT_INT("MPPLY_VC_HATE", 0, 1);
            STAT_INT("MPPLY_OFFENSIVE_LANGUAGE", 0, 1);
            STAT_INT("MPPLY_OFFENSIVE_TAGPLATE", 0, 1);
            STAT_INT("MPPLY_OFFENSIVE_UGC", 0, 1);
            STAT_INT("MPPLY_BAD_CREW_NAME", 0, 1);
            STAT_INT("MPPLY_BAD_CREW_MOTTO", 0, 1);
            STAT_INT("MPPLY_BAD_CREW_STATUS", 0, 1);
            STAT_INT("MPPLY_BAD_CREW_EMBLEM", 0, 1);
            STAT_INT("MPPLY_GAME_EXPLOITS", 0, 1);
            STAT_INT("MPPLY_EXPLOITS", 0, 1);
            STAT_INT("MPPLY_ISPUNISHED", 0, 1);
        }

        private void Snacks(string string_2)
        {
            string[] strArray = new string[5]
            {
                "NO_BOUGHT_YUM_SNACKS",
                "NO_BOUGHT_HEALTH_SNACKS",
                "NO_BOUGHT_EPIC_SNACKS",
                "NUMBER_OF_ORANGE_BOUGHT",
                "NUMBER_OF_BOURGE_BOUGHT"
            };
            for (int index = 0; index <= strArray.Length - 1; ++index)
                STAT_INT(strArray[index], Convert.ToInt32(string_2), 1);
        }

        void Armor(string val)
        {
            string[] Stats = new string[] { "MP_CHAR_ARMOUR_1_COUNT", "MP_CHAR_ARMOUR_2_COUNT", "MP_CHAR_ARMOUR_3_COUNT", "MP_CHAR_ARMOUR_4_COUNT", "MP_CHAR_ARMOUR_5_COUNT" };
            for (int i = 0; i <= Stats.Length - 1; i++)
            {
                STAT_INT(Stats[i], Convert.ToInt32(val), 1);
            }
        }

        void Player_Kills(string kills)
        {
            STAT_INT("MPPLY_KILLS_PLAYERS", Convert.ToInt32(kills), 1);
        }

        void Player_Deaths(string deaths)
        {
            STAT_INT("MPPLY_DEATHS_PLAYER", Convert.ToInt32(deaths), 1);
        }

        void Player_Headshots(string shots)
        {
            STAT_INT("PLAYER_HEADSHOTS", Convert.ToInt32(shots), 1);
        }
        void Ped_Headshots(string shots)
        {
            STAT_INT("HEADSHOTS", Convert.ToInt32(shots), 1);
        }
        void Shots(string shots)
        {
            STAT_INT("SHOTS", Convert.ToInt32(shots), 1);
        }
        void Accuracy(string a)
        {
            STAT_BOOL("WEAPON_ACCURACY", (float)(Convert.ToInt32(a)), 1);
        }
        void Kills_Cops(string a)
        {
            STAT_INT("KILLS_COP", Convert.ToInt32(a), 1);
        }
        void Kills_SWAT(string a)
        {
            STAT_INT("KILLS_SWAT", Convert.ToInt32(a), 1);
        }

        void KDR(string kdr)
        {
            STAT_BOOL("MPPLY_KILL_DEATH_RATIO", (float)(Convert.ToInt32(kdr)), 1);
        }

        public static int STAT_GET_INT(int hash)
        {
            ClassicRPC.NCall(NewNatives.STAT_GET_INT, new object[] { hash, 0x10020150, -1 });
            Thread.Sleep(20);
            return PS3.Extension.ReadInt32(0x10020150);
        }

        void Unlock_Vehicles()
        {
            STAT_INT("RACES_WON", 50, 1);
            STAT_INT("CHAR_FM_CARMOD_1_UNLCK", -1, 1);
            STAT_INT("CHAR_FM_CARMOD_2_UNLCK", -1, 1);
            STAT_INT("CHAR_FM_CARMOD_3_UNLCK", -1, 1);
            STAT_INT("CHAR_FM_CARMOD_4_UNLCK", -1, 1);
            STAT_INT("CHAR_FM_CARMOD_5_UNLCK", -1, 1);
            STAT_INT("CHAR_FM_CARMOD_6_UNLCK", -1, 1);
            STAT_INT("CHAR_FM_CARMOD_7_UNLCK", -1, 1);
            STAT_INT("AWD_FMRALLYWONDRIVE", 1, 1);
            STAT_INT("AWD_FMRALLYWONNAV", 1, 1);
            STAT_INT("AWD_FMWINSEARACE", 1, 1);
            STAT_INT("AWD_FMWINAIRRACE", 1, 1);
            STAT_INT("NUMBER_TURBO_STARTS_IN_RACE", 50, 1);
            STAT_INT("USJS_COMPLETED", 50, 1);
            STAT_INT("AWD_FM_RACES_FASTEST_LAP", 50, 1);
            STAT_INT("NUMBER_SLIPSTREAMS_IN_RACE", 100, 1);
        }
        void Unlock_Camos()
        {
            string[] Stats = new string[] { "CHAR_KIT_1_FM_UNLCK", "CHAR_KIT_2_FM_UNLCK", "CHAR_KIT_3_FM_UNLCK", "CHAR_KIT_4_FM_UNLCK", "CHAR_KIT_5_FM_UNLCK", "CHAR_KIT_6_FM_UNLCK", "CHAR_KIT_7_FM_UNLCK", "CHAR_KIT_8_FM_UNLCK", "CHAR_KIT_9_FM_UNLCK", "CHAR_KIT_10_FM_UNLCK", "CHAR_KIT_11_FM_UNLCK", "CHAR_KIT_12_FM_UNLCK", "CHAR_KIT_FM_PURCHASE", "CHAR_KIT_FM_PURCHASE2", "CHAR_KIT_FM_PURCHASE3", "CHAR_KIT_FM_PURCHASE4", "CHAR_KIT_FM_PURCHASE5", "CHAR_KIT_FM_PURCHASE6", "CHAR_KIT_FM_PURCHASE7", "CHAR_KIT_FM_PURCHASE8", "CHAR_KIT_FM_PURCHASE9", "CHAR_KIT_FM_PURCHASE10", "CHAR_KIT_FM_PURCHASE11", "CHAR_KIT_FM_PURCHASE12" };
            for (int i = 0; i <= Stats.Length - 1; i++)
            {
                STAT_INT(Stats[i], -1, 1);
            }
        }
        void Unlock_Tints()
        {
            string[] Stats = new string[] { "PISTOL_KILLS", "CMBTPISTOL_ENEMY_KILLS", "APPISTOL_ENEMY_KILLS", "MICROSMG_ENEMY_KILLS", "SMG_ENEMY_KILLS", "ASLTSMG_ENEMY_KILLS", "ASLTRIFLE_ENEMY_KILLS", "CRBNRIFLE_ENEMY_KILLS", "ADVRIFLE_ENEMY_KILLS", "MG_ENEMY_KILLS", "CMBTMG_ENEMY_KILLS", "ASLTMG_ENEMY_KILLS", "PUMP_ENEMY_KILLS", "ASLTSHTGN_ENEMY_KILLS", "SNIPERRFL_ENEMY_KILLS", "HVYSNIPER_ENEMY_KILLS", "GRNLAUNCH_ENEMY_KILLS", "RPG_ENEMY_KILLS", "MINIGUNS_ENEMY_KILLS" };
            for (int i = 0; i <= Stats.Length - 1; i++)
            {
                STAT_INT(Stats[i], 600, 1);
            }
        }
        void Unlock_HeistVeh()
        {
            STAT_INT("CHAR_FM_VEHICLE_1_UNLCK", -1, 1);
            STAT_INT("CHAR_FM_VEHICLE_2_UNLCK", -1, 1);
        }
        void Unlock_Tattoos()
        {
            STAT_INT("AWD_FMBBETWIN", 50000, 1);
            STAT_FLOAT("AWD_FMATTGANGHQ", 1, 1);
            STAT_INT("AWD_FMREVENGEKILLSDM", 50, 1);
            STAT_INT("PLAYER_HEADSHOTS", 500, 1);
            STAT_FLOAT("AWD_FMRACEWORLDRECHOLDER", 1, 1);
            STAT_FLOAT("AWD_FMKILL3ANDWINGTARACE", 1, 1);
            STAT_INT("AWD_FMKILLBOUNTY", 25, 1);
            STAT_INT("AWD_SECURITY_CARS_ROBBED", 25, 1);
            STAT_INT("AWD_FM_DM_WINS", 50, 1);
            STAT_FLOAT("AWD_FMWINEVERYGAMEMODE", 1, 1);
            STAT_INT("AWD_HOLD_UP_SHOPS", 20, 1);
            STAT_INT("AWD_RACES_WON", 50, 1);
            STAT_INT("AWD_CAR_BOMBS_ENEMY_KILLS", 25, 1);
            STAT_FLOAT("AWD_FMFULLYMODDEDCAR", 1, 1);
            STAT_INT("AWD_FM_DM_TOTALKILLS", 500, 1);
            STAT_INT("AWD_LAPDANCES", 25, 1);
            STAT_INT("PISTOL_ENEMY_KILLS", 500, 1);
            STAT_INT("SNIPERRFL_ENEMY_KILLS", 100, 1);
            STAT_FLOAT("AWD_FMKILLSTREAKSDM", 1, 1);
            STAT_FLOAT("AWD_FMMOSTKILLSSURVIVE", 1, 1);
            STAT_INT("AWD_FM_TDM_MVP", 50, 1);
            STAT_INT("KILLS_PLAYERS", 1000, 1);
        }

        void Unlock_Weapons()
        {
            string[] Stats = new string[] { "ADMIN_WEAPON_GV_BS_1", "BOTTLE_IN_POSSESSION", "CHAR_FM_WEAP_UNLOCKED", "CHAR_FM_WEAP_UNLOCKED2", "CHAR_WEAP_FM_PURCHASE", "CHAR_WEAP_FM_PURCHASE2", "CHAR_FM_WEAP_ADDON_1_UNLCK", "CHAR_FM_WEAP_ADDON_2_UNLCK", "CHAR_FM_WEAP_ADDON_3_UNLCK", "CHAR_FM_WEAP_ADDON_4_UNLCK", "CHAR_FM_WEAP_ADDON_5_UNLCK", "WEAP_FM_ADDON_PURCH", "WEAP_FM_ADDON_PURCH2", "WEAP_FM_ADDON_PURCH3", "WEAP_FM_ADDON_PURCH4", "WEAP_FM_ADDON_PURCH5" };
            foreach (string stat in Stats)
                STAT_INT(stat, -1, 1);
        }

        void Hair()
        {
            string[] Stats = new string[] { "CLTHS_AVAILABLE_HAIR", "CLTHS_AVAILABLE_HAIR_1", "CLTHS_AVAILABLE_HAIR_2", "CLTHS_AVAILABLE_HAIR_3", "CLTHS_AVAILABLE_HAIR_4", "CLTHS_AVAILABLE_HAIR_5", "CLTHS_AVAILABLE_HAIR_6", "CLTHS_AVAILABLE_HAIR_7" };
            for (int i = 0; i <= Stats.Length - 1; i++)
            {
                STAT_INT(Stats[i], -1, 1);
            }
        }

        private void UnlockDLC1()
        {
            STAT_INT("MPPLY_VEHICLE_ID_ADMIN_WEB", 117401876, 1);
        }

        private void UnlockDLC2()
        {
            PS3.Extension.WriteInt32((uint)((int)PS3.Extension.ReadUInt32(ChiappaSX) + 4 + 24012), 1);
            PS3.Extension.WriteInt32((uint)((int)PS3.Extension.ReadUInt32(ChiappaSX) + 4 + 24048), 0);
            PS3.Extension.WriteInt32((uint)((int)PS3.Extension.ReadUInt32(ChiappaSX) + 4 + 24068), 1);
            PS3.Extension.WriteInt32((uint)((int)PS3.Extension.ReadUInt32(ChiappaSX) + 4 + 24072), 1);
            PS3.Extension.WriteInt32((uint)((int)PS3.Extension.ReadUInt32(ChiappaSX) + 4 + 19312), 1);
            PS3.Extension.WriteInt32((uint)((int)PS3.Extension.ReadUInt32(ChiappaSX) + 4 + 18900), 1);
            PS3.Extension.WriteInt32((uint)((int)PS3.Extension.ReadUInt32(ChiappaSX) + 4 + 27524), 0);
            PS3.Extension.WriteInt32((uint)((int)PS3.Extension.ReadUInt32(ChiappaSX) + 4 + 27540), 0);
            PS3.Extension.WriteInt32((uint)((int)PS3.Extension.ReadUInt32(ChiappaSX) + 4 + 27548), 0);
            PS3.Extension.WriteInt32((uint)((int)PS3.Extension.ReadUInt32(ChiappaSX) + 4 + 27376), 1);
            PS3.Extension.WriteInt32((uint)((int)PS3.Extension.ReadUInt32(ChiappaSX) + 4 + 27744), 1);
            PS3.Extension.WriteInt32((uint)((int)PS3.Extension.ReadUInt32(ChiappaSX) + 4 + 27748), 1);
            PS3.Extension.WriteInt32((uint)((int)PS3.Extension.ReadUInt32(ChiappaSX) + 4 + 27552), 1);
        }

        void Unlock_Exclusives()
        {
            STAT_INT("AWD_FMHORDWAVESSURVIVE", 10, 1);
            STAT_INT("AWD_FMPICKUPDLCCRATE1ST", 1, 1);
            STAT_INT("AWD_WIN_CAPTURE_DONT_DYING", 25, 1);
            STAT_INT("AWD_DO_HEIST_AS_MEMBER", 25, 1);
            STAT_INT("AWD_PICKUP_CAP_PACKAGES", 100, 1);
            STAT_FLOAT("AWD_FINISH_HEIST_NO_DAMAGE", 1, 1);
            STAT_INT("AWD_WIN_GOLD_MEDAL_HEISTS", 25, 1);
            STAT_INT("AWD_KILL_TEAM_YOURSELF_LTS", 25, 1);
            STAT_INT("AWD_KILL_PSYCHOPATHS", 100, 1);
            STAT_INT("AWD_DO_HEIST_AS_THE_LEADER", 25, 1);
            STAT_FLOAT("AWD_STORE_20_CAR_IN_GARAGES", 1, 1);
        }

        private void VehicleSellT()
        {
            STAT_INT("MPPLY_VEHICLE_SELL_TIME", 0, 1);
        }

        void DLC_Clothing()
        {

            string[] Stats = new string[] {
            "ADMIN_CLOTHES_GV_BS_1",
            "ADMIN_CLOTHES_GV_BS_2",
            "ADMIN_CLOTHES_GV_BS_3",
            "ADMIN_CLOTHES_GV_BS_4",
            "ADMIN_CLOTHES_GV_BS_5",
            "ADMIN_CLOTHES_GV_BS_6",
            "ADMIN_CLOTHES_GV_BS_7",
            "ADMIN_CLOTHES_GV_BS_8",
            "ADMIN_CLOTHES_GV_BS_9",
            "ADMIN_CLOTHES_GV_BS_10",
            "ADMIN_CLOTHES_GV_BS_11",
            "ADMIN_CLOTHES_GV_BS_12" };
            for (int i = 0; i <= Stats.Length - 1; i++)
            {
                STAT_INT(Stats[i], -1, 1);
            }
        }

        void Unlock_Clothing()
        {
            string[] Stats = new string[] {
            "CLTHS_AVAILABLE_OUTFIT",
            "CLTHS_AVAILABLE_JBIB",
            "CLTHS_AVAILABLE_JBIB_1",
            "CLTHS_AVAILABLE_JBIB_2",
            "CLTHS_AVAILABLE_JBIB_3",
            "CLTHS_AVAILABLE_JBIB_4",
            "CLTHS_AVAILABLE_JBIB_5",
            "CLTHS_AVAILABLE_JBIB_6",
            "CLTHS_AVAILABLE_JBIB_7",
            "CLTHS_AVAILABLE_LEGS",
            "CLTHS_AVAILABLE_LEGS_1",
            "CLTHS_AVAILABLE_LEGS_2",
            "CLTHS_AVAILABLE_LEGS_3",
            "CLTHS_AVAILABLE_LEGS_4",
            "CLTHS_AVAILABLE_LEGS_5",
            "CLTHS_AVAILABLE_LEGS_6",
            "CLTHS_AVAILABLE_LEGS_7",
            "CLTHS_AVAILABLE_FEET",
            "CLTHS_AVAILABLE_FEET_1",
            "CLTHS_AVAILABLE_FEET_2",
            "CLTHS_AVAILABLE_FEET_3",
            "CLTHS_AVAILABLE_FEET_4",
            "CLTHS_AVAILABLE_FEET_5",
            "CLTHS_AVAILABLE_FEET_6",
            "CLTHS_AVAILABLE_FEET_7",
            "CLTHS_AVAILABLE_PROPS",
            "CLTHS_AVAILABLE_PROPS_1",
            "CLTHS_AVAILABLE_PROPS_2",
            "CLTHS_AVAILABLE_PROPS_3",
            "CLTHS_AVAILABLE_PROPS_4",
            "CLTHS_AVAILABLE_PROPS_5",
            "CLTHS_AVAILABLE_PROPS_6",
            "CLTHS_AVAILABLE_PROPS_7",
            "CLTHS_AVAILABLE_PROPS_8",
            "CLTHS_AVAILABLE_PROPS_9",
            "CLTHS_AVAILABLE_PROPS_10",
            "CLTHS_AVAILABLE_TEETH",
            "CLTHS_AVAILABLE_TEETH_1",
            "CLTHS_AVAILABLE_TEETH_2",
            "CLTHS_AVAILABLE_BERD",
            "CLTHS_AVAILABLE_BERD_1",
            "CLTHS_AVAILABLE_BERD_2",
            "CLTHS_AVAILABLE_BERD_3",
            "CLTHS_AVAILABLE_BERD_4",
            "CLTHS_AVAILABLE_BERD_5",
            "CLTHS_AVAILABLE_BERD_6",
            "CLTHS_AVAILABLE_BERD_7",
            "CLTHS_AVAILABLE_TORSO",
            "CLTHS_AVAILABLE_SPECIAL",
            "CLTHS_AVAILABLE_SPECIAL_1",
            "CLTHS_AVAILABLE_SPECIAL_2",
            "CLTHS_AVAILABLE_SPECIAL_3",
            "CLTHS_AVAILABLE_SPECIAL_4",
            "CLTHS_AVAILABLE_SPECIAL_5",
            "CLTHS_AVAILABLE_SPECIAL_6",
            "CLTHS_AVAILABLE_SPECIAL_7",
            "CLTHS_AVAILABLE_SPECIAL2",
            "CLTHS_AVAILABLE_SPECIAL2_1",
            "CLTHS_AVAILABLE_DECL",
            "CLTHS_ACQUIRED_OUTFIT",
            "CLTHS_ACQUIRED_JBIB",
            "CLTHS_ACQUIRED_JBIB_1",
            "CLTHS_ACQUIRED_JBIB_2",
            "CLTHS_ACQUIRED_JBIB_3",
            "CLTHS_ACQUIRED_JBIB_4",
            "CLTHS_ACQUIRED_JBIB_5",
            "CLTHS_ACQUIRED_JBIB_6",
            "CLTHS_ACQUIRED_JBIB_7",
            "CLTHS_ACQUIRED_LEGS",
            "CLTHS_ACQUIRED_LEGS_1",
            "CLTHS_ACQUIRED_LEGS_2",
            "CLTHS_ACQUIRED_LEGS_3",
            "CLTHS_ACQUIRED_LEGS_4",
            "CLTHS_ACQUIRED_LEGS_5",
            "CLTHS_ACQUIRED_LEGS_6",
            "CLTHS_ACQUIRED_LEGS_7",
            "CLTHS_ACQUIRED_FEET",
            "CLTHS_ACQUIRED_FEET_1",
            "CLTHS_ACQUIRED_FEET_2",
            "CLTHS_ACQUIRED_FEET_3",
            "CLTHS_ACQUIRED_FEET_4",
            "CLTHS_ACQUIRED_FEET_5",
            "CLTHS_ACQUIRED_FEET_6",
            "CLTHS_ACQUIRED_FEET_7",
            "CLTHS_ACQUIRED_PROPS",
            "CLTHS_ACQUIRED_PROPS_1",
            "CLTHS_ACQUIRED_PROPS_2",
            "CLTHS_ACQUIRED_PROPS_3",
            "CLTHS_ACQUIRED_PROPS_4",
            "CLTHS_ACQUIRED_PROPS_5",
            "CLTHS_ACQUIRED_PROPS_6",
            "CLTHS_ACQUIRED_PROPS_7",
            "CLTHS_ACQUIRED_PROPS_8",
            "CLTHS_ACQUIRED_PROPS_9",
            "CLTHS_ACQUIRED_PROPS_10",
            "CLTHS_ACQUIRED_TEETH",
            "CLTHS_ACQUIRED_TEETH_1",
            "CLTHS_ACQUIRED_TEETH_2",
            "CLTHS_ACQUIRED_BERD",
            "CLTHS_ACQUIRED_BERD_1",
            "CLTHS_ACQUIRED_BERD_2",
            "CLTHS_ACQUIRED_BERD_3",
            "CLTHS_ACQUIRED_BERD_4",
            "CLTHS_ACQUIRED_BERD_5",
            "CLTHS_ACQUIRED_BERD_6",
            "CLTHS_ACQUIRED_BERD_7",
            "CLTHS_ACQUIRED_TORSO",
            "CLTHS_ACQUIRED_SPECIAL",
            "CLTHS_ACQUIRED_SPECIAL_1",
            "CLTHS_ACQUIRED_SPECIAL_2",
            "CLTHS_ACQUIRED_SPECIAL_3",
            "CLTHS_ACQUIRED_SPECIAL_4",
            "CLTHS_ACQUIRED_SPECIAL_5",
            "CLTHS_ACQUIRED_SPECIAL_6",
            "CLTHS_ACQUIRED_SPECIAL_7",
            "CLTHS_ACQUIRED_SPECIAL2",
            "CLTHS_ACQUIRED_SPECIAL2_1",
            "CLTHS_ACQUIRED_DECL",
            "DLC_APPAREL_ACQUIRED_0",
            "DLC_APPAREL_ACQUIRED_1",
            "DLC_APPAREL_ACQUIRED_2",
            "DLC_APPAREL_ACQUIRED_3",
            "DLC_APPAREL_ACQUIRED_4",
            "DLC_APPAREL_ACQUIRED_5",
            "DLC_APPAREL_ACQUIRED_6",
            "DLC_APPAREL_ACQUIRED_7",
            "DLC_APPAREL_ACQUIRED_8",
            "DLC_APPAREL_ACQUIRED_9",
            "DLC_APPAREL_ACQUIRED_10",
            "DLC_APPAREL_ACQUIRED_11",
            "DLC_APPAREL_ACQUIRED_12",
            "DLC_APPAREL_ACQUIRED_13",
            "DLC_APPAREL_ACQUIRED_14",
            "DLC_APPAREL_ACQUIRED_15",
            "DLC_APPAREL_ACQUIRED_16",
            "DLC_APPAREL_ACQUIRED_17",
            "DLC_APPAREL_ACQUIRED_18",
            "DLC_APPAREL_ACQUIRED_19",
            "DLC_APPAREL_ACQUIRED_20",
            "DLC_APPAREL_ACQUIRED_21",
            "DLC_APPAREL_ACQUIRED_22",
            "DLC_APPAREL_ACQUIRED_23",
            "DLC_APPAREL_ACQUIRED_24",
            "DLC_APPAREL_ACQUIRED_25",
            "DLC_APPAREL_ACQUIRED_26",
            "DLC_APPAREL_ACQUIRED_27",
            "DLC_APPAREL_ACQUIRED_28",
            "DLC_APPAREL_ACQUIRED_29",
            "DLC_APPAREL_ACQUIRED_30",
            "DLC_APPAREL_ACQUIRED_31",
            "DLC_APPAREL_ACQUIRED_32",
            "DLC_APPAREL_ACQUIRED_33",
            "DLC_APPAREL_ACQUIRED_34",
            "DLC_APPAREL_ACQUIRED_35",
            "DLC_APPAREL_ACQUIRED_36",
            "DLC_APPAREL_ACQUIRED_37",
            "DLC_APPAREL_ACQUIRED_38",
            "DLC_APPAREL_ACQUIRED_39",
            "DLC_APPAREL_ACQUIRED_40",
            "ADMIN_CLOTHES_GV_BS_1",
            "ADMIN_CLOTHES_GV_BS_2",
            "ADMIN_CLOTHES_GV_BS_3",
            "ADMIN_CLOTHES_GV_BS_4",
            "ADMIN_CLOTHES_GV_BS_5",
            "ADMIN_CLOTHES_GV_BS_6",
            "ADMIN_CLOTHES_GV_BS_7",
            "ADMIN_CLOTHES_GV_BS_8",
            "ADMIN_CLOTHES_GV_BS_9",
            "ADMIN_CLOTHES_GV_BS_10",
            "ADMIN_CLOTHES_GV_BS_11",
            "ADMIN_CLOTHES_GV_BS_12" };
            for (int i = 0; i <= Stats.Length - 1; i++)
            {
                STAT_INT(Stats[i], -1, 1);
            }
        }

        private void UnlockAwards()
        {
            STAT_INT("AWD_FM_DM_WINS", 50, 1);
            STAT_INT("AWD_FM_TDM_WINS", 50, 1);
            STAT_INT("AWD_FM_TDM_MVP", 50, 1);
            STAT_INT("AWD_RACES_WON", 50, 1);
            STAT_INT("AWD_FMWINAIRRACE", 25, 1);
            STAT_INT("AWD_FMWINSEARACE", 25, 1);
            STAT_INT("AWD_FM_GTA_RACES_WON", 50, 1);
            STAT_FLOAT("AWD_FMKILL3ANDWINGTARACE", 1, 1);
            STAT_INT("AWD_FMRALLYWONDRIVE", 25, 1);
            STAT_INT("AWD_FMRALLYWONNAV", 25, 1);
            STAT_INT("AWD_FMWINRACETOPOINTS", 25, 1);
            STAT_FLOAT("AWD_FMWINCUSTOMRACE", 1, 1);
            STAT_INT("AWD_FM_RACE_LAST_FIRST", 25, 1);
            STAT_FLOAT("AWD_FMRACEWORLDRECHOLDER", 1, 1);
            STAT_INT("AWD_FM_RACES_FASTEST_LAP", 25, 1);
            STAT_FLOAT("AWD_FMWINALLRACEMODES", 1, 1);
            STAT_INT("AWD_FMHORDWAVESSURVIVE", 10, 1);
            STAT_INT("MOST_ARM_WRESTLING_WINS", 25, 1);
            STAT_INT("AWD_WIN_AT_DARTS", 25, 1);
            STAT_INT("AWD_FM_GOLF_WON", 25, 1);
            STAT_INT("AWD_FM_TENNIS_WON", 25, 1);
            STAT_FLOAT("AWD_FM_TENNIS_5_SET_WINS", 1, 1);
            STAT_FLOAT("AWD_FM_TENNIS_STASETWIN", 1, 1);
            STAT_INT("AWD_FM_SHOOTRANG_TG_WON", 25, 1);
            STAT_INT("AWD_FM_SHOOTRANG_CT_WON", 25, 1);
            STAT_FLOAT("AWD_FM_SHOOTRANG_GRAN_WON", 1, 1);
            STAT_INT("AWD_FM_SHOOTRANG_RT_WON", 25, 1);
            STAT_FLOAT("AWD_FMWINEVERYGAMEMODE", 1, 1);
            STAT_INT("AWD_WIN_LAST_TEAM_STANDINGS", 50, 1);
            STAT_INT("AWD_ONLY_PLAYER_ALIVE_LTS", 50, 1);
            STAT_INT("AWD_KILL_TEAM_YOURSELF_LTS", 25, 1);
            STAT_INT("AWD_WIN_CAPTURES", 50, 1);
            STAT_INT("AWD_WIN_CAPTURE_DONT_DYING", 25, 1);
            STAT_FLOAT("AWD_FM25DIFFERENTDM", 1, 1);
            STAT_FLOAT("AWD_FM25DIFFERENTRACES", 1, 1);
            STAT_INT("AWD_PARACHUTE_JUMPS_20M", 25, 1);
            STAT_INT("AWD_PARACHUTE_JUMPS_50M", 25, 1);
            STAT_INT("AWD_FMBASEJMP", 25, 1);
            STAT_FLOAT("AWD_FMATTGANGHQ", 1, 1);
            STAT_FLOAT("AWD_FM6DARTCHKOUT", 1, 1);
            STAT_INT("AWD_FM_GOLF_BIRDIES", 25, 1);
            STAT_FLOAT("AWD_FM_GOLF_HOLE_IN_1", 1, 1);
            STAT_INT("AWD_FM_TENNIS_ACE", 25, 1);
            STAT_INT("AWD_FMBBETWIN", 50000, 1);
            STAT_INT("AWD_LAPDANCES", 25, 1);
            STAT_INT("AWD_FMCRATEDROPS", 25, 1);
            STAT_FLOAT("AWD_FMPICKUPDLCCRATE1ST", 1, 1);
            STAT_FLOAT("AWD_FM25DIFITEMSCLOTHES", 1, 1);
            STAT_INT("AWD_NO_HAIRCUTS", 25, 1);
            STAT_FLOAT("AWD_BUY_EVERY_GUN", 1, 1);
            STAT_FLOAT("AWD_FMTATTOOALLBODYPARTS", 1, 1);
            STAT_INT("MPPLY_AWD_FM_CR_DM_MADE", 25, 1);
            STAT_INT("MPPLY_AWD_FM_CR_RACES_MADE", 25, 1);
            STAT_INT("MPPLY_AWD_FM_CR_PLAYED_BY_PEEP", 100, 1);
            STAT_INT("AWD_DROPOFF_CAP_PACKAGES", 100, 1);
            STAT_INT("AWD_PICKUP_CAP_PACKAGES", 100, 1);
            STAT_INT("AWD_MENTALSTATE_TO_NORMAL", 50, 1);
            STAT_FLOAT("AWD_STORE_20_CAR_IN_GARAGES", 1, 1);
            STAT_INT("AWD_TRADE_IN_YOUR_PROPERTY", 25, 1);
            STAT_INT("AWD_DAILYOBJCOMPLETED", 100, 1);
            STAT_FLOAT("AWD_DAILYOBJWEEKBONUS", 1, 1);
            STAT_FLOAT("AWD_DAILYOBJMONTHBONUS", 1, 1);
            STAT_INT("CHAR_WANTED_LEVEL_TIME5STAR", -1, 1);
            STAT_INT("AWD_5STAR_WANTED_AVOIDANCE", 50, 1);
            STAT_INT("AWD_FMSHOOTDOWNCOPHELI", 25, 1);
            STAT_INT("PASS_DB_PLAYER_KILLS", 100, 1);
            STAT_INT("AWD_VEHICLES_JACKEDR", 500, 1);
            STAT_INT("AWD_SECURITY_CARS_ROBBED", 25, 1);
            STAT_INT("AWD_HOLD_UP_SHOPS", 20, 1);
            STAT_INT("AWD_ODISTRACTCOPSNOEATH", 25, 1);
            STAT_INT("CARS_EXPLODED", 500, 1);
            STAT_INT("AWD_CARS_EXPORTED", 50, 1);
            STAT_INT("AWD_FMDRIVEWITHOUTCRASH", 30, 1);
            STAT_INT("AWD_PASSENGERTIME", 4, 1);
            STAT_INT("AWD_TIME_IN_HELICOPTER", 4, 1);
            STAT_FLOAT("AWD_FMFULLYMODDEDCAR", 1, 1);
            STAT_INT("AIR_LAUNCHES_OVER_40M", 25, 1);
            STAT_INT("MOST_FLIPS_IN_ONE_JUMP", 5, 1);
            STAT_INT("MOST_SPINS_IN_ONE_JUMP", 5, 1);
            STAT_BOOL("LONGEST_WHEELIE_DIST", 1000f, 1);
            STAT_INT("AWD_LESTERDELIVERVEHICLES", 25, 1);
            STAT_FLOAT("AWD_DRIVELESTERCAR5MINS", 1, 0);
            STAT_INT("PLAYER_HEADSHOTS", 500, 1);
            STAT_INT("KILLS_PLAYERS", 1000, 1);
            STAT_INT("AWD_FMKILLBOUNTY", 25, 1);
            STAT_INT("AWD_FM_DM_3KILLSAMEGUY", 50, 1);
            STAT_INT("AWD_FM_DM_KILLSTREAK", 100, 1);
            STAT_INT("AWD_FM_DM_STOLENKILL", 50, 1);
            STAT_INT("AWD_FM_DM_TOTALKILLS", 500, 1);
            STAT_FLOAT("AWD_FMKILLSTREAKSDM", 1, 1);
            STAT_FLOAT("AWD_FMMOSTKILLSGANGHIDE", 1, 1);
            STAT_FLOAT("AWD_FMMOSTKILLSSURVIVE", 1, 1);
            STAT_INT("AWD_FMREVENGEKILLSDM", 50, 1);
            STAT_INT("PISTOL_ENEMY_KILLS", 500, 1);
            STAT_INT("MICROSMG_ENEMY_KILLS", 500, 1);
            STAT_INT("SAWNOFF_ENEMY_KILLS", 500, 1);
            STAT_INT("ASLTRIFLE_ENEMY_KILLS", 500, 1);
            STAT_INT("SNIPERRFL_ENEMY_KILLS", 100, 1);
            STAT_INT("MG_ENEMY_KILLS", 500, 1);
            STAT_INT("STKYBMB_ENEMY_KILLS", 50, 1);
            STAT_INT("GRENADE_ENEMY_KILLS", 50, 1);
            STAT_INT("RPG_ENEMY_KILLS", 50, 1);
            STAT_INT("UNARMED_ENEMY_KILLS", 50, 1);
            STAT_INT("AWD_CAR_BOMBS_ENEMY_KILLS", 25, 1);
            STAT_INT("AWD_KILL_CARRIER_CAPTURE", 100, 1);
            STAT_INT("AWD_NIGHTVISION_KILLS", 100, 1);
            STAT_INT("AWD_KILL_PSYCHOPATHS", 100, 1);
            STAT_INT("AWD_TAKEDOWNSMUGPLANE", 50, 1);
            STAT_INT("AWD_FINISH_HEISTS", 50, 1);
            STAT_FLOAT("MPPLY_AWD_FLEECA_FIN", 1, 1);
            STAT_FLOAT("MPPLY_AWD_PRISON_FIN", 1, 1);
            STAT_FLOAT("MPPLY_AWD_HUMANE_FIN", 1, 1);
            STAT_FLOAT("MPPLY_AWD_SERIESA_FIN", 1, 1);
            STAT_FLOAT("MPPLY_AWD_PACIFIC_FIN", 1, 1);
            STAT_INT("AWD_FINISH_HEIST_SETUP_JOB", 50, 1);
            STAT_FLOAT("MPPLY_AWD_HST_ORDER", 1, 1);
            STAT_FLOAT("MPPLY_AWD_HST_SAME_TEAM", 1, 1);
            STAT_FLOAT("MPPLY_AWD_HST_ULT_CHAL", 1, 1);
            STAT_INT("AWD_WIN_GOLD_MEDAL_HEISTS", 25, 1);
            STAT_FLOAT("AWD_FINISH_HEIST_NO_DAMAGE", 1, 1);
            STAT_INT("AWD_DO_HEIST_AS_THE_LEADER", 25, 1);
            STAT_INT("AWD_DO_HEIST_AS_MEMBER", 25, 1);
            STAT_FLOAT("AWD_ALL_ROLES_HEIST", 1, 1);
            STAT_FLOAT("AWD_SPLIT_HEIST_TAKE_EVENLY", 1, 1);
            STAT_FLOAT("AWD_ACTIVATE_2_PERSON_KEY", 1, 1);
            STAT_INT("AWD_CONTROL_CROWDS", 25, 1);
            STAT_FLOAT("MPPLY_AWD_COMPLET_HEIST_MEM", 1, 1);
            STAT_INT("AWD_FMBBETWIN", 50000, 1);
            STAT_FLOAT("AWD_FMATTGANGHQ", 1, 1);
            STAT_INT("AWD_FMREVENGEKILLSDM", 50, 1);
            STAT_INT("PLAYER_HEADSHOTS", 500, 1);
            STAT_FLOAT("AWD_FMRACEWORLDRECHOLDER", 1, 1);
            STAT_FLOAT("AWD_FMKILL3ANDWINGTARACE", 1, 1);
            STAT_INT("AWD_FMKILLBOUNTY", 25, 1);
            STAT_INT("AWD_SECURITY_CARS_ROBBED", 25, 1);
            STAT_INT("AWD_FM_DM_WINS", 50, 1);
            STAT_FLOAT("AWD_FMWINEVERYGAMEMODE", 1, 1);
            STAT_INT("AWD_HOLD_UP_SHOPS", 5, 1);
            STAT_INT("AWD_HOLD_UP_SHOPS", 10, 1);
            STAT_INT("AWD_HOLD_UP_SHOPS", 15, 1);
            STAT_INT("AWD_HOLD_UP_SHOPS", 20, 1);
            STAT_INT("AWD_RACES_WON", 50, 1);
            STAT_INT("AWD_CAR_BOMBS_ENEMY_KILLS", 25, 1);
            STAT_FLOAT("AWD_FMFULLYMODDEDCAR", 1, 1);
            STAT_INT("AWD_FM_DM_TOTALKILLS", 500, 1);
            STAT_INT("AWD_LAPDANCES", 25, 1);
            STAT_INT("PISTOL_ENEMY_KILLS", 500, 1);
            STAT_INT("SNIPERRFL_ENEMY_KILLS", 100, 1);
            STAT_FLOAT("AWD_FMKILLSTREAKSDM", 1, 1);
            STAT_FLOAT("AWD_FMMOSTKILLSSURVIVE", 1, 1);
            STAT_INT("AWD_FM_TDM_MVP", 50, 1);
            STAT_INT("KILLS_PLAYERS", 250, 1);
            STAT_INT("KILLS_PLAYERS", 500, 1);
            STAT_INT("KILLS_PLAYERS", 1000, 1);
            STAT_INT("AWD_FMHORDWAVESSURVIVE", 10, 1);
            STAT_FLOAT("AWD_FMPICKUPDLCCRATE1ST", 1, 1);
            STAT_INT("AWD_WIN_CAPTURE_DONT_DYING", 25, 1);
            STAT_INT("AWD_DO_HEIST_AS_MEMBER", 25, 1);
            STAT_INT("AWD_PICKUP_CAP_PACKAGES", 100, 1);
            STAT_FLOAT("AWD_FINISH_HEIST_NO_DAMAGE", 1, 1);
            STAT_INT("AWD_WIN_GOLD_MEDAL_HEISTS", 25, 1);
            STAT_INT("AWD_KILL_TEAM_YOURSELF_LTS", 25, 1);
            STAT_INT("AWD_KILL_PSYCHOPATHS", 100, 1);
            STAT_INT("AWD_DO_HEIST_AS_THE_LEADER", 25, 1);
            STAT_FLOAT("AWD_STORE_20_CAR_IN_GARAGES", 1, 1);
            STAT_INT("AWD_WIN_CAPTURES", 50, 1);
            STAT_INT("AWD_DROPOFF_CAP_PACKAGES", 100, 1);
            STAT_INT("AWD_KILL_CARRIER_CAPTURE", 100, 1);
            STAT_INT("AWD_FINISH_HEISTS", 50, 1);
            STAT_INT("AWD_FINISH_HEIST_SETUP_JOB", 50, 1);
            STAT_INT("AWD_NIGHTVISION_KILLS", 100, 1);
            STAT_INT("AWD_WIN_LAST_TEAM_STANDINGS", 50, 1);
            STAT_INT("AWD_ONLY_PLAYER_ALIVE_LTS", 50, 1);
        }

        void Infinite_Ammo()
        {
            string[] Stats = new string[] { "FLAREGUN_FM_AMMO_CURRENT", "GRNLAUNCH_FM_AMMO_CURRENT", "RPG_FM_AMMO_CURRENT", "MINIGUNS_FM_AMMO_CURRENT", "GRENADE_FM_AMMO_CURRENT", "SMKGRENADE_FM_AMMO_CURRENT", "STKYBMB_FM_AMMO_CURRENT", "MOLOTOV_FM_AMMO_CURRENT", "PETROLCAN_FM_AMMO_CURRENT", "PRXMINE_FM_AMMO_CURRENT", "HOMLNCH_FM_AMMO_CURRENT" };
            foreach (string stat in Stats)
                STAT_INT(stat, -1, 1);
        }

        private void Skills(int int_32)
        {
            string[] strArray = new string[8]
            {
                "SCRIPT_INCREASE_STAM",
                "SCRIPT_INCREASE_STRN",
                "SCRIPT_INCREASE_LUNG",
                "SCRIPT_INCREASE_DRIV",
                "SCRIPT_INCREASE_FLY",
                "SCRIPT_INCREASE_SHO",
                "SCRIPT_INCREASE_STL",
                "SCRIPT_INCREASE_MECH"
            };
            for (int index = 0; index <= strArray.Length - 1; ++index)
                STAT_INT(strArray[index], int_32, 1);
        }

        private void SkipTutorial()
        {
            STAT_FLOAT("FM_TRIGTUT_DONE", 1, 1);
            STAT_FLOAT("FM_HOLDTUT_DONE", 1, 1);
            STAT_FLOAT("FM_RACETUT_DONE", 1, 1);
            STAT_FLOAT("FM_CMODTUT_DONE", 1, 1);
            STAT_FLOAT("NO_TUT_SPAWN", 1, 1);
            STAT_FLOAT("FRONT_END_JIP_UNLOCKED", 1, 1);
            STAT_FLOAT("FM_NOTUT_DONE", 1, 1);
            STAT_FLOAT("FM_INTRO_CUT_DONE", 1, 1);
            STAT_FLOAT("MP0_FM_INTRO_MISS_DONE", 1, 1);
            STAT_FLOAT("MPPLY_FM_INTRO_CUT_DONE", 1, 1);
            STAT_FLOAT("MPPLY_NO_MORE_TUTORIALS", 1, 1);
        }

        private void MentalState(float float_1)
        {
            STAT_BOOL("PLAYER_MENTAL_STATE", float_1, 1);
        }

        private void method_13(string string_2)
        {
            STAT_INT("CHAR_XP_FM", Convert.ToInt32(string_2), 0);
        }

        private void STAT_BOOL(string string_2, float float_1, int int_32)
        {
            try
            {
                if (string_2.Substring(0, 6) == "MPPLY_")
                {
                    ClassicRPC.Call(4374904U, (object)Main.smethod_0(string_2), (object)float_1, (object)int_32);
                }
                else
                {
                    ClassicRPC.Call(4374904U, (object)Main.smethod_0("MP0_" + string_2), (object)float_1, (object)int_32);
                }
            }
            catch
            {
            }
        }

        public static void STAT_SET_INT(int hash, int value)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, new object[] { hash, value, 1 });
        }

        private void STAT_INT(string string_2, int int_32, int int_33)
        {
            try
            {
                if (string_2.Substring(0, 6) == "MPPLY_")
                {
                    ClassicRPC.Call(4374028U, smethod_0(string_2), int_32, int_33);
                }
                else
                {
                    ClassicRPC.Call(4374028U, smethod_0("MP0_" + string_2), int_32, int_33);
                }
            }
            catch
            {

            }
        }

        private void STAT_FLOAT(string string_2, int int_32, int int_33)
        {
            try
            {
                if (string_2.Substring(0, 6) == "MPPLY_")
                {
                    ClassicRPC.Call(4375204U, (object)Main.smethod_0(string_2), (object)int_32, (object)int_33);
                }
                else
                {
                    ClassicRPC.Call(4375204U, (object)Main.smethod_0("MP0_" + string_2), (object)int_32, (object)int_33);
                }
            }
            catch
            {

            }
        }

        public static uint smethod_0(string string_2)
        {
            byte[] bytes = Encoding.UTF8.GetBytes(string_2.ToLower());
            uint num1 = 0;
            for (int index = 0; index < bytes.Length; ++index)
            {
                int num2 = (int)num1 + (int)bytes[index];
                int num3 = 10;
                int num4 = num2 << num3;
                int num5 = num2 + num4;
                int num6 = 6;
                int num7 = (int)((uint)num5 >> num6);
                num1 = (uint)(num5 ^ num7);
            }
            int num8 = (int)num1 + ((int)num1 << 3);
            int num9 = 11;
            int num10 = (int)((uint)num8 >> num9);
            int num11 = num8 ^ num10;
            int num12 = 15;
            int num13 = num11 << num12;
            return (uint)(num11 + num13);
        }

        private int method_2()
        {
            return ClassicRPC.Call(4342296U, Array.Empty<object>());
        }

        private void OverallPlayTime(Decimal decimal_0, Decimal decimal_1, Decimal decimal_2, Decimal decimal_3)
        {
            STAT_INT("TOTAL_PLAYING_TIME", Convert.ToInt32(decimal_0 * new Decimal(86400000) + decimal_1 * new Decimal(3600000) + decimal_2 * new Decimal(60000) + decimal_3 * new Decimal(1000)), 1);
        }

        private void DriveTime(Decimal decimal_0, Decimal decimal_1, Decimal decimal_2, Decimal decimal_3)
        {
            int int32 = Convert.ToInt32(decimal_0 * new Decimal(86400000) + decimal_1 * new Decimal(3600000) + decimal_2 * new Decimal(60000) + decimal_3 * new Decimal(1000));
            string[] strArray = new string[8]
            {
                "TIME_DRIVING_CAR",
                "TIME_DRIVING_PLANE",
                "TIME_DRIVING_QUADBIKE",
                "TIME_DRIVING_HELI",
                "TIME_DRIVING_BIKE",
                "TIME_DRIVING_BICYCLE",
                "TIME_DRIVING_BOAT",
                "TIME_DRIVING_SUBMARINE"
            };
            for (int index = 0; index <= strArray.Length - 1; ++index)
                STAT_INT(strArray[index], int32, 1);
        }

        int fam;

        int PED_ID()
        {
            int x = ClassicRPC.Call((uint)Natives.PLAYER_PED_ID);
            return x;
        }

        void Model(string family, int model, int texture)
        {
            if (family == "HATS" || family == "GLASSES" || family == "EARS")
            {
                switch (family)
                {
                    case "HATS": fam = 0; break;
                    case "GLASSES": fam = 1; break;
                    case "EARS": fam = 2; break;
                }
                ClassicRPC.Call((uint)Natives.SET_PED_PROP_INDEX, PED_ID(), fam, model - 1, texture);
            }
            else
            {
                switch (family)
                {
                    case "FACE": fam = 0; break;
                    case "MASK": fam = 1; break;
                    case "HAIR": fam = 2; break;
                    case "TORSO": fam = 3; break;
                    case "LEGS": fam = 4; break;
                    case "HANDS": fam = 5; break;
                    case "SHOES": fam = 6; break;
                    case "SPECIAL1": fam = 7; break;
                    case "SPECIAL2": fam = 8; break;
                    case "SPECIAL3": fam = 9; break;
                    case "TEXTURE": fam = 10; break;
                    case "TORSO2": fam = 11; break;
                }
                ClassicRPC.Call((uint)Natives.SET_PED_COMPONENT_VARIATION, PED_ID(), fam, model, texture);
            }
        }

        private void Fireworks(string string_2)
        {
            string[] strArray = new string[12]
            {
                "FIREWORK_TYPE_1_WHITE",
                "FIREWORK_TYPE_1_RED",
                "FIREWORK_TYPE_1_BLUE",
                "FIREWORK_TYPE_2_WHITE",
                "FIREWORK_TYPE_2_RED",
                "FIREWORK_TYPE_2_BLUE",
                "FIREWORK_TYPE_3_WHITE",
                "FIREWORK_TYPE_3_RED",
                "FIREWORK_TYPE_3_BLUE",
                "FIREWORK_TYPE_4_WHITE",
                "FIREWORK_TYPE_4_RED",
                "FIREWORK_TYPE_4_BLUE"
            };
            for (int index = 0; index <= strArray.Length - 1; ++index)
                STAT_INT(strArray[index], Convert.ToInt32(string_2), 1);
        }

        private void Smokes(string string_2)
        {
            STAT_INT("CIGARETTES_BOUGHT", Convert.ToInt32(string_2), 1);
        }

        void Reset()
        {
            ClassicRPC.Call((uint)Natives.CLEAR_ALL_PED_PROPS, PED_ID());
            ClassicRPC.Call((uint)Natives.CLEAR_PED_DECORATIONS, PED_ID());
            ClassicRPC.Call((uint)Natives.SET_PED_COMPONENT_VARIATION, PED_ID(), 1, 0, 0);
            ClassicRPC.Call((uint)Natives.SET_PED_COMPONENT_VARIATION, PED_ID(), 5, 0, 0);
            ClassicRPC.Call((uint)Natives.SET_PED_COMPONENT_VARIATION, PED_ID(), 9, 0, 0);
        }

        private void TimeWalking(Decimal decimal_0, Decimal decimal_1, Decimal decimal_2, Decimal decimal_3)
        {
            STAT_INT("TIME_WALKING", Convert.ToInt32(decimal_0 * new Decimal(86400000) + decimal_1 * new Decimal(3600000) + decimal_2 * new Decimal(60000) + decimal_3 * new Decimal(1000)), 1);
        }

        private void TimeSwimming(Decimal decimal_0, Decimal decimal_1, Decimal decimal_2, Decimal decimal_3)
        {
            STAT_INT("TIME_SWIMMING", Convert.ToInt32(decimal_0 * new Decimal(86400000) + decimal_1 * new Decimal(3600000) + decimal_2 * new Decimal(60000) + decimal_3 * new Decimal(1000)), 1);
        }

        private void TimeUnderWater(Decimal decimal_0, Decimal decimal_1, Decimal decimal_2, Decimal decimal_3)
        {
            STAT_INT("TIME_UNDERWATER", Convert.ToInt32(decimal_0 * new Decimal(86400000) + decimal_1 * new Decimal(3600000) + decimal_2 * new Decimal(60000) + decimal_3 * new Decimal(1000)), 1);
        }

        private void TimeCover(Decimal decimal_0, Decimal decimal_1, Decimal decimal_2, Decimal decimal_3)
        {
            STAT_INT("TIME_IN_COVER", Convert.ToInt32(decimal_0 * new Decimal(86400000) + decimal_1 * new Decimal(3600000) + decimal_2 * new Decimal(60000) + decimal_3 * new Decimal(1000)), 1);
        }

        private void TimeWanted(Decimal decimal_0, Decimal decimal_1, Decimal decimal_2, Decimal decimal_3)
        {
            STAT_BOOL("TOTAL_TIME_MAX_STARS", (float)(decimal_0 * new Decimal(86400000) + decimal_1 * new Decimal(3600000) + decimal_2 * new Decimal(60000) + decimal_3 * new Decimal(1000)), 1);
        }

        private void PedHeadsh(string string_2)
        {
            STAT_INT("HEADSHOTS", Convert.ToInt32(string_2), 1);
        }
        #endregion

        #region Teleport
        public static Dictionary<double[], TpData> Locations = new Dictionary<double[], TpData>()
        {
            { new double[] { 1705.173, 3747.373, 33.922 }, new TpData("Sandy Shores", "Ammunation") },
            { new double[] { 234.312, -42.553, 69.676 }, new TpData("Hawick", "Ammunation") },
            { new double[] { 843.569, -1018.228, 27.561 }, new TpData("La Mesa", "Ammunation") },
            { new double[] { -320.263, 6071.031, 31.337 }, new TpData("Paleto Bay", "Ammunation") },
            { new double[] { -663.388, -950.879, 21.399 }, new TpData("Little Seoul", "Ammunation") },
            { new double[] { -1324.082, -388.411, 36.545 }, new TpData("Morningwood", "Ammunation") },
            { new double[] { -1108.773, 2685.568, 18.875 }, new TpData("Great Chaparral", "Ammunation") },
            { new double[] { -3158.208, 1078.877, 20.691 }, new TpData("Chumash", "Ammunation") },
            { new double[] { 2568.549, 313.032, 108.461 }, new TpData("Tataviam", "Ammunation") },
            { new double[] { 15.288, -1122.648, 28.816 }, new TpData("Pillbox Hill", "Ammunation") },
            { new double[] { 812.893, -2139.652, 29.292 }, new TpData("Cypress Flats", "Ammunation") },

            { new double[] { -827.346, -190.451, 37.604 }, new TpData("Rockford Hills", "Barber Shop") },
            { new double[] { 130.348, -1715.111, 29.234 }, new TpData("Davis", "Barber Shop") },
            { new double[] { -1295.014, -1116.923, 6.655 }, new TpData("Vespucci", "Barber Shop") },
            { new double[] { 1936.458, 3720.811, 32.672 }, new TpData("Sandy Shores", "Barber Shop") },
            { new double[] { 1202.648, -470.297, 66.246 }, new TpData("Mirror Park", "Barber Shop") },
            { new double[] { -30.615, -142.411, 57.051 }, new TpData("Hawick", "Barber Shop") },
            { new double[] { -284.387, 6236.210, 31.460 }, new TpData("Paleto Bay", "Barber Shop") },

            { new double[] { 411.758, -808.082, 29.144 }, new TpData("Textile City", "Binco") },
            { new double[] { -814.987, -1083.856, 11.012 }, new TpData("Vespucci Canals", "Binco") },

            { new double[] { 89.663, -1390.938, 29.249 }, new TpData("Strawberry", "Discount") },
            { new double[] { 1678.675, 4821.034, 42.007 }, new TpData("Grapeseed", "Discount") },
            { new double[] { -1091.677, 2700.770, 19.625 }, new TpData("Great Chaparral", "Discount") },
            { new double[] { 1200.602, 2696.959, 37.927 }, new TpData("Senora Desert", "Discount") },
            { new double[] { -5.078, 6521.567, 31.270 }, new TpData("Paleto Bay", "Discount") },

            { new double[] { -365.425, -131.809, 37.873 }, new TpData("Burton", "LS Customs") },
            { new double[] { -1134.224, -1984.387, 13.166 }, new TpData("LS Airport", "LS Customs") },
            { new double[] { 709.797, -1082.649, 22.398 }, new TpData("La Mesa", "LS Customs") },
            { new double[] { 1178.653, 2666.179, 37.881 }, new TpData("Senora Desert", "LS Customs") },

            { new double[] { -718.441, -162.860, 37.013 }, new TpData("Rockford Hills", "Ponsonbys") },
            { new double[] { -150.952, -304.549, 38.925 }, new TpData("Burton", "Ponsonbys") },
            { new double[] { -1461.290, -226.524, 49.249 }, new TpData("Morningwood", "Ponsonbys") },

            { new double[] { -1209.446, -783.510, 17.169 }, new TpData("Del Perro", "Suburban") },
            { new double[] { 617.782, 2736.849, 41.999 }, new TpData("Harmony", "Suburban") },
            { new double[] { 130.452, -202.726, 54.505 }, new TpData("Harwick", "Suburban") },
            { new double[] { -3165.330, 1062.592, 20.840 }, new TpData("Chumash", "Suburban") },

            { new double[] { 318.079, 170.586, 103.767 }, new TpData("Downtown", "Tattoo") },
            { new double[] { 1853.978, 3745.352, 33.082 }, new TpData("Sandy Shores", "Tattoo") },
            { new double[] { -286.602, 6202.248, 31.322 }, new TpData("Paleto Bay", "Tattoo") },
            { new double[] { -1159.103, -1417.739, 4.706 }, new TpData("Vespucci Canals", "Tattoo") },
            { new double[] { 1319.359, -1643.693, 52.145 }, new TpData("El Burro Heights", "Tattoo") },
            { new double[] { -3162.709, 1071.733, 20.681 }, new TpData("Chumash", "Tattoo") },

            { new double[] { 126.219, 6608.142, 31.866 }, new TpData("Beekers Garage", "Miscellaneous") },
            { new double[] { -1339.926, -1279.063, 4.870 }, new TpData("Vespucci Movie Masks", "Miscellaneous") },
            { new double[] { -2012.8470, 2956.5270, 32.8101 }, new TpData("Fort Zancudo", "Miscellaneous") },
            { new double[] { -2356.0940, 3248.6450, 101.4505 }, new TpData("Fort Zancudo Tower", "Miscellaneous") },
            { new double[] { -74.94243, -818.63446, 326.174347 }, new TpData("Maze Bank Helipad", "Miscellaneous") },
            { new double[] { 369.4300, -1601.8320, 36.9502 }, new TpData("Police Helipad", "Miscellaneous") },
        };

        public class TpData
        {
            public string label { get; set; }
            public string grouping { get; set; }
            public TpData(string _label, string _grouping)
            {
                label = _label;
                grouping = _grouping;
            }
        }

        void teleport(double[] loc)
        {
            float[] nLoc = { (float)loc[0], (float)loc[1], (float)loc[2] };
            uint location = 0x10030000;
            byte[] XLocation = BitConverter.GetBytes(nLoc[0]);
            byte[] YLocation = BitConverter.GetBytes(nLoc[1]);
            byte[] ZLocation = BitConverter.GetBytes(nLoc[2]);
            Array.Reverse(XLocation);
            Array.Reverse(YLocation);
            Array.Reverse(ZLocation);
            byte[] buffer = new byte[] { XLocation[0], XLocation[1], XLocation[2], XLocation[3], YLocation[0], YLocation[1], YLocation[2], YLocation[3], ZLocation[0], ZLocation[1], ZLocation[2] };
            PS3.SetMemory(location, buffer);
            Thread.Sleep(10);
            ClassicRPC.NCall(NewNatives.DO_SCREEN_FADE_OUT, 400);
            Thread.Sleep(300);
            ClassicRPC.NCall(NewNatives.SET_ENTITY_COORDS, isInVehicle() ? vehid() : PLAYER_PED_ID(), location, 1, 0, 0, 1);
            Thread.Sleep(1000);
            ClassicRPC.NCall(NewNatives.DO_SCREEN_FADE_IN, 400);
        }

        void doubleToOffset(double[] loc)
        {
            float[] nLoc = { (float)loc[0], (float)loc[1], (float)loc[2] };
            uint location = 0x10030000;
            byte[] XLocation = BitConverter.GetBytes(nLoc[0]);
            byte[] YLocation = BitConverter.GetBytes(nLoc[1]);
            byte[] ZLocation = BitConverter.GetBytes(nLoc[2]);
            Array.Reverse(XLocation);
            Array.Reverse(YLocation);
            Array.Reverse(ZLocation);
            byte[] buffer = new byte[] { XLocation[0], XLocation[1], XLocation[2], XLocation[3], YLocation[0], YLocation[1], YLocation[2], YLocation[3], ZLocation[0], ZLocation[1], ZLocation[2] };
            PS3.SetMemory(location, buffer);
            Thread.Sleep(10);
        }

        public static int vehid()
        {
            return ClassicRPC.NCall(NewNatives.GET_VEHICLE_PED_IS_USING, PLAYER_PED_ID());
        }
        public static bool isInVehicle()
        {
            return Convert.ToBoolean(ClassicRPC.NCall(NewNatives.IS_PED_IN_ANY_VEHICLE, PLAYER_PED_ID()));
        }
        #endregion

        #region Tunables
        public static class Tunables
        {
            public static uint PTR_TUNABLES = 0x1E70374; // 1.26 // BLES
            public enum Indices : uint
            {
                // 1.26
                AMOUNT_TO_FORGIVE_BADSPORT_BY = 82,
                BADSPORT_RESET_MINUTES = 81,
                BAD_SPORT_QUITTING_EVENT_PLAYLIST = 4718,
                BAD_SPORT_QUITTING_PLAYLIST = 4717,
                BADSPORT_NUMDAYS_10TH_OFFENCE = 128,
                BADSPORT_NUMDAYS_1ST_OFFENCE = 119,
                BADSPORT_NUMDAYS_2ND_OFFENCE = 120,
                BADSPORT_NUMDAYS_3RD_OFFENCE = 121,
                BADSPORT_NUMDAYS_4TH_OFFENCE = 122,
                BADSPORT_NUMDAYS_5TH_OFFENCE = 123,
                BADSPORT_NUMDAYS_6TH_OFFENCE = 124,
                BADSPORT_NUMDAYS_7TH_OFFENCE = 125,
                BADSPORT_NUMDAYS_8TH_OFFENCE = 126,
                BADSPORT_NUMDAYS_9TH_OFFENCE = 127,
                BADSPORT_THRESHOLD = 79,
                BADSPORT_THRESHOLD_NOTCHEATER = 80,
                BADSPORTCHEAT_AUTOMUTE_PERCENT = 58,
                Car_impound_fee = 5978,
                DISABLE_CHRISTMAS_CLOTHING = 6884,
                DISABLE_CHRISTMAS_MASKS = 6885,
                DISABLE_CHRISTMAS_TREE_APARTMENT = 6883,
                DISABLE_CHRISTMAS_TREE_PERISHING_SQUARE = 6882,
                DISABLE_CHRISTMAS_TREE_PERISHING_SQUARE_SNOW = 6881,
                DISABLE_PV_DUPLICATE_FIX = 3649,
                DISABLE_SNOWBALLS = 6880,
                IDLEKICK_WARNING1 = 73,
                IDLEKICK_WARNING2 = 74,
                IDLEKICK_WARNING3 = 75,
                IDLEKICK_KICK = 76,
                INDEPENDENCE_DAY_DEACTIVATE_FIREWORKS_LAUNCHER = 6011,
                MAX_BET_LIMIT = 84,
                MAX_NUMBER_OF_SNOWBALLS = 6887,
                PICK_UP_NUMBER_OF_SNOWBALLS = 6888,
                PS_ELITAS_CHUTE_BAG = 6279,
                PS_EVENT_ITEM_HIGH_FLYER_CHUTE_BAG = 6281,
                PS_FLIGHT_SCHOOL_CHUTE_BAG = 6280,
                TOGGLE_ACTIVATE_INDEPENDENCE_PACK = 6003,
                Toggle_activate_Monster_truck = 6017,
                Toggle_activate_Western_sovereign = 6016,
                TOGGLE_CHRISTMAS_EVE_GIFT = 6935,
                TOGGLE_NEW_YEARS_DAY_GIFT = 6937,
                TOGGLE_NEW_YEARS_EVE_GIFT = 6936,
                TOGGLE_XMAS_CONTENT = 4724,
                TURN_ON_VALENTINES_EVENT = 4827,
                TURN_SNOW_ON_OFF = 4715,
                WEAPONS_INDEPENDENCEDAY_FIREWORKLAUNCHER_AMMO = 6031,
                INDEPENDENCE_DAY_DEACTIVATE_PLACED_FIREWORKS = 6012,
                SHOPPING_START = 59,
                SHOPPING_END = 69,
                KICK_VOTES_NEEDED_RATIO = 6,
                XP_MULTIPLIER = 1,
            };
            public static uint getTunableAddress(Indices index)
            {
                uint i = (uint)index;
                uint TunablesAddress = PS3.Extension.ReadUInt32(PTR_TUNABLES) + 4;
                if (TunablesAddress != 0)
                {
                    uint temp = TunablesAddress;
                    temp += (i * 4);
                    return temp;
                }
                return 0;
            }
            public static bool setTunable(Indices index, object value)
            {
                uint address = getTunableAddress(index);
                if (address != 0)
                {
                    if (value is int || value is uint || value is bool)
                    {
                        PS3.Extension.WriteInt32(address, Convert.ToInt32(value));
                    }
                    else if (value is float || value is long)
                    {
                        PS3.Extension.WriteFloat(address, (float)value);
                    }
                    return true;
                }
                return false;
            }
            public static int getTunableI(Indices index)
            {
                uint address = getTunableAddress(index);
                if (address != 0)
                {
                    return PS3.Extension.ReadInt32(address);
                }
                return 0;
            }
            public static float getTunableF(Indices index)
            {
                uint address = getTunableAddress(index);
                if (address != 0)
                {
                    return PS3.Extension.ReadFloat(address);
                }
                return 0;
            }
            public static bool getTunableB(Indices index)
            {
                uint address = getTunableAddress(index);
                if (address != 0)
                {
                    return PS3.Extension.ReadInt32(address) == 1;
                }
                return false;
            }
            public static void toggleTunable(Indices index, bool toggle)
            {
                setTunable(index, toggle);
            }
            public static void escapeBadsport()
            {
                setTunable(Indices.AMOUNT_TO_FORGIVE_BADSPORT_BY, Int32.MaxValue);
                setTunable(Indices.BADSPORT_RESET_MINUTES, 0);
                setTunable(Indices.BAD_SPORT_QUITTING_EVENT_PLAYLIST, 0);
                setTunable(Indices.BAD_SPORT_QUITTING_PLAYLIST, 0);
                setTunable(Indices.BADSPORT_NUMDAYS_10TH_OFFENCE, 0);
                setTunable(Indices.BADSPORT_NUMDAYS_1ST_OFFENCE, 0);
                setTunable(Indices.BADSPORT_NUMDAYS_2ND_OFFENCE, 0);
                setTunable(Indices.BADSPORT_NUMDAYS_3RD_OFFENCE, 0);
                setTunable(Indices.BADSPORT_NUMDAYS_4TH_OFFENCE, 0);
                setTunable(Indices.BADSPORT_NUMDAYS_5TH_OFFENCE, 0);
                setTunable(Indices.BADSPORT_NUMDAYS_6TH_OFFENCE, 0);
                setTunable(Indices.BADSPORT_NUMDAYS_7TH_OFFENCE, 0);
                setTunable(Indices.BADSPORT_NUMDAYS_8TH_OFFENCE, 0);
                setTunable(Indices.BADSPORT_NUMDAYS_9TH_OFFENCE, 0);
                setTunable(Indices.BADSPORT_THRESHOLD, 0);
                setTunable(Indices.BADSPORT_THRESHOLD_NOTCHEATER, 0);
                setTunable(Indices.BADSPORTCHEAT_AUTOMUTE_PERCENT, 0);
            }
            public static bool christmasWeather()
            {
                bool toggle = !getTunableB(Indices.TURN_SNOW_ON_OFF);
                toggleTunable(Indices.TURN_SNOW_ON_OFF, toggle);
                toggleTunable(Indices.DISABLE_CHRISTMAS_TREE_PERISHING_SQUARE_SNOW, !toggle);
                toggleTunable(Indices.DISABLE_CHRISTMAS_TREE_PERISHING_SQUARE, !toggle);
                toggleTunable(Indices.DISABLE_CHRISTMAS_TREE_APARTMENT, !toggle);
                toggleTunable(Indices.DISABLE_SNOWBALLS, !toggle);
                setTunable(Indices.MAX_NUMBER_OF_SNOWBALLS, toggle ? 255 : 0);
                setTunable(Indices.PICK_UP_NUMBER_OF_SNOWBALLS, toggle ? 255 : 0);
                return toggle;
            }
            public static bool idleKick()
            {
                bool toggle = getTunableI(Indices.IDLEKICK_KICK) != Int32.MaxValue;
                setTunable(Indices.IDLEKICK_KICK, toggle ? Int32.MaxValue : 900000);
                setTunable(Indices.IDLEKICK_WARNING3, toggle ? Int32.MaxValue : 600000);
                setTunable(Indices.IDLEKICK_WARNING2, toggle ? Int32.MaxValue : 300000);
                setTunable(Indices.IDLEKICK_WARNING1, toggle ? Int32.MaxValue : 120000);
                return toggle;
            }
            public static bool christmasDLC()
            {
                bool toggle = !getTunableB(Indices.TOGGLE_XMAS_CONTENT);
                toggleTunable(Indices.TOGGLE_XMAS_CONTENT, toggle);
                toggleTunable(Indices.DISABLE_CHRISTMAS_CLOTHING, !toggle);
                toggleTunable(Indices.DISABLE_CHRISTMAS_MASKS, !toggle);
                toggleTunable(Indices.TOGGLE_CHRISTMAS_EVE_GIFT, toggle);
                return toggle;
            }
            public static bool valentinesDLC()
            {
                bool toggle = !getTunableB(Indices.TURN_ON_VALENTINES_EVENT);
                toggleTunable(Indices.TURN_ON_VALENTINES_EVENT, !getTunableB(Indices.TURN_ON_VALENTINES_EVENT));
                return toggle;
            }
            public static bool independenceDLC()
            {
                bool toggle = !getTunableB(Indices.TOGGLE_ACTIVATE_INDEPENDENCE_PACK);
                toggleTunable(Indices.TOGGLE_ACTIVATE_INDEPENDENCE_PACK, toggle);
                toggleTunable(Indices.INDEPENDENCE_DAY_DEACTIVATE_FIREWORKS_LAUNCHER, !toggle);
                toggleTunable(Indices.Toggle_activate_Western_sovereign, toggle);
                toggleTunable(Indices.Toggle_activate_Monster_truck, toggle);
                toggleTunable(Indices.INDEPENDENCE_DAY_DEACTIVATE_PLACED_FIREWORKS, !toggle);
                return toggle;
            }
            public static void freeShopping(bool toggle)
            {
                for (Indices i = Indices.SHOPPING_START; i < Indices.SHOPPING_END; i++)
                {
                    setTunable(i, toggle ? 0 : 0x3F800000);
                }
            }

        }
        #endregion

        #region Tasks
        public static CancellationTokenSource tokenSource_0 = new CancellationTokenSource();
        public static CancellationTokenSource tokenSource_1 = new CancellationTokenSource();
        public static CancellationTokenSource tokenSource_2 = new CancellationTokenSource();
        public static CancellationTokenSource tokenSource_3 = new CancellationTokenSource();
        public static CancellationTokenSource tokenSource_4 = new CancellationTokenSource();
        public static CancellationTokenSource tokenSource_5 = new CancellationTokenSource();
        public static CancellationTokenSource tokenSource_6 = new CancellationTokenSource();
        public static CancellationTokenSource tokenSource_7 = new CancellationTokenSource();
        public static CancellationTokenSource tokenSource_8 = new CancellationTokenSource();
        public static CancellationTokenSource tokenSource_9 = new CancellationTokenSource();
        public static CancellationTokenSource tokenSource_10 = new CancellationTokenSource();
        public static CancellationTokenSource tokenSource_11 = new CancellationTokenSource();
        public static CancellationTokenSource tokenSource_12 = new CancellationTokenSource();
        public static CancellationTokenSource tokenSource_13 = new CancellationTokenSource();
        public static CancellationTokenSource tokenSource_14 = new CancellationTokenSource();
        public static CancellationTokenSource tokenSource_15 = new CancellationTokenSource();
        public static CancellationTokenSource tokenSource_16 = new CancellationTokenSource();

        public static CancellationToken token_0 = tokenSource_0.Token;
        public static CancellationToken token_1 = tokenSource_1.Token;
        public static CancellationToken token_2 = tokenSource_2.Token;
        public static CancellationToken token_3 = tokenSource_3.Token;
        public static CancellationToken token_4 = tokenSource_4.Token;
        public static CancellationToken token_5 = tokenSource_5.Token;
        public static CancellationToken token_6 = tokenSource_6.Token;
        public static CancellationToken token_7 = tokenSource_7.Token;
        public static CancellationToken token_8 = tokenSource_8.Token;
        public static CancellationToken token_9 = tokenSource_9.Token;
        public static CancellationToken token_10 = tokenSource_10.Token;
        public static CancellationToken token_11 = tokenSource_11.Token;
        public static CancellationToken token_12 = tokenSource_12.Token;
        public static CancellationToken token_13 = tokenSource_13.Token;
        public static CancellationToken token_14 = tokenSource_14.Token;
        public static CancellationToken token_15 = tokenSource_15.Token;
        public static CancellationToken token_16 = tokenSource_16.Token;
        
        private void TaskExplodeTalkingStart(bool toggle)
        {
            if (toggle == false)
            {
                tokenSource_0.Cancel();
            }
            if (toggle == true)
            {
                if (tokenSource_0.IsCancellationRequested == true)
                {
                    tokenSource_0 = new CancellationTokenSource();
                    token_0 = tokenSource_0.Token;
                }
                Task t0 = Task.Factory.StartNew(() =>
                {
                    while (!token_0.IsCancellationRequested)
                    {
                        for (int i = 0; i < 16; i++)
                        {
                            if (dataGridView6.Rows[i].Cells[1].Value.ToString() != "")
                            {
                                int PED = GET_PLAYER_PED(i);
                                if (PED != PLAYER_PED_ID())
                                {
                                    float[] coord = GET_ENTITY_COORDS(PED);
                                    owned_explosion(PED, coord, 5);
                                }
                            }
                        }
                    }
                }, token_0);
            }
        }

        private void TaskDisableActionsTalkingStart(bool toggle)
        {
            if (toggle == false)
            {
                tokenSource_1.Cancel();
            }
            if (toggle == true)
            {
                if (tokenSource_1.IsCancellationRequested == true)
                {
                    tokenSource_1 = new CancellationTokenSource();
                    token_1 = tokenSource_1.Token;
                }
                Task t1 = Task.Factory.StartNew(() =>
                {
                    while (!token_1.IsCancellationRequested)
                    {
                        for (int i = 0; i < 16; i++)
                        {
                            if (dataGridView6.Rows[i].Cells[1].Value.ToString() != "")
                            {
                                int PED = GET_PLAYER_PED(i);
                                if (PED != PLAYER_PED_ID())
                                {
                                    CLEAR_PED_TASKS_IMMEDIATLY(PED);
                                }
                            }
                        }
                    }
                }, token_1);
            }
        }

        private void TaskFiveStarsTalkingStart(bool toggle)
        {
            if (toggle == false)
            {
                tokenSource_2.Cancel();
            }
            if (toggle == true)
            {
                if (tokenSource_2.IsCancellationRequested == true)
                {
                    tokenSource_2 = new CancellationTokenSource();
                    token_2 = tokenSource_2.Token;
                }
                Task t2 = Task.Factory.StartNew(() =>
                {
                    while (!token_2.IsCancellationRequested)
                    {
                        for (int i = 0; i < 16; i++)
                        {
                            if (dataGridView6.Rows[i].Cells[1].Value.ToString() != "")
                            {
                                int PED = GET_PLAYER_PED(i);
                                if (PED != PLAYER_PED_ID())
                                {
                                    GiveFiveStars(PED);
                                }
                            }
                        }
                    }
                }, token_2);
            }
        }

        private void TaskTrapCageTalkingStart(bool toggle)
        {
            if (toggle == false)
            {
                tokenSource_3.Cancel();
            }
            if (toggle == true)
            {
                if (tokenSource_3.IsCancellationRequested == true)
                {
                    tokenSource_3 = new CancellationTokenSource();
                    token_3 = tokenSource_3.Token;
                }
                Task t3 = Task.Factory.StartNew(() =>
                {
                    while (!token_3.IsCancellationRequested)
                    {
                        for (int i = 0; i < 16; i++)
                        {
                            if (dataGridView6.Rows[i].Cells[1].Value.ToString() != "")
                            {
                                int PED = GET_PLAYER_PED(i);
                                if (PED != PLAYER_PED_ID())
                                {
                                    Functions.RPCFunc.CLEAR_PED_TASKS_IMMEDIATLY(PED);
                                    float[] Coords = GET_ENTITY_COORDS(PED);
                                    Coords[2] += -1;
                                    Functions.RPCFunc.CLEAR_PED_TASKS_IMMEDIATLY(PED);
                                    Functions.RPCFunc.CREATE_OBJECT_NEW(0x392D62AA, Coords);
                                }
                            }
                        }
                    }
                }, token_3);
            }
        }

        private void TaskCloneTalkingStart(bool toggle)
        {
            if (toggle == false)
            {
                tokenSource_4.Cancel();
            }
            if (toggle == true)
            {
                if (tokenSource_4.IsCancellationRequested == true)
                {
                    tokenSource_4 = new CancellationTokenSource();
                    token_4 = tokenSource_4.Token;
                }
                Task t4 = Task.Factory.StartNew(() =>
                {
                    while (!token_4.IsCancellationRequested)
                    {
                        for (int i = 0; i < 16; i++)
                        {
                            if (dataGridView6.Rows[i].Cells[1].Value.ToString() != "")
                            {
                                int PED = GET_PLAYER_PED(i);
                                if (PED != PLAYER_PED_ID())
                                {
                                    Functions.RPCFunc.CLONE_PED(PED);
                                }
                            }
                        }
                    }
                }, token_4);
            }
        }

        private void TaskSenEnemySwatTalkingStart(bool toggle)
        {
            if (toggle == false)
            {
                tokenSource_5.Cancel();
            }
            if (toggle == true)
            {
                if (tokenSource_5.IsCancellationRequested == true)
                {
                    tokenSource_5 = new CancellationTokenSource();
                    token_5 = tokenSource_5.Token;
                }
                Task t5 = Task.Factory.StartNew(() =>
                {
                    while (!token_5.IsCancellationRequested)
                    {
                        for (int i = 0; i < 16; i++)
                        {
                            if (dataGridView6.Rows[i].Cells[1].Value.ToString() != "")
                            {
                                int PED = GET_PLAYER_PED(i);
                                if (PED != PLAYER_PED_ID())
                                {
                                    int hashKeysprx1 = GET_HASH_KEYSPRX("S_M_Y_SWAT_01");
                                    int hashKeysprx2 = GET_HASH_KEYSPRX("WEAPON_CARBINERIFLE");
                                    float[] Coords = GET_ENTITY_COORDS(PED);
                                    Coords[0] -= 10f;
                                    REQUEST_MODEL(hashKeysprx1);
                                    int Ent = CREATE_PED(hashKeysprx1, Coords);
                                    Application.DoEvents();
                                    Thread.Sleep(200);
                                    GIVE_DELAYED_WEAPON_TO_PED(EntityCreated2[aaa], hashKeysprx2);
                                    SET_PED_AS_ENEMY(PED);
                                    SET_ENTITY_IS_TARGET_PRIORITY(PED);
                                    SET_PED_SHOOT_RATE(Ent);
                                    ADD_ARMOUR_TO_PED(Ent, 100);
                                    TASK_SHOOT_AT_ENTITY(Ent, PED);
                                    TASK_COMBAT_PED(Ent, PED);
                                    SET_PED_KEEP_TASK(Ent);
                                }
                            }
                        }
                    }
                }, token_5);
            }
        }

        private void TaskSenEnemyBuzzardTalkingStart(bool toggle)
        {
            if (toggle == false)
            {
                tokenSource_6.Cancel();
            }
            if (toggle == true)
            {
                if (tokenSource_6.IsCancellationRequested == true)
                {
                    tokenSource_6 = new CancellationTokenSource();
                    token_6 = tokenSource_6.Token;
                }
                Task t6 = Task.Factory.StartNew(() =>
                {
                    while (!token_6.IsCancellationRequested)
                    {
                        for (int i = 0; i < 16; i++)
                        {
                            if (dataGridView6.Rows[i].Cells[1].Value.ToString() != "")
                            {
                                int PED = GET_PLAYER_PED(i);
                                if (PED != PLAYER_PED_ID())
                                {
                                    int hashKey1 = GET_HASH_KEY("BUZZARD");
                                    int hashKey2 = GET_HASH_KEY("S_M_Y_SWAT_01");
                                    int hashKey3 = GET_HASH_KEY("WEAPON_APPISTOL");
                                    int group = CREATE_GROUP(0);
                                    float[] PEDCoords = GET_ENTITY_COORDS(PED);
                                    PEDCoords[1] -= 15f;

                                    REQUEST_MODEL(hashKey1);

                                    float[] entityCoords2 = GET_ENTITY_COORDS(PED);

                                    Random random = new Random();
                                    entityCoords2[0] += (float)random.Next(-Convert.ToInt32(8f), Convert.ToInt32(8f));
                                    entityCoords2[1] += (float)random.Next(-Convert.ToInt32(8f), Convert.ToInt32(8f));
                                    entityCoords2[2] += Convert.ToSingle(30f);
                                    zzz[sss] = CREATE_VEHICLE2(hashKey1, entityCoords2);
                                    Thread.Sleep(50);

                                    RPCHook.Call2<int>(OLDNatives.SET_VEHICLE_ENGINE_ON, (object)zzz[sss], (object)1, (object)1);

                                    RPCHook.Call2<int>(OLDNatives.SET_HELI_BLADES_FULL_SPEED, (object)zzz[sss]);

                                    REQUEST_MODEL(hashKey2);

                                    EntityCreated2[aaa] = CREATE_PED(hashKey2, PEDCoords);
                                    Application.DoEvents();

                                    SET_PED_INTO_VEHICLE(EntityCreated2[aaa], zzz[sss], -1);
                                    SET_PED_AS_GROUP_LEADER(EntityCreated2[aaa], group);
                                    GIVE_DELAYED_WEAPON_TO_PED(EntityCreated2[aaa], hashKey3);
                                    SET_PED_AS_ENEMY(PED);
                                    SET_ENTITY_IS_TARGET_PRIORITY(PED);
                                    SET_PED_SHOOT_RATE(EntityCreated2[aaa]);
                                    SET_PED_ARMOUR(EntityCreated2[aaa]);
                                    ADD_ARMOUR_TO_PED(EntityCreated2[aaa], 100);
                                    SET_PED_COMBAT_ABILITY(EntityCreated2[aaa]);
                                    SET_PED_COMBAT_RANGE(EntityCreated2[aaa]);
                                    SET_PED_ACCURACY(EntityCreated2[aaa]);
                                    SET_DRIVER_ABILITY(EntityCreated2[aaa]);
                                    SET_DRIVER_AGGRESSIVENESS(EntityCreated2[aaa]);
                                    SET_PED_AS_ENEMY(PED);
                                    SET_ENTITY_IS_TARGET_PRIORITY(PED);
                                    TASK_SHOOT_AT_ENTITY(EntityCreated2[aaa], PED);
                                    TASK_COMBAT_PED(EntityCreated2[aaa], PED);
                                }
                            }
                        }
                    }
                }, token_6);
            }
        }

        private void TaskSendMessageTalkingStart(bool toggle)
        {
            if (toggle == false)
            {
                tokenSource_7.Cancel();
            }
            if (toggle == true)
            {
                if (tokenSource_7.IsCancellationRequested == true)
                {
                    tokenSource_7 = new CancellationTokenSource();
                    token_7 = tokenSource_7.Token;
                }
                Task t7 = Task.Factory.StartNew(() =>
                {
                    while (!token_7.IsCancellationRequested)
                    {
                        for (int i = 0; i < 16; i++)
                        {
                            if (dataGridView6.Rows[i].Cells[1].Value.ToString() != "")
                            {
                                RPC3.Call(Natives.NETWORK_HANDLE_FROM_PLAYER, i, 268632064, 13);
                                RPC3.Call(Natives.NETWORK_SEND_TEXT_MESSAGE, ("~r~Using PylezZo Tool: ~w~" + memoEdit2.Text), 268632064);
                            }
                        }
                    }
                }, token_7);
            }
        }

        private void TaskSpawnObjectTalkingStart(bool toggle)
        {
            if (toggle == false)
            {
                tokenSource_8.Cancel();
            }
            if (toggle == true)
            {
                if (tokenSource_8.IsCancellationRequested == true)
                {
                    tokenSource_8 = new CancellationTokenSource();
                    token_8 = tokenSource_8.Token;
                }
                Task t8 = Task.Factory.StartNew(() =>
                {
                    while (!token_8.IsCancellationRequested)
                    {
                        for (int i = 0; i < 16; i++)
                        {
                            if (dataGridView6.Rows[i].Cells[1].Value.ToString() != "")
                            {
                                uint objhash = Functions.RPCFunc.STRINGHASH(comboBoxEdit29.Text);
                                float[] coords = GET_ENTITY_COORDS(GET_PLAYER_PED(i));
                                int obj = Functions.RPCFunc.CREATE_OBJECT(objhash, coords);
                            }
                        }
                    }
                }, token_8);
            }
        }
        
        private void TaskSpawnPedTalkingStart(bool toggle)
        {
            if (toggle == false)
            {
                tokenSource_9.Cancel();
            }
            if (toggle == true)
            {
                if (tokenSource_9.IsCancellationRequested == true)
                {
                    tokenSource_9 = new CancellationTokenSource();
                    token_9 = tokenSource_9.Token;
                }
                Task t9 = Task.Factory.StartNew(() =>
                {
                    while (!token_9.IsCancellationRequested)
                    {
                        for (int i = 0; i < 16; i++)
                        {
                            if (dataGridView6.Rows[i].Cells[1].Value.ToString() != "")
                            {
                                if (checkEdit7.Checked)
                                {
                                    Random rand = new Random();
                                    int randomobj = rand.Next(0, comboBoxEdit29.Properties.Items.Count - 1);
                                    float[] coord = GET_ENTITY_COORDS(GET_PLAYER_PED(i));
                                    CREATE_PED_2(comboBoxEdit29.Properties.Items[randomobj].ToString(), coord);
                                }
                                else
                                {
                                    float[] coord = GET_ENTITY_COORDS(GET_PLAYER_PED(i));
                                    CREATE_PED_2(comboBoxEdit29.Text, coord);
                                }
                            }
                        }
                    }
                }, token_9);
            }
        }

        private void TaskRefreshInfoStart(bool toggle)
        {
            if (toggle == false)
            {
                tokenSource_10.Cancel();
            }
            if (toggle == true)
            {
                if (tokenSource_10.IsCancellationRequested == true)
                {
                    tokenSource_10 = new CancellationTokenSource();
                    token_10 = tokenSource_10.Token;
                }
                Task t10 = Task.Factory.StartNew(() =>
                {
                    while (!token_10.IsCancellationRequested)
                    {
                        for (int index = 0; index < 16; ++index)
                        {
                            string str = GET_PLAYER_NAME(index);
                            if (str == "**Invalid**")
                            {
                                dataGridView1.Rows[index].Cells[0].Value = " -----";
                            }
                            else
                            {
                                dataGridView1.Rows[index].Cells[0].Value = " " + str;
                                int num = GET_PLAYER_PED(index);
                                if (IS_PED_IN_ANY_VEHICLE(num) != 0)
                                    dataGridView1.Rows[index].Cells[1].Value = " In Vehicle";
                                else
                                    dataGridView1.Rows[index].Cells[1].Value = " -----";
                            }
                        }

                        GetHost2();
                        Thread.Sleep(20);
                    }
                }, token_10);
            }
        }

        private void TaskRefreshInfo2Start(bool toggle)
        {
            if (toggle == false)
            {
                tokenSource_11.Cancel();
            }
            if (toggle == true)
            {
                if (tokenSource_11.IsCancellationRequested == true)
                {
                    tokenSource_11 = new CancellationTokenSource();
                    token_11 = tokenSource_11.Token;
                }
                Task t11 = Task.Factory.StartNew(() =>
                {
                    while (!token_11.IsCancellationRequested)
                    {
                        for (int index = 0; index < 16; ++index)
                        {
                            string str = GET_PLAYER_NAME(index);
                            if (str == "**Invalid**")
                            {
                                dataGridView2.Rows[index].Cells[0].Value = " -----";
                            }
                            else
                            {
                                dataGridView2.Rows[index].Cells[0].Value = " " + str;
                                int num = GET_PLAYER_PED(index);
                                if (IS_PED_IN_ANY_VEHICLE(num) != 0)
                                    dataGridView2.Rows[index].Cells[1].Value = " In Vehicle";
                                else
                                    dataGridView2.Rows[index].Cells[1].Value = " -----";
                            }
                        }

                        GetHost4();
                        Thread.Sleep(20);
                    }
                }, token_11);
            }
        }

        private void TaskRefreshInfo4Start(bool toggle)
        {
            if (toggle == false)
            {
                tokenSource_12.Cancel();
            }
            if (toggle == true)
            {
                if (tokenSource_12.IsCancellationRequested == true)
                {
                    tokenSource_12 = new CancellationTokenSource();
                    token_12 = tokenSource_12.Token;
                }
                Task t12 = Task.Factory.StartNew(() =>
                {
                    while (!token_12.IsCancellationRequested)
                    {
                        for (int index = 0; index < 16; ++index)
                        {
                            string str = GET_PLAYER_NAME(index);
                            if (str == "**Invalid**")
                            {
                                dataGridView4.Rows[index].Cells[0].Value = " -----";
                                comboBoxEdit96.Properties.Items.Insert(index, "-----");
                            }
                            else
                            {
                                dataGridView4.Rows[index].Cells[0].Value = " " + str;
                                comboBoxEdit96.Properties.Items.Insert(index, str);
                                int num = GET_PLAYER_PED(index);
                                if (IS_PED_IN_ANY_VEHICLE(num) != 0)
                                    dataGridView4.Rows[index].Cells[1].Value = " In Vehicle";
                                else
                                    dataGridView4.Rows[index].Cells[1].Value = " -----";
                            }
                        }

                        GetHost6();
                        Thread.Sleep(20);
                    }
                }, token_12);
            }
        }

        private void TaskRefreshInfo6Start(bool toggle)
        {
            if (toggle == false)
            {
                tokenSource_13.Cancel();
            }
            if (toggle == true)
            {
                if (tokenSource_13.IsCancellationRequested == true)
                {
                    tokenSource_13 = new CancellationTokenSource();
                    token_13 = tokenSource_13.Token;
                }
                Task t13 = Task.Factory.StartNew(() =>
                {
                    while (!token_13.IsCancellationRequested)
                    {
                        for (int index = 0; index < 16; ++index)
                        {
                            string str = GET_PLAYER_NAME(index);
                            if (str == "**Invalid**")
                            {
                                dataGridView6.Rows[index].Cells[0].Value = " -----";
                            }
                            else
                            {
                                dataGridView6.Rows[index].Cells[0].Value = " " + str;
                                if (ClassicRPC.NCall(NewNatives.NETWORK_IS_PLAYER_TALKING, new object[] { index }) != 0)
                                {
                                    dataGridView6.Rows[index].Cells[1].Value = " Talking";
                                }
                                else
                                {
                                    dataGridView6.Rows[index].Cells[1].Value = "";
                                }
                            }
                        }
                    }
                }, token_13);
            }
        }
        #endregion

        #region Temperature
        private static Thread thread_15;
        private static ThreadStart threadStart_15;
        private static bool bool_15 = false;
        private static Thread thread_16;
        private static ThreadStart threadStart_16;
        private static bool bool_16 = false;
        private static Thread thread_17;
        private static ThreadStart threadStart_17;
        private static bool bool_17 = false;

        private void AutoRefreshTempStart(bool toggle)
        {
            if (threadStart_15 == null)
            {
                threadStart_15 = new ThreadStart(AutoRefreshTempFunct);
            }
            thread_15 = new Thread(threadStart_15);
            try
            {
                if (toggle)
                {
                    bool_15 = true;
                    thread_15.Start();
                }
                else
                {
                    bool_15 = false;
                    thread_15.Abort();
                }
            }
            catch
            {

            }
        }

        private void AutoRefreshTempFooterStart(bool toggle)
        {
            if (threadStart_16 == null)
            {
                threadStart_16 = new ThreadStart(AutoRefreshTempFooterFunct);
            }
            thread_16 = new Thread(threadStart_16);
            try
            {
                if (toggle)
                {
                    bool_16 = true;
                    thread_16.Start();
                }
                else
                {
                    bool_16 = false;
                    thread_16.Abort();
                }
            }
            catch
            {

            }
        }

        private void TempAlertStart(bool toggle)
        {
            if (threadStart_17 == null)
            {
                threadStart_17 = new ThreadStart(TempAlertFunct);
            }
            thread_17 = new Thread(threadStart_17);
            try
            {
                if (toggle)
                {
                    bool_17 = true;
                    thread_17.Start();
                }
                else
                {
                    bool_17 = false;
                    thread_17.Abort();
                }
            }
            catch
            {

            }
        }

        private void AutoRefreshTempFunct()
        {
            while (bool_15)
            {
                PS3.CCAPI.ClearTargetInfo();
                labelControl5.Text = PS3.CCAPI.GetFirmwareType();
                labelControl6.Text = PS3.CCAPI.GetFirmwareVersion();
                labelControl8.Text = PS3.CCAPI.GetTemperatureRSX();
                labelControl7.Text = PS3.CCAPI.GetTemperatureCELL();
            }
        }

        private void TaskAutoRefreshTempStart(bool toggle)
        {
            if (toggle == false)
            {
                tokenSource_14.Cancel();
            }
            if (toggle == true)
            {
                if (tokenSource_14.IsCancellationRequested == true)
                {
                    tokenSource_14 = new CancellationTokenSource();
                    token_14 = tokenSource_14.Token;
                }
                Task t14 = Task.Factory.StartNew(() =>
                {
                    while (!token_14.IsCancellationRequested)
                    {
                        PS3.CCAPI.ClearTargetInfo();
                        labelControl5.Text = PS3.CCAPI.GetFirmwareType();
                        labelControl6.Text = PS3.CCAPI.GetFirmwareVersion();
                        labelControl8.Text = PS3.CCAPI.GetTemperatureRSX();
                        labelControl7.Text = PS3.CCAPI.GetTemperatureCELL();
                    }
                }, token_14);
            }
        }

        private void AutoRefreshTempFooterFunct()
        {
            while (bool_16)
            {
                PS3.CCAPI.ClearTargetInfo();
                string rsx = PS3.CCAPI.GetTemperatureRSX();
                string cell = PS3.CCAPI.GetTemperatureCELL();
                barStaticItem1.Caption = "CPU Temp: " + rsx + "  -  CELL Temp: " + cell;
            }
        }

        private void TaskAutoRefreshTempFooterStart(bool toggle)
        {
            if (toggle == false)
            {
                tokenSource_15.Cancel();
            }
            if (toggle == true)
            {
                if (tokenSource_15.IsCancellationRequested == true)
                {
                    tokenSource_15 = new CancellationTokenSource();
                    token_15 = tokenSource_15.Token;
                }
                Task t15 = Task.Factory.StartNew(() =>
                {
                    while (!token_15.IsCancellationRequested)
                    {
                        PS3.CCAPI.ClearTargetInfo();
                        string rsx = PS3.CCAPI.GetTemperatureRSX();
                        string cell = PS3.CCAPI.GetTemperatureCELL();
                        barStaticItem1.Caption = "CPU Temp: " + rsx + "  -  CELL Temp: " + cell;
                    }
                }, token_15);
            }
        }

        private void TempAlertFunct()
        {
            while (bool_17)
            {
                PS3.CCAPI.ClearTargetInfo();
                string rsx = PS3.CCAPI.GetTemperatureRSX();
                string cell = PS3.CCAPI.GetTemperatureCELL();
                
                if (Temperature == "OK")
                {
                    if (rsx == "72" || rsx == "73" || cell == "72" || cell == "73")
                    {
                        Temp.FirstWarning frs = new Temp.FirstWarning();
                        frs.Show();
                        Temperature = "Danger";
                    }
                }
                if (Temperature == "Danger")
                {
                    if (rsx == "75" || rsx == "76" || cell == "75" || cell == "76")
                    {
                        Temp.FirstWarning frs = new Temp.FirstWarning();
                        frs.Show();
                        Temperature = "Fuck";
                        thread_16.Abort();
                        bool_16 = false;
                        checkButton23.Checked = false;
                        checkButton23.Text = "Temperature Alert [OFF]";
                        checkButton23.ResetBackColor();
                    }
                }
            }
        }

        private void TaskTempAlertStart(bool toggle)
        {
            if (toggle == false)
            {
                tokenSource_16.Cancel();
            }
            if (toggle == true)
            {
                if (tokenSource_16.IsCancellationRequested == true)
                {
                    tokenSource_16 = new CancellationTokenSource();
                    token_16 = tokenSource_16.Token;
                }
                Task t16 = Task.Factory.StartNew(() =>
                {
                    while (!token_16.IsCancellationRequested)
                    {
                        PS3.CCAPI.ClearTargetInfo();
                        string rsx = PS3.CCAPI.GetTemperatureRSX();
                        string cell = PS3.CCAPI.GetTemperatureCELL();

                        if (Temperature == "OK")
                        {
                            if (rsx == "72" || rsx == "73" || cell == "72" || cell == "73")
                            {
                                Temp.FirstWarning frs = new Temp.FirstWarning();
                                frs.Show();
                                Temperature = "Danger";
                            }
                        }
                        if (Temperature == "Danger")
                        {
                            if (rsx == "75" || rsx == "76" || cell == "75" || cell == "76")
                            {
                                Temp.FirstWarning frs = new Temp.FirstWarning();
                                frs.Show();
                                Temperature = "Fuck";
                                thread_16.Abort();
                                bool_16 = false;
                                checkButton23.Checked = false;
                                checkButton23.Text = "Temperature Alert [OFF]";
                                checkButton23.ResetBackColor();
                            }
                        }
                    }
                }, token_16);
            }
        }
        #endregion

        #region GetPlayers
        public string GetName(int ClientNum)
        {
            string str = PS3.Extension.ReadString((uint)RPC3.Call(OLDNatives.GET_PLAYER_NAME, (object)ClientNum));
            if (str == "**Invalid**")
            {
                str = " -----";
            }
            return str;
        }

        public string GetInVehicle(int ClientNum)
        {
            string str;
            int num = RPC3.Call(OLDNatives.GET_PLAYER_PED, (object)ClientNum);
            if (RPC3.Call(OLDNatives.IS_PED_IN_ANY_VEHICLE, (object)num) > 0)
                str = " In Vehicle";
            else
                str = "";

            return str;
        }

        private void GetHost2()
        {
            for (int index = 0; index < 16; ++index)
            {
                if (ClassicRPC.NCall(NewNatives.NETWORK_GET_HOST_OF_SCRIPT, (object)"Freemode", (object)-1, (object)0) == index)
                    dataGridView1.Rows[index].Cells[2].Value = " Host";
                else
                    dataGridView1.Rows[index].Cells[2].Value = "";
            }
        }

        private void GetHost4()
        {
            for (int index = 0; index < 16; ++index)
            {
                if (ClassicRPC.NCall(NewNatives.NETWORK_GET_HOST_OF_SCRIPT, (object)"Freemode", (object)-1, (object)0) == index)
                    dataGridView2.Rows[index].Cells[2].Value = " Host";
                else
                    dataGridView2.Rows[index].Cells[2].Value = "";
            }
        }

        private void GetHost6()
        {
            for (int index = 0; index < 16; ++index)
            {
                if (ClassicRPC.NCall(NewNatives.NETWORK_GET_HOST_OF_SCRIPT, (object)"Freemode", (object)-1, (object)0) == index)
                    dataGridView4.Rows[index].Cells[2].Value = " Host";
                else
                    dataGridView4.Rows[index].Cells[2].Value = "";
            }
        }
        #endregion

        #region Functions
        public void EnableDG1Buttons()
        {
            simpleButton123.Enabled = true;
            simpleButton113.Enabled = true;
            simpleButton128.Enabled = true;
            simpleButton120.Enabled = true;
            simpleButton90.Enabled = true;
            simpleButton169.Enabled = true;
            simpleButton122.Enabled = true;
            simpleButton130.Enabled = true;
            simpleButton105.Enabled = true;
            simpleButton103.Enabled = true;
            simpleButton96.Enabled = true;
            simpleButton104.Enabled = true;
            simpleButton114.Enabled = true;
            simpleButton95.Enabled = true;
            simpleButton93.Enabled = true;
            simpleButton131.Enabled = true;
            checkButton55.Enabled = true;
            checkButton56.Enabled = true;
            checkButton57.Enabled = true;
            checkButton60.Enabled = true;
            simpleButton111.Enabled = true;
            simpleButton110.Enabled = true;
            simpleButton107.Enabled = true;
            simpleButton109.Enabled = true;
            simpleButton112.Enabled = true;
            simpleButton126.Enabled = true;
            simpleButton127.Enabled = true;
            simpleButton133.Enabled = true;
            simpleButton129.Enabled = true;
            simpleButton94.Enabled = true;
            checkButton58.Enabled = true;
            checkEdit44.Enabled = true;
        }
        public void DisableDG1Buttons()
        {
            simpleButton123.Enabled = false;
            simpleButton113.Enabled = false;
            simpleButton128.Enabled = false;
            simpleButton120.Enabled = false;
            simpleButton90.Enabled = false;
            simpleButton169.Enabled = false;
            simpleButton122.Enabled = false;
            simpleButton130.Enabled = false;
            simpleButton105.Enabled = false;
            simpleButton103.Enabled = false;
            simpleButton96.Enabled = false;
            simpleButton104.Enabled = false;
            simpleButton114.Enabled = false;
            simpleButton95.Enabled = false;
            simpleButton93.Enabled = false;
            simpleButton131.Enabled = false;
            checkButton55.Enabled = false;
            checkButton56.Enabled = false;
            checkButton57.Enabled = false;
            checkButton60.Enabled = false;
            simpleButton111.Enabled = false;
            simpleButton110.Enabled = false;
            simpleButton107.Enabled = false;
            simpleButton109.Enabled = false;
            simpleButton112.Enabled = false;
            simpleButton126.Enabled = false;
            simpleButton127.Enabled = false;
            simpleButton133.Enabled = false;
            simpleButton129.Enabled = false;
            simpleButton94.Enabled = false;
            checkButton58.Enabled = false;
            checkEdit44.Enabled = false;
        }

        public void EnableDG2Buttons()
        {
            simpleButton135.Enabled = true;
            simpleButton137.Enabled = true;
            simpleButton148.Enabled = true;
            simpleButton149.Enabled = true;
        }

        public void DisableDG2Buttons()
        {
            simpleButton135.Enabled = false;
            simpleButton137.Enabled = false;
            simpleButton148.Enabled = false;
            simpleButton149.Enabled = false;
        }

        public void EnableDG3Buttons()
        {
            simpleButton136.Enabled = true;
            simpleButton151.Enabled = true;
            simpleButton150.Enabled = true;
            simpleButton159.Enabled = true;
            simpleButton163.Enabled = true;
            checkButton62.Enabled = true;
            checkButton63.Enabled = true;
            checkButton64.Enabled = true;
        }

        public void DisableDG3Buttons()
        {
            simpleButton136.Enabled = false;
            simpleButton151.Enabled = false;
            simpleButton150.Enabled = false;
            simpleButton159.Enabled = false;
            simpleButton163.Enabled = false;
            checkButton62.Enabled = false;
            checkButton63.Enabled = false;
            checkButton64.Enabled = false;
        }

        public void EnableDG4Buttons()
        {
            simpleButton139.Enabled = true;
            simpleButton154.Enabled = true;
            simpleButton140.Enabled = true;
            simpleButton141.Enabled = true;
            simpleButton156.Enabled = true;
            simpleButton157.Enabled = true;
        }

        public void DisableDG4Buttons()
        {
            simpleButton139.Enabled = false;
            simpleButton154.Enabled = false;
            simpleButton140.Enabled = false;
            simpleButton141.Enabled = false;
            simpleButton156.Enabled = false;
            simpleButton157.Enabled = false;
        }

        public void EnableDG5Buttons()
        {
            simpleButton147.Enabled = true;
            simpleButton162.Enabled = true;
            simpleButton160.Enabled = true;
            simpleButton153.Enabled = true;
            simpleButton166.Enabled = true;
        }

        public void DisableDG5Buttons()
        {
            simpleButton147.Enabled = false;
            simpleButton162.Enabled = false;
            simpleButton160.Enabled = false;
            simpleButton153.Enabled = false;
            simpleButton166.Enabled = false;
        }

        public void EnableDG6Buttons()
        {
            checkButton68.Enabled = true;
            checkButton69.Enabled = true;
            checkButton70.Enabled = true;
            checkButton71.Enabled = true;
            checkButton72.Enabled = true;
            checkButton73.Enabled = true;
            checkButton74.Enabled = true;
            checkButton75.Enabled = true;
            checkButton76.Enabled = true;
            checkButton77.Enabled = true;
        }

        public void DisableDG6Buttons()
        {
            checkButton68.Enabled = false;
            checkButton69.Enabled = false;
            checkButton70.Enabled = false;
            checkButton71.Enabled = false;
            checkButton72.Enabled = false;
            checkButton73.Enabled = false;
            checkButton74.Enabled = false;
            checkButton75.Enabled = false;
            checkButton76.Enabled = false;
            checkButton77.Enabled = false;
        }

        public static void SetPedAsBodyguard(int Ped)
        {
            int my_group = Functions.RPCFunc.GET_PLAYER_GROUP(PLAYER_ID());
            SET_PED_AS_GROUP_LEADER(PLAYER_PED_ID(), my_group);
            SET_PED_AS_GROUP_MEMBER(Ped, my_group);
            SET_PED_COMBAT_ABILITY(Ped);
            SET_PED_CAN_SWITCH_WEAPON2(Ped, false);
        }

        public static void Owned_Explosion(int killerID, float[] coords, int type)
        {
            ClassicRPC.NCall(NewNatives.ADD_OWNED_EXPLOSION, (object)killerID, (object)coords, (object)type, (object)7f, (object)1, (object)1, (object)10f);
        }

        private static void SetModel(string model)
        {
            int num1 = RPCHook.Call(OLDNatives.PLAYER_ID);
            uint hash = Functions.RPCFunc.STRINGHASH(model);
            RPCHook.Call(OLDNatives.REQUEST_MODEL, (object)hash);
            int num2;
            object[] objArray;
            do
            {
                num2 = (int)OLDNatives.HAS_MODEL_LOADED;
                objArray = new object[1] { (object)hash };
            }
            while (RPCHook.Call((uint)num2, objArray) != 1);
            RPCHook.Call(OLDNatives.SET_PLAYER_MODEL, (object)num1, (object)hash);
            RPCHook.Call(OLDNatives.SET_MODEL_AS_NO_LONGER_NEEDED, (object)hash);
            int num3 = RPCHook.Call(OLDNatives.PLAYER_PED_ID);
            RPCHook.Call(OLDNatives.SET_PED_RANDOM_COMPONENT_VARIATION, (object)num3, (object)0);
        }

        public static string StringTalk(int int_1)
        {
            UnaPippa Pippone = new UnaPippa();
            uint offset = (uint)Functions.RPCFunc.GET_PLAYER_NAME_INT(int_1);
            Pippone.byte_0 = PS3.GetBytes(offset, 0x10);
            byte[] bytes = ((IEnumerable<byte>)Pippone.byte_0).TakeWhile<byte>(new Func<byte, int, bool>(Pippone.method_0)).ToArray<byte>();
            return (!(Encoding.ASCII.GetString(bytes) != "") ? "--- Unavailable ---" : (((bytes[0] < 0x41) || (bytes[0] > 0x7a)) ? "" : Encoding.ASCII.GetString(bytes)));
        }

        public sealed class UnaPippa
        {
            public byte[] byte_0;
            public static Func<byte, bool> func_0;

            public bool method_0(byte byte_1, int int_0)
            {
                if (func_0 == null)
                {
                    func_0 = new Func<byte, bool>(smethod_0);
                }
                return ((IEnumerable<byte>)byte_0).Skip<byte>(int_0).Any<byte>(func_0);
            }

            public static bool smethod_0(byte byte_1)
            {
                return (byte_1 != 0);
            }
        }

        public static bool NewRequestNetworkControl(int ID)
        {
            int Tries = 0;
            bool
                hasControl = false,
                giveUp = false;
            do
            {
                hasControl = NEW_NETWORK_HAS_CONTROL_OF_ENTITY(ID);
                Tries++;
                if (Tries > 300)
                    giveUp = true;
            } while (!hasControl && !giveUp);

            if (giveUp)
                return false;
            else return true;
        }

        public static float[] GetImpactCoords()
        {
            float[] Loc = new float[3];
            float[] Coords = new float[3];
            if (Functions.RPCFunc.IS_PED_SHOOTING(PLAYER_PED_ID()) != 0)
            {
                if (GET_PED_LAST_WEAPON_IMPACT_COORD(PLAYER_PED_ID(), Loc))
                    Coords[0] = Loc[0]; Coords[1] = Loc[1]; Coords[2] = Loc[2];
            }
            return Coords;
        }

        public static float[] GET_PED_LAST_WEAPON_IMPACT_COORD_FL(int client)
        {
            float[] boh;
            boh = RPCHook.Call2<float[]>(Natives.GET_PED_LAST_WEAPON_IMPACT_COORD, (object)client);
            return boh;
        }

        public static bool GET_PED_LAST_WEAPON_IMPACT_COORD(int client, float[] Coord)
        {
            if (ClassicRPC.Call(Natives.GET_PED_LAST_WEAPON_IMPACT_COORD, (object)client, (object)Coord) != 0)
                return true;
            else return false;
        }

        public static void ExplosiveBullets(int PlayerIndex)
        {
            int pedID = PlayerIndex;
            if (Functions.RPCFunc.IS_PED_SHOOTING(pedID) == 1)
            {
                float[] Impact;
                Impact = GET_PED_LAST_WEAPON_IMPACT_COORD_FL(pedID);
                Owned_Explosion(pedID, Impact, 5);
            }
        }

        public static void MoneyBullets(int PlayerIndex)
        {
            float[] COORDS = new float[3];
            int pedID = GET_PLAYER_PED(PlayerIndex);
            if (Functions.RPCFunc.IS_PED_SHOOTING(pedID) == 1)
            {
                COORDS = Functions.RPCFunc.GET_PED_LAST_WEAPON_IMPACT_COORD(pedID);
                Functions.RPCFunc.CREATE_AMBIENT_PICKUP(0xCE6FDD6B, COORDS, 0, 40000, 0x113FD533, 0, 1);
            }
        }

        public static void ClearArea()
        {
            float[] Pos = Functions.RPCFunc.GET_ENTITY_COORDS(Functions.RPCFunc.PLAYER_PED_ID());
            Functions.RPCFunc.CLEAR_AREA(Pos, 250);
            Functions.RPCFunc.CLEAR_AREA_OF_COPS(Pos, 250);
            Functions.RPCFunc.CLEAR_AREA_OF_OBJECTS(Pos, 250);
            Functions.RPCFunc.CLEAR_AREA_OF_VEHICLES(Pos, 250);
            Functions.RPCFunc.CLEAR_AREA_OF_PEDS(Pos, 250);
            Functions.RPCFunc.CLEAR_AREA_OF_PROJECTILES(Pos, 250);
        }

        public static int GET_PLAYER_PED(int client)
        {
            return ClassicRPC.Call(Natives.GET_PLAYER_PED, (object)client);
        }

        public static void DoAnimation(string AnimDict, string AnimID)
        {
            int Me = PLAYER_PED_ID();
            NETWORK_REQUEST_CONTROL_OF_ENTITY(Me);
            REQUEST_ANIM_DICT(AnimDict);
            if (HAS_ANIM_DICT_LOADED(AnimDict) != 0)
            {
                TASK_PLAY_ANIM(Me, AnimDict, AnimID);
            }
        }

        public static void CLEAR_PED_TASKS_IMMEDIATLY(int Player)
        {
            RPCHook.Call(Natives.CLEAR_PED_TASKS_IMMEDIATELY, new object[] { Player });
        }

        public static void TASK_PLAY_ANIM(int Player, string AnimDict, string AnimID)
        {
            ClassicRPC.HookCall(Natives.TASK_PLAY_ANIM, new object[] { Player, AnimDict, AnimID, 8.0f, 0.0f, -1, 9, 0, 0, 0, 0 });
        }

        public static int REQUEST_ANIM_DICT(string Anim)
        {
            return ClassicRPC.HookCall(Natives.REQUEST_ANIM_DICT, new object[] { Anim });
        }

        public static int HAS_ANIM_DICT_LOADED(string Anim)
        {
            return ClassicRPC.HookCall(Natives.HAS_ANIM_DICT_LOADED, new object[] { Anim });
        }

        public static int PLAYER_PED_ID()
        {
            return RPC3.Call(OLDNatives.PLAYER_PED_ID);
        }

        public static int PLAYER_ID()
        {
            RPC3.Call(OLDNatives.PLAYER_ID, (object)0);
            return 0;
        }

        public static float[] GET_ENTITY_COORDS22(int getplayerped)
        {
            float[] numArray = new float[3];
            RPCHook.Call(OLDNatives.GET_ENTITY_COORDS, (object)268636160, (object)getplayerped);
            numArray[0] = RPCHook.PS3.Extension.ReadFloat(268636160U);
            numArray[1] = RPCHook.PS3.Extension.ReadFloat(268636164U);
            numArray[2] = RPCHook.PS3.Extension.ReadFloat(268636168U);
            return numArray;
        }

        public static void SET_VEHICLE_ENGINE_POWER_MULTIPLIER(int entityID, float speed)
        {
            RPCHook.Call2<int>(OLDNatives.SET_VEHICLE_ENGINE_POWER_MULTIPLIER, (object)entityID, (object)speed);
        }

        public static void ATTACH_ENTITY_TO_ENTITY1(int ObjToNet, int ToAttachID, int bone, float X, float Y, float Z, float RX, float RY, float RZ)
        {
            float[] numArray1 = new float[3];
            float[] numArray2 = new float[3];
            numArray1[0] += X;
            numArray1[1] += Y;
            numArray1[2] += Z;
            numArray2[0] += RX;
            numArray2[1] += RY;
            numArray2[2] += RZ;
            RPCHook.Call2<int>(OLDNatives.ATTACH_ENTITY_TO_ENTITY, (object)ObjToNet, (object)ToAttachID, (object)bone, (object)numArray1, (object)numArray2, (object)1, (object)1, (object)1, (object)1, (object)2, (object)1);
            RPCHook.Call(OLDNatives.SET_ENTITY_VISIBLE, (object)zzz[sss], (object)0);
            RPCHook.Call(OLDNatives.SET_ENTITY_LOCALLY_INVISIBLE, (object)zzz[sss], (object)1);
        }

        public static void ATTACH_ENTITY_TO_ENTITY(int ObjToNet, int ToAttachID, int bone, float X, float Y, float Z, float RX, float RY, float RZ)
        {
            float[] numArray1 = new float[3];
            float[] numArray2 = new float[3];
            numArray1[0] += X;
            numArray1[1] += Y;
            numArray1[2] += Z;
            numArray2[0] += RX;
            numArray2[1] += RY;
            numArray2[2] += RZ;
            RPCHook.Call2<int>(OLDNatives.ATTACH_ENTITY_TO_ENTITY, (object)ObjToNet, (object)ToAttachID, (object)bone, (object)numArray1, (object)numArray2, (object)1, (object)1, (object)1, (object)1, (object)2, (object)1);
        }

        public static uint GetHash(string input)
        {
            byte[] bytes = Encoding.UTF8.GetBytes(input.ToLower());
            uint num1 = 0;
            for (int index = 0; index < bytes.Length; ++index)
            {
                int num2 = (int)num1 + (int)bytes[index];
                int num3 = 10;
                int num4 = num2 << num3;
                int num5 = num2 + num4;
                int num6 = 6;
                int num7 = (int)((uint)num5 >> num6);
                num1 = (uint)(num5 ^ num7);
            }
            int num8 = (int)num1;
            int num9 = 3;
            int num10 = num8 << num9;
            int num11 = num8 + num10;
            int num12 = 11;
            int num13 = (int)((uint)num11 >> num12);
            int num14 = num11 ^ num13;
            int num15 = 15;
            int num16 = num14 << num15;
            return (uint)(num14 + num16);
        }

        public static int GET_HASH_KEY(string hash)
        {
            return RPC3.Call(OLDNatives.GET_HASH_KEY, (object)hash);
        }

        public static void ADD_EXPLOSION(float[] float_3, int int_3, float float_4, int int_4, int int_5, float float_5)
        {
            RPCHook.Call(OLDNatives.ADD_EXPLOSION, (object)float_3, (object)int_3, (object)float_4, (object)int_4, (object)int_5, (object)float_5);
        }

        public static int REQUEST_MODEL(int Hash)
        {
            return RPCHook.Call(OLDNatives.REQUEST_MODEL, (object)true, (object)Hash);
        }

        public static int HAS_MODEL_LOADED(int Hash)
        {
            return RPCHook.Call(OLDNatives.HAS_MODEL_LOADED, (object)Hash);
        }

        public static int CREATE_VEHICLE(int Hash, float[] coords)
        {
            return RPCHook.Call(OLDNatives.CREATE_VEHICLE, (object)Hash, (object)coords, (object)1, (object)1, (object)0);
        }

        public static void SET_PED_INTO_VEHICLE(int PedID, int ride, int seat)
        {
            RPCHook.Call(OLDNatives.SET_PED_INTO_VEHICLE, (object)PedID, (object)ride, (object)seat);
        }

        public static int IS_PED_IN_ANY_VEHICLE(int pedid)
        {
            return RPCHook.Call(OLDNatives.IS_PED_IN_ANY_VEHICLE, (object)pedid, (object)0);
        }

        public static int GET_VEHICLE_PED_IS_IN(int PedID)
        {
            return RPCHook.Call(OLDNatives.GET_VEHICLE_PED_IS_IN, (object)PedID, (object)0);
        }

        public static void SET_ENTITY_INVINCIBLE(int PedID, int enable)
        {
            RPCHook.Call(OLDNatives.SET_ENTITY_INVINCIBLE, (object)PedID, (object)enable);
        }

        public static void ADD_BLIP_VEHICLE(int PedID, int color)
        {
            Create9[ccc] = RPCHook.Call2<int>(OLDNatives.ADD_BLIP_FOR_ENTITY, (object)PedID);
            RPCHook.Call2<int>(OLDNatives.SET_BLIP_COLOUR, (object)Create9[ccc], (object)color);
            ++ccc;
        }

        public static void SET_MODEL_AS_NO_LONGER_NEEDED(int Hash)
        {
            RPCHook.Call(OLDNatives.SET_MODEL_AS_NO_LONGER_NEEDED, (object)Hash);
        }

        public static int GET_PLAYERS_LAST_VEHICLE()
        {
            return RPC3.Call(OLDNatives.GET_PLAYERS_LAST_VEHICLE, (object)0);
        }

        public static int SET_ENTITY_COORDS(int entityID, float x, float y, float z)
        {
            float[] numArray = new float[3] { x, y, z };
            return ClassicRPC.NCall(NewNatives.SET_ENTITY_COORDS, (object)entityID, (object)numArray, (object)1, (object)0, (object)0, (object)1);
        }

        public static int CREATE_PED(int hash, float[] coords)
        {
            return RPCHook.Call(OLDNatives.CREATE_PED, (object)26, (object)hash, (object)coords, (object)1, (object)1, (object)0);
        }

        public static void REMOVE_ALL_PED_WEAPONS(int playerpedid)
        {
            RPCHook.Call(OLDNatives.REMOVE_ALL_PED_WEAPONS, (object)playerpedid);
        }

        public static void GIVE_DELAYED_WEAPON_TO_PED(int PedID, int hash)
        {
            RPCHook.Call(OLDNatives.GIVE_DELAYED_WEAPON_TO_PED, (object)PedID, (object)hash, (object)1, (object)1);
        }

        public static void SET_PED_CAN_SWITCH_WEAPON(int PedID)
        {
            RPCHook.Call(OLDNatives.SET_PED_CAN_SWITCH_WEAPON, (object)PedID, (object)true);
        }

        public static void SET_PED_CAN_SWITCH_WEAPON2(int PedID, bool state)
        {
            RPCHook.Call(OLDNatives.SET_PED_CAN_SWITCH_WEAPON, (object)PedID, (object)1);
        }

        public static void SET_PED_AS_ENEMY(int PedID)
        {
            RPCHook.Call(OLDNatives.SET_PED_AS_ENEMY, (object)PedID, (object)1);
        }

        public static void SET_ENTITY_IS_TARGET_PRIORITY(int PedID)
        {
            RPCHook.Call(OLDNatives.SET_ENTITY_IS_TARGET_PRIORITY, (object)PedID, (object)1, (object)0);
        }

        public static void SET_PED_SHOOT_RATE(int PedID)
        {
            RPCHook.Call(OLDNatives.SET_PED_SHOOT_RATE, (object)PedID, (object)1000);
        }

        public static void SET_PED_ARMOUR(int PedID)
        {
            RPCHook.Call(OLDNatives.SET_PED_ARMOUR, (object)PedID, (object)100);
        }

        public static void ADD_ARMOUR_TO_PED(int PedID, int amount)
        {
            RPCHook.Call(OLDNatives.ADD_ARMOUR_TO_PED, (object)PedID, (object)amount);
        }

        public static void SET_PED_COMBAT_ABILITY(int PedID)
        {
            RPCHook.Call(OLDNatives.SET_PED_COMBAT_ABILITY, (object)PedID, (object)2);
        }

        public static void SET_PED_COMBAT_ATTRIBUTES(int PedID)
        {
            RPCHook.Call(OLDNatives.SET_PED_COMBAT_ATTRIBUTES, (object)PedID, (object)52, (object)1);
        }

        public static void SET_PED_COMBAT_RANGE(int PedID)
        {
            RPCHook.Call(OLDNatives.SET_PED_COMBAT_RANGE, (object)PedID, (object)0);
        }

        public static void SET_PED_ACCURACY(int PedID)
        {
            RPCHook.Call(OLDNatives.SET_PED_ACCURACY, (object)PedID, (object)100);
        }

        public static void SET_PED_COMBAT_MOVEMENT(int PedID)
        {
            RPCHook.Call(OLDNatives.SET_PED_COMBAT_MOVEMENT, (object)PedID, (object)2);
        }

        public static void SET_PED_FIRING_PATTERN(int PedID)
        {
            RPCHook.Call(OLDNatives.SET_PED_FIRING_PATTERN, (object)PedID, (object)3337513804U);
        }

        public static void SET_CAN_ATTACK_FRIENDLY(int PedID, int enable)
        {
            RPCHook.Call(OLDNatives.SET_CAN_ATTACK_FRIENDLY, (object)PedID, (object)enable, (object)0);
        }

        public static void APPLY_FORCE_TO_ENTITY(int entityID, float LX, float LY, float LZ, float RX, float RY)
        {
            float[] numArray1 = new float[3] { LX, LY, LZ };
            float[] numArray2 = new float[3] { RX, RY, 0.0f };
            ClassicRPC.Call(Natives.APPLY_FORCE_TO_ENTITY, (object)entityID, (object)1, (object)numArray1, (object)numArray2, (object)0, (object)1, (object)1, (object)1, (object)0, (object)1);
        }

        public static void SET_DRIVER_ABILITY(int PedID)
        {
            RPCHook.Call(OLDNatives.SET_DRIVER_ABILITY, (object)PedID, (object)1f);
        }

        public static void SET_DRIVER_AGGRESSIVENESS(int PedID)
        {
            RPCHook.Call(OLDNatives.SET_DRIVER_AGGRESSIVENESS, (object)PedID, (object)1f);
        }

        public static void TASK_SHOOT_AT_ENTITY(int PedID, int target)
        {
            RPCHook.Call(OLDNatives.TASK_SHOOT_AT_ENTITY, (object)PedID, (object)target, (object)-1, (object)3337513804U);
        }

        public static void TASK_COMBAT_PED(int combatee, int combator)
        {
            RPCHook.Call(OLDNatives.TASK_COMBAT_PED, (object)combatee, (object)combator, (object)0, (object)16);
        }

        public static void SET_PED_KEEP_TASK(int PedID)
        {
            RPCHook.Call2<int>(OLDNatives.SET_PED_KEEP_TASK, (object)PedID, (object)1);
        }

        public static void SET_PED_MONEY(int PedID, int amount)
        {
            RPCHook.Call(OLDNatives.SET_PED_MONEY, (object)PedID, (object)amount);
        }

        public static void TASK_START_SCENARIO_IN_PLACE(int ped, string text)
        {
            RPCHook.Call2<int>(OLDNatives.TASK_START_SCENARIO_IN_PLACE, (object)ped, (object)text, (object)0, (object)0);
        }

        public static int GET_HASH_KEYSPRX(string hash)
        {
            return RPCHook.Call(OLDNatives.GET_HASH_KEY, (object)hash);
        }

        public static int GET_PLAYER_PEDSPRX(int client)
        {
            return RPCHook.Call(OLDNatives.GET_PLAYER_PED, (object)client);
        }

        public static int CREATE_GROUP(int group)
        {
            return RPCHook.Call(OLDNatives.CREATE_GROUP, (object)group);
        }

        public static void SET_PED_AS_GROUP_MEMBER(int bodyguard, int group)
        {
            RPCHook.Call(OLDNatives.SET_PED_AS_GROUP_MEMBER, (object)bodyguard, (object)group);
        }

        public static void SET_PED_AS_GROUP_LEADER(int PedID, int group)
        {
            RPCHook.Call(OLDNatives.SET_PED_AS_GROUP_LEADER, (object)PedID, (object)group);
        }

        public static void SET_PED_NEVER_LEAVES_GROUP(int PedID, int group)
        {
            RPCHook.Call(OLDNatives.SET_PED_NEVER_LEAVES_GROUP, (object)PedID, (object)group);
        }

        public static void SET_GROUP_FORMATION(int Group, int formation)
        {
            RPCHook.Call(OLDNatives.SET_GROUP_FORMATION, (object)Group, (object)formation);
        }

        public static int CREATE_VEHICLE2(int Hash, float[] coords)
        {
            return RPCHook.Call(OLDNatives.CREATE_VEHICLE, (object)Hash, (object)coords, (object)0, (object)1, (object)0);
        }

        public static void ADD_BLIP_PED(int PedID, int color)
        {
            EntityCreated8[CreatedNumber8] = RPCHook.Call2<int>(OLDNatives.ADD_BLIP_FOR_ENTITY, (object)PedID);
            RPCHook.Call2<int>(OLDNatives.SET_BLIP_COLOUR, (object)EntityCreated8[CreatedNumber8], (object)color);
            ++CreatedNumber8;
        }

        public static void ADD_BLIP_BODYGAURD(int PedID, int color)
        {
            EntityCreated10[CreatedNumber10] = RPCHook.Call2<int>(OLDNatives.ADD_BLIP_FOR_ENTITY, (object)PedID);
            RPCHook.Call2<int>(OLDNatives.SET_BLIP_COLOUR, (object)EntityCreated10[CreatedNumber10], (object)color);
            ++CreatedNumber10;
        }

        public static void SET_ENTITY_CAN_BE_DAMAGED(int PedID, int enable)
        {
            RPCHook.Call(OLDNatives.SET_ENTITY_CAN_BE_DAMAGED, (object)PedID, (object)enable);
        }

        public static void owned_explosion(int killerID, float[] coords, int type)
        {
            RPCHook.Call(OLDNatives.ADD_OWNED_EXPLOSION, (object)killerID, (object)coords, (object)type, (object)7f, (object)1, (object)1, (object)10f);
        }

        public static string GETCLIENTS(int id)
        {
            return GET_PLAYER_NAME(id);
        }

        public static string GET_PLAYER_NAME(int playerid)
        {
            int num = RPC3.Call(OLDNatives.GET_PLAYER_NAME, (object)playerid);

            if (RPC3.PS3.Extension.ReadString((uint)num) == "**Invalid**")
                return "-----";

            return RPC3.PS3.Extension.ReadString((uint)num);
        }
        #endregion

        #region IPGrabber
        private void ClearDataGrid(DataGridView dataGview)
        {
            for (int i = 0; i < dataGview.Rows.Count; i++)
            {
                bool flag = true;
                for (int j = 0; j < dataGview.Columns.Count; j++)
                {
                    object obj2 = dataGview.Rows[i].Cells[j].Value;
                    if ((obj2 != null) && (obj2.ToString().Length > 0))
                    {
                        goto Label_0056;
                    }
                }
                goto Label_0058;
                Label_0056:
                flag = false;
                Label_0058:
                if (flag)
                {
                    dataGview.Rows.RemoveAt(i--);
                }
            }
            Thread.Sleep(1000);
            if (splashScreenManager2.IsSplashFormVisible)
                splashScreenManager2.CloseWaitForm();
        }

        private void GrabIPAddresses()
        {
            try
            {
                dataGridView7.Rows.Clear();
                dataGridView7.RowCount = 99;
                uint num = 0u;
                while ((ulong)num < (ulong)((long)length1))
                {
                    PlayerName = PS3.Extension.ReadString(1073896576u + (num * Interval));
                    PlayerIP = convertIp(PS3.Extension.ReadBytes(1073896648u + (num * Interval), 4));
                    if (((nameValidation.IsMatch(PlayerName) && !PlayerName.Contains("^")) && (PlayerName.Length > 3)))
                    {
                        dataGridView7.Rows[(int)num].Cells[0].Value = PlayerName;
                    }
                    if (PlayerIP != "0.0.0.0" && PlayerIP != "255.255.255.255" && PlayerIP != "35.7.73.34")
                    {
                        dataGridView7.Rows[(int)num].Cells[1].Value = PlayerIP;
                    }
                    Application.DoEvents();
                    string str2 = "";
                    string str3 = "";
                    string str4 = "";
                    if (PlayerIP != "0.0.0.0" && PlayerIP != "255.255.255.255" && PlayerIP != "35.7.73.34")
                    {
                        str2 = returnCountry(PlayerIP);
                    }
                    if (PlayerIP != "0.0.0.0" && PlayerIP != "255.255.255.255" && PlayerIP != "35.7.73.34")
                    {
                        str3 = returnCity(PlayerIP);
                    }
                    if (PlayerIP != "0.0.0.0" && PlayerIP != "255.255.255.255" && PlayerIP != "35.7.73.34")
                    {
                        str4 = returnRegionName(PlayerIP);
                    }
                    dataGridView7.Rows[(int)num].Cells[2].Value = str2;
                    dataGridView7.Rows[(int)num].Cells[3].Value = str3;
                    dataGridView7.Rows[(int)num].Cells[4].Value = str4;

                    num += 1u;
                }
                ClearDataGrid(dataGridView7);
                dataGridView7.RowCount = 18;
            }
            catch
            {
                Thread.Sleep(500);
                
            }
        }

        private static string convertIp(byte[] ip) =>
            $"{ip[0]}.{ip[1]}.{ip[2]}.{ip[3]}";

        public static string returnCity(string IP)
        {
            WebClient WC = new WebClient();
            return WC.DownloadString("http://freegeoip.net/xml/" + IP).Replace("<City>", ";").Split(new char[] { ';' })[1].Replace("</City>", ";").Split(new char[] { ';' })[0];
        }

        public static string returnCountry(string IP)
        {
            WebClient WC = new WebClient();
            return WC.DownloadString("http://freegeoip.net/xml/" + IP).Replace("<CountryName>", ";").Split(new char[] { ';' })[1].Replace("</CountryName>", ";").Split(new char[] { ';' })[0];
        }

        public static string returnRegionName(string IP)
        {
            WebClient WC = new WebClient();
            return WC.DownloadString("http://freegeoip.net/xml/" + IP).Replace("<RegionName>", ";").Split(new char[] { ';' })[1].Replace("</RegionName>", ";").Split(new char[] { ';' })[0];
        }

        public static string returnZipCode(string IP)
        {
            WebClient WC = new WebClient();
            return WC.DownloadString("http://freegeoip.net/xml/" + IP).Replace("<ZipCode>", ";").Split(new char[] { ';' })[1].Replace("</ZipCode>", ";").Split(new char[] { ';' })[0];
        }
        #endregion

        #region LobbyMods
        private int AttachObjHead(int Obj, int PlayerIndex)
        {
            float[] entityCoords = GET_ENTITY_COORDS(PlayerIndex);
            int pedBoneIndex = GET_PED_BONE_INDEX(PlayerIndex, 31086);
            int num;
            object[] objArray;
            do
            {
                zzz[sss] = CREATE_OBJECT(Obj, entityCoords);
                Application.DoEvents();
                num = (int)Natives.DOES_ENTITY_EXIST;
                objArray = new object[1]
                {
                    (object) zzz[sss]
                };
            }
            while (RPC3.Call((uint)num, objArray) != 1);
            ATTACH_ENTITY_TO_ENTITY(zzz[sss], PlayerIndex, pedBoneIndex, 0.3f, 0.0f, 0.0f, 0.0f, 90f, 0.0f);
            ++sss;
            return 1;
        }

        public static void ExplosionProtection()
        {
            Functions.RPCFunc.NETWORK_SET_FRIENDLY_FIRE_OPTION(0);
        }

        public static float[] GET_ENTITY_COORDS(int getplayerped)
        {
            float[] numArray = new float[3];
            ClassicRPC.Call(Natives.GET_ENTITY_COORDS, (object)268636160, (object)getplayerped);
            numArray[0] = PS3.Extension.ReadFloat(268636160U);
            numArray[1] = PS3.Extension.ReadFloat(268636164U);
            numArray[2] = PS3.Extension.ReadFloat(268636168U);
            return numArray;
        }

        public static int SpawnPedLobby(int pedid, string model)
        {
            int PED = GET_PLAYER_PED(pedid);
            float[] numArray1 = new float[3];
            numArray1[1] = 3f;
            float[] numArray2 = numArray1;
            float[] Coord = RPCHook.Call2<float[]>(OLDNatives.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, (object)PED, (object)numArray2);
            int hash = GET_HASH_KEYSPRX(model);
            do
            {
                REQUEST_MODEL(hash);
                Application.DoEvents();
            }
            while (HAS_MODEL_LOADED(hash) != 1);
            int Spawned = CREATE_PED(hash, Coord);
            while (RPCHook.Call((uint)OLDNatives.DOES_ENTITY_EXIST, Spawned) != 1) ;
            RPCHook.CompleteReq();
            GIVE_DELAYED_WEAPON_TO_PED(Spawned, GET_HASH_KEYSPRX("WEAPON_KNIFE"));
            SET_PED_CAN_SWITCH_WEAPON(Spawned);
            SET_PED_ARMOUR(Spawned);
            ADD_ARMOUR_TO_PED(Spawned, 100);
            SET_PED_MONEY(Spawned, 10000);
            
            SET_MODEL_AS_NO_LONGER_NEEDED(hash);
            return Spawned;
        }

        public static int GET_PED_BONE_INDEX(int PedID, int bonecoords)
        {
            return RPCHook.Call2<int>(Natives.GET_PED_BONE_INDEX, (object)PedID, (object)bonecoords);
        }

        public static int CREATE_OBJECT(int hash, float[] coords)
        {
            return RPCHook.Call2<int>(Natives.CREATE_OBJECT, (object)hash, (object)coords, (object)1, (object)1, (object)0);
        }

        public static void DROP_PICKUP(float[] Location, string PickupModel, string PickupBehavior, int PickupAmount, string DisplayName, int Client)
        {
            int Model = GET_HASH_KEY(PickupModel);
            int Behavior = GET_HASH_KEY(PickupBehavior);
            REQUEST_MODEL(Model);
            if (HAS_MODEL_LOADED(Model) != 0)
            {
                Functions.RPCFunc.CREATE_AMBIENT_PICKUP2(Behavior, Location, 0, PickupAmount, Model, 0, 2);
                SET_MODEL_AS_NO_LONGER_NEEDED(Model);
            }
        }

        public static void TeleportClientToMe2(int Player)
        {
            float[] Coords = GET_ENTITY_COORDS(PLAYER_PED_ID());
            Functions.RPCFunc.TASK_FOLLOW_NAV_MESH_TO_COORD(GET_PLAYER_PED(Player), Coords, 1, -1, 0, 0, 0);
        }

        public static void UnlimitedAmmo(int Player, bool toggle)
        {
            if (toggle == true)
            {
                Functions.RPCFunc.SET_PED_INFINITE_AMMO_CLIP(Player, 1);
            }
            else if (toggle == false)
            {
                Functions.RPCFunc.SET_PED_INFINITE_AMMO_CLIP(Player, 0);
            }
        }

        public static void SendMessage(int listBoxx, string txt)
        {
            object[] objArray2;
            object[] objArray1;

            objArray1 = new object[] { (int)listBoxx, (int)0x10030000, (int)13 };
            ClassicRPC.Call(OLDNatives.NETWORK_HANDLE_FROM_PLAYER, objArray1);
            objArray2 = new object[] { color + txt, (int)0x10030000 };
            ClassicRPC.Call(OLDNatives.NETWORK_SEND_TEXT_MESSAGE, objArray2);
            Thread.Sleep(200);
        }

        public static void TeleportToPlayer(int list)
        {
            int num = Functions.RPCFunc.PLAYER_PED_ID();
            float[] numArray = Functions.RPCFunc.GET_COORDS(Functions.RPCFunc.GET_PLAYER_PED(list));
            Functions.RPCFunc.SCREEN_FADE_OUT(400);

            Functions.RPCFunc.SET_ENTITY_COORDS(num, numArray);
            Functions.RPCFunc.SCREEN_FADE_IN(400);
        }

        public static void TeleportPlayerToMe(int list)
        {
            int num = Functions.RPCFunc.PLAYER_PED_ID();
            int num2 = Functions.RPCFunc.GET_PLAYER_PED(list);
            float[] numArray = Functions.RPCFunc.GET_COORDS(num);

            Functions.RPCFunc.SCREEN_FADE_OUT(400);
            Functions.RPCFunc.SET_ENTITY_COORDS(num2, numArray);
            Functions.RPCFunc.SCREEN_FADE_IN(400);
        }

        public static void TeleportToPlayerCar(int list)
        {
            Functions.RPCFunc.TELEPORT_ME_TO_PLAYER_CAR(list);
        }

        public static void SpawnObject(string obj, float[] position, bool frz)
        {
            int ob = Functions.RPCFunc.CREATE_OBJECT(Functions.RPCFunc.STRINGHASH(obj), position);
            if (frz == true)
            {
                Functions.RPCFunc.FREEZE_ENTITY_POSITION(ob, 1);
            }
        }

        public static void MoneyRain(int list)
        {
            float[] numArray = new float[3];
            float[] numArray2 = new float[3];
            numArray = Functions.RPCFunc.GET_COORDS(Functions.RPCFunc.GET_PLAYER_PED(list));
            for (int i = 0; i < 20; i++)
            {
                Random random = new Random();
                int num3 = random.Next(-500, 500);
                int num4 = random.Next(-500, 500);
                numArray2 = numArray;
                numArray2[0] += ((float)num3) / 100f;
                numArray2[1] += ((float)num4) / 100f;
                numArray2[2] += 3f;
                Functions.RPCFunc.AMBIENT_PICKUP(Functions.Addresses.PICKUP_MONEY_PAPER_BAG, numArray2, 0x7d0);
            }
        }

        public static void GiveAllWeapons(int list)
        {
            Functions.RPCFunc.GiveWeapons(Functions.RPCFunc.GET_PLAYER_PED(list));
        }

        public static void GiveOneMilion(int list)
        {
            Functions.RPCFunc.NETWORK_EARN_FROM_ROCKSTAR(1000000, list);
        }

        public static void KickandLockDoorsCar(int list)
        {
            int num = Functions.RPCFunc.GET_PLAYER_PED(list);
            if (IS_PED_IN_ANY_VEHICLE(num) == 1)
            {
                int num2 = Functions.RPCFunc.GET_PED_VEHICLE_IS_IN(num);
                Thread.Sleep(400);
                Functions.RPCFunc.CLEAR_PED_TASKS_IMMEDIATLY(num);
                Thread.Sleep(400);
                NETWORK_REQUEST_CONTROL_OF_ENTITY(num2);
                Functions.RPCFunc.SET_VEHICLE_DOORS_LOCKED(num2, 1);
            }
        }

        public static void KickFromCar(int list)
        {
            Functions.RPCFunc.CLEAR_PED_TASKS_IMMEDIATLY(Functions.RPCFunc.GET_PLAYER_PED(list));
        }

        public static void OpenAllDoors(bool toggle)
        {
            int PID = PLAYER_PED_ID();
            int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_IN(PID);

            if (toggle == true)
            {
                Functions.RPCFunc.SET_VEHICLE_DOOR_OPEN(Veh, 0, 0);
                Functions.RPCFunc.SET_VEHICLE_DOOR_OPEN(Veh, 1, 0);
                Functions.RPCFunc.SET_VEHICLE_DOOR_OPEN(Veh, 2, 0);
                Functions.RPCFunc.SET_VEHICLE_DOOR_OPEN(Veh, 3, 0);
                Functions.RPCFunc.SET_VEHICLE_DOOR_OPEN(Veh, 4, 0);
                Functions.RPCFunc.SET_VEHICLE_DOOR_OPEN(Veh, 5, 0);
                Functions.RPCFunc.SET_VEHICLE_DOOR_OPEN(Veh, 6, 0);
            }
            else
            {
                Functions.RPCFunc.SET_VEHICLE_DOOR_SHUT(Veh, 0, 0);
                Functions.RPCFunc.SET_VEHICLE_DOOR_SHUT(Veh, 1, 0);
                Functions.RPCFunc.SET_VEHICLE_DOOR_SHUT(Veh, 2, 0);
                Functions.RPCFunc.SET_VEHICLE_DOOR_SHUT(Veh, 3, 0);
                Functions.RPCFunc.SET_VEHICLE_DOOR_SHUT(Veh, 4, 0);
                Functions.RPCFunc.SET_VEHICLE_DOOR_SHUT(Veh, 5, 0);
                Functions.RPCFunc.SET_VEHICLE_DOOR_SHUT(Veh, 6, 0);
            }
        }

        public static void DowngradeVehicle()
        {
            int num = PLAYER_PED_ID();
            int num2 = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(num);
            if (Functions.RPCFunc.IS_PED_IN_VEHICLE(num) == 1 && NewRequestNetworkControl(num2))
            {
                Functions.RPCFunc.NETWORK_REQUEST_CONTROL_ENTITY(num2);
                Functions.RPCFunc.SET_VEHICLE_NUMBER_PLATE_TEXT(num2, "NOOB!!");
                Functions.RPCFunc.SET_VEHICLE_MOD_KIT(num2, 0);
                Functions.RPCFunc.SET_VEHICLE_MOD(num2, 11, -1);
                Functions.RPCFunc.SET_VEHICLE_MOD_KIT(num2, 0);
                Functions.RPCFunc.SET_VEHICLE_MOD(num2, 12, -1);
                Functions.RPCFunc.SET_VEHICLE_MOD_KIT(num2, 0);
                Functions.RPCFunc.SET_VEHICLE_MOD(num2, 15, -1);
                Functions.RPCFunc.SET_VEHICLE_MOD_KIT(num2, 0);
                Functions.RPCFunc.SET_VEHICLE_MOD(num2, 13, -1);
                Functions.RPCFunc.SET_VEHICLE_MOD_KIT(num2, 0);
                Functions.RPCFunc.SET_VEHICLE_MOD(num2, 0x12, 0);
                Functions.RPCFunc.SET_VEHICLE_MOD_KIT(num2, 0);
                Functions.RPCFunc.SET_VEHICLE_MOD(num2, 0x10, -1);
                Functions.RPCFunc.SET_VEHICLE_MOD_KIT(num2, 0);
                Functions.RPCFunc.SET_VEHICLE_CUSTOM_PRIM_COLOR(num2, 0xff, 20, 0x93);
                Functions.RPCFunc.SET_VEHICLE_CUSTOM_SEC_COLOR(num2, 0xff, 20, 0x93);
            }
        }

        public static void MaxUpgradesVehicle()
        {
            int num = PLAYER_PED_ID();
            int num2 = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(num);
            if (Functions.RPCFunc.IS_PED_IN_VEHICLE(num) == 1 && NewRequestNetworkControl(num2))
            {
                Functions.RPCFunc.NETWORK_REQUEST_CONTROL_ENTITY(num2);
                Functions.RPCFunc.SET_VEHICLE_CUSTOM_PRIM_COLOR(num2, 0, 0, 0);
                Functions.RPCFunc.SET_VEHICLE_CUSTOM_SEC_COLOR(num2, 0, 0, 0);
                Functions.RPCFunc.SET_VEHICLE_MOD_KIT(num2, 0);
                Functions.RPCFunc.SET_VEHICLE_COLOURS(num2, 120, 120);
                Functions.RPCFunc.SET_VEHICLE_NUMBER_PLATE_TEXT(num2, "PYLO");
                Functions.RPCFunc.SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(num2, 1);
                Functions.RPCFunc.TOGGLE_VEHICLE_MOD(num2, 18, 1);
                Functions.RPCFunc.TOGGLE_VEHICLE_MOD(num2, 22, 1);
                Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 16, 5, 0);
                Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 12, 2, 0);
                Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 11, 3, 0);
                Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 14, 14, 0);
                Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 15, 3, 0);
                Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 13, 2, 0);
                Functions.RPCFunc.SET_VEHICLE_WHEEL_TYPE(num2, 6);
                Functions.RPCFunc.SET_VEHICLE_WINDOW_TINT(num2, 5);
                Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 23, 19, 1);
                Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 0, 1, 0);
                Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 1, 1, 0);
                Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 2, 1, 0);
                Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 3, 1, 0);
                Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 4, 1, 0);
                Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 5, 1, 0);
                Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 6, 1, 0);
                Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 7, 1, 0);
                Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 8, 1, 0);
                Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 9, 1, 0);
                Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 10, 1, 0);
            }
        }

        public static void MaxUpgradesVehicleLobby(int num2)
        {
            Functions.RPCFunc.NETWORK_REQUEST_CONTROL_ENTITY(num2);
            Functions.RPCFunc.SET_VEHICLE_CUSTOM_PRIM_COLOR(num2, 0, 0, 0);
            Functions.RPCFunc.SET_VEHICLE_CUSTOM_SEC_COLOR(num2, 0, 0, 0);
            Functions.RPCFunc.SET_VEHICLE_MOD_KIT(num2, 0);
            Functions.RPCFunc.SET_VEHICLE_COLOURS(num2, 120, 120);
            Functions.RPCFunc.SET_VEHICLE_NUMBER_PLATE_TEXT(num2, "PYLO");
            Functions.RPCFunc.SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(num2, 1);
            Functions.RPCFunc.TOGGLE_VEHICLE_MOD(num2, 18, 1);
            Functions.RPCFunc.TOGGLE_VEHICLE_MOD(num2, 22, 1);
            Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 16, 5, 0);
            Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 12, 2, 0);
            Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 11, 3, 0);
            Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 14, 14, 0);
            Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 15, 3, 0);
            Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 13, 2, 0);
            Functions.RPCFunc.SET_VEHICLE_WHEEL_TYPE(num2, 6);
            Functions.RPCFunc.SET_VEHICLE_WINDOW_TINT(num2, 5);
            Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 23, 19, 1);
            Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 0, 1, 0);
            Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 1, 1, 0);
            Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 2, 1, 0);
            Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 3, 1, 0);
            Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 4, 1, 0);
            Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 5, 1, 0);
            Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 6, 1, 0);
            Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 7, 1, 0);
            Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 8, 1, 0);
            Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 9, 1, 0);
            Functions.RPCFunc.SET_VEHICLE_MOD2(num2, 10, 1, 0);
            Functions.RPCFunc.SET_VEHICLE_CUSTOM_PRIM_COLOR(num2, 255, 0, 0);
        }

        public static void KickandDowngradeVehicle(int list)
        {
            int num = Functions.RPCFunc.GET_PLAYER_PED(list);
            if (IS_PED_IN_ANY_VEHICLE(num) == 1)
            {
                int num2 = GET_VEHICLE_PED_IS_IN(num);
                Thread.Sleep(400);
                Functions.RPCFunc.CLEAR_PED_TASKS_IMMEDIATLY(num);
                Thread.Sleep(400);
                NETWORK_REQUEST_CONTROL_OF_ENTITY(num2);
                Functions.RPCFunc.SET_VEHICLE_NUMBER_PLATE_TEXT(num2, "NOOB!!");
                Functions.RPCFunc.SET_VEHICLE_MOD_KIT(num2, 0);
                Functions.RPCFunc.SET_VEHICLE_MOD(num2, 11, -1);
                Functions.RPCFunc.SET_VEHICLE_MOD_KIT(num2, 0);
                Functions.RPCFunc.SET_VEHICLE_MOD(num2, 12, -1);
                Functions.RPCFunc.SET_VEHICLE_MOD_KIT(num2, 0);
                Functions.RPCFunc.SET_VEHICLE_MOD(num2, 15, -1);
                Functions.RPCFunc.SET_VEHICLE_MOD_KIT(num2, 0);
                Functions.RPCFunc.SET_VEHICLE_MOD(num2, 13, -1);
                Functions.RPCFunc.SET_VEHICLE_MOD_KIT(num2, 0);
                Functions.RPCFunc.SET_VEHICLE_MOD(num2, 0x12, 0);
                Functions.RPCFunc.SET_VEHICLE_MOD_KIT(num2, 0);
                Functions.RPCFunc.SET_VEHICLE_MOD(num2, 0x10, -1);
                Functions.RPCFunc.SET_VEHICLE_MOD_KIT(num2, 0);
                Functions.RPCFunc.SET_VEHICLE_CUSTOM_PRIM_COLOR(num2, 0xff, 20, 0x93);
                Functions.RPCFunc.SET_VEHICLE_CUSTOM_SEC_COLOR(num2, 0xff, 20, 0x93);
            }
        }

        public static void DeleteVehicle(int list)
        {
            int num = Functions.RPCFunc.GET_PLAYER_PED(list);

            if (Functions.RPCFunc.IS_PED_IN_VEHICLE(num) == 1)
            {
                Functions.RPCFunc.CLEAR_PED_TASKS_IMMEDIATLY(num);
                Thread.Sleep(350);
                int num2 = Functions.RPCFunc.GET_PLAYERS_LAST_VEHICLE(num);
                if (NewRequestNetworkControl(num2))
                    ClassicRPC.NCall(NewNatives.DELETE_ENTITY, num2);
            }
        }

        public static void Need4SpeedVehicle(bool toggle)
        {
            int num = PLAYER_PED_ID();
            if (toggle == true)
            {
                int num2 = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(num);
                if (Functions.RPCFunc.IS_PED_IN_VEHICLE(num) == 1 && NewRequestNetworkControl(num2))
                {
                    SET_VEHICLE_ENGINE_POWER_MULTIPLIER(num2, 50f);
                }
            }
            else
            {
                int num2 = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(num);
                if (Functions.RPCFunc.IS_PED_IN_VEHICLE(num) == 1 && NewRequestNetworkControl(num2))
                {
                    SET_VEHICLE_ENGINE_POWER_MULTIPLIER(num2, 0f);
                }
            }
        }

        public static void BoostVehicle()
        {
            object[] objArray4;
            object[] objArray3;
            object[] objArray2;
            int num = PLAYER_PED_ID();
            object[] objArray1 = new object[] { (int)num };
            int num2 = ClassicRPC.Call(Natives.GET_VEHICLE_PED_IS_USING, objArray1);
            objArray2 = new object[] { (int)num2, (int)1, (int)0 };
            objArray3 = new object[] { (int)num2, (float)100f };
            objArray4 = new object[] { (int)num2, (int)0, (int)0 };

            if (Functions.RPCFunc.IS_PED_IN_VEHICLE(num) == 1 && NewRequestNetworkControl(num2))
            {
                ClassicRPC.Call(Natives.SET_VEHICLE_BOOST_ACTIVE, objArray2);

                ClassicRPC.Call(Natives.SET_VEHICLE_FORWARD_SPEED, objArray3);

                ClassicRPC.Call(Natives.SET_VEHICLE_BOOST_ACTIVE, objArray4);
            }
        }

        public static void BackwardBoostVehicle()
        {
            object[] objArray4;
            object[] objArray3;
            object[] objArray2;
            int num = PLAYER_PED_ID();
            object[] objArray1 = new object[] { (int)num };
            int num2 = ClassicRPC.Call(Natives.GET_VEHICLE_PED_IS_USING, objArray1);
            objArray2 = new object[] { (int)num2, (int)1, (int)0 };
            objArray3 = new object[] { (int)num2, (float)-100f };
            objArray4 = new object[] { (int)num2, (int)0, (int)0 };

            if (Functions.RPCFunc.IS_PED_IN_VEHICLE(num) == 1 && NewRequestNetworkControl(num2))
            {
                ClassicRPC.Call(Natives.SET_VEHICLE_BOOST_ACTIVE, objArray2);

                ClassicRPC.Call(Natives.SET_VEHICLE_FORWARD_SPEED, objArray3);

                ClassicRPC.Call(Natives.SET_VEHICLE_BOOST_ACTIVE, objArray4);
            }
        }

        public static void TrapInCage(int playerindex, string obj, float[] pos1, float[] pos2, float[] pos3, float[] pos4, float[] pos5, float[] pos6)
        {
            int PED = GET_PLAYER_PED(playerindex);
            if (IS_PED_IN_ANY_VEHICLE(PED) != 0)
            {
                CLEAR_PED_TASKS_IMMEDIATLY(PED);
                Thread.Sleep(350);
                int Veh = Functions.RPCFunc.GET_PLAYERS_LAST_VEHICLE(PED);
                if (NewRequestNetworkControl(Veh))
                {
                    object[] objArray4;
                    object[] objArray3;
                    object[] objArray2;
                    object[] objArray1 = new object[] { (int)PED };
                    objArray2 = new object[] { (int)Veh, (int)1, (int)0 };
                    objArray3 = new object[] { (int)Veh, (float)-100f };
                    objArray4 = new object[] { (int)Veh, (int)0, (int)0 };

                    ClassicRPC.Call(Natives.SET_VEHICLE_BOOST_ACTIVE, objArray2);

                    ClassicRPC.Call(Natives.SET_VEHICLE_FORWARD_SPEED, objArray3);

                    ClassicRPC.Call(Natives.SET_VEHICLE_BOOST_ACTIVE, objArray4);
                }
            }

            int obj1 = Functions.RPCFunc.CREATE_OBJECT(Functions.RPCFunc.STRINGHASH(obj), pos1);
            Functions.RPCFunc.FREEZE_ENTITY_POSITION(obj1, 1);
            Application.DoEvents();
            int obj2 = Functions.RPCFunc.CREATE_OBJECT(Functions.RPCFunc.STRINGHASH(obj), pos2);
            Functions.RPCFunc.FREEZE_ENTITY_POSITION(obj2, 1);
            Application.DoEvents();
            int obj3 = Functions.RPCFunc.CREATE_OBJECT(Functions.RPCFunc.STRINGHASH(obj), pos3);
            Functions.RPCFunc.FREEZE_ENTITY_POSITION(obj3, 1);
            Application.DoEvents();
            int obj4 = Functions.RPCFunc.CREATE_OBJECT(Functions.RPCFunc.STRINGHASH(obj), pos4);
            Functions.RPCFunc.FREEZE_ENTITY_POSITION(obj4, 1);
            Application.DoEvents();
            int obj5 = Functions.RPCFunc.CREATE_OBJECT(Functions.RPCFunc.STRINGHASH(obj), pos5);
            Functions.RPCFunc.FREEZE_ENTITY_POSITION(obj5, 1);
            Application.DoEvents();
            int obj6 = Functions.RPCFunc.CREATE_OBJECT(Functions.RPCFunc.STRINGHASH(obj), pos6);
            Functions.RPCFunc.FREEZE_ENTITY_POSITION(obj6, 1);
            Application.DoEvents();
        }

        public static void KickandBoostVehicle(int listboxx)
        {
            object[] objArray4;
            object[] objArray3;
            object[] objArray2;
            int num = Functions.RPCFunc.GET_PLAYER_PED(listboxx);

            if (Functions.RPCFunc.IS_PED_IN_VEHICLE(num) == 1)
            {
                int num2 = GET_VEHICLE_PED_IS_IN(num);
                Thread.Sleep(400);
                CLEAR_PED_TASKS_IMMEDIATLY(num);
                Thread.Sleep(400);
                object[] objArray1 = new object[] { (int)num };
                objArray2 = new object[] { (int)num2, (int)1, (int)0 };
                objArray3 = new object[] { (int)num2, (float)100f };
                objArray4 = new object[] { (int)num2, (int)0, (int)0 };

                NETWORK_REQUEST_CONTROL_OF_ENTITY(num2);
                ClassicRPC.Call(Natives.SET_VEHICLE_BOOST_ACTIVE, objArray2);
                ClassicRPC.Call(Natives.SET_VEHICLE_FORWARD_SPEED, objArray3);
                ClassicRPC.Call(Natives.SET_VEHICLE_BOOST_ACTIVE, objArray4);
            }
        }

        public static void GodModeVehicle(bool state)
        {
            if (state == true)
            {
                int PID = PLAYER_PED_ID();
                int veh = GET_VEHICLE_PED_IS_IN(PID);

                if (NewRequestNetworkControl(veh))
                {
                    FixVehicle();
                    SET_ENTITY_INVINCIBLE(veh, 1);
                    Functions.RPCFunc.SET_ENTITY_PROOFS(veh, true, true, true, true, true, true, true, true);
                    Functions.RPCFunc.SET_VEHICLE_STRONG(veh, true);
                    Functions.RPCFunc.SET_VEHICLE_CAN_BREAK(veh, true);
                    Functions.RPCFunc.SET_VEHICLE_TYRES_CAN_BURST(veh, true);
                    Functions.RPCFunc.ENTITY_CAN_BE_DAMAGED(veh, 0);
                    Functions.RPCFunc.VEHICLE_CAN_VISIBLY_DAMAGED(veh, 0);
                    ADD_BLIP_VEHICLE(veh, 1);
                }
            }
            else
            {
                int PID = PLAYER_PED_ID();
                int veh = GET_VEHICLE_PED_IS_IN(PID);

                if (NewRequestNetworkControl(veh))
                {
                    FixVehicle();
                    SET_ENTITY_INVINCIBLE(veh, 1);
                    Functions.RPCFunc.SET_ENTITY_PROOFS(veh, false, false, false, false, false, false, false, false);
                    Functions.RPCFunc.SET_VEHICLE_STRONG(veh, false);
                    Functions.RPCFunc.SET_VEHICLE_CAN_BREAK(veh, false);
                    Functions.RPCFunc.SET_VEHICLE_TYRES_CAN_BURST(veh, false);
                    Functions.RPCFunc.ENTITY_CAN_BE_DAMAGED(veh, 1);
                    Functions.RPCFunc.VEHICLE_CAN_VISIBLY_DAMAGED(veh, 1);
                    ADD_BLIP_VEHICLE(veh, 0);
                }
            }
        }

        public static void GodModeVehicleLobby(bool state, int veh)
        {
            if (state == true)
            {
                if (NewRequestNetworkControl(veh))
                {
                    FixVehicle();
                    SET_ENTITY_INVINCIBLE(veh, 1);
                    Functions.RPCFunc.SET_ENTITY_PROOFS(veh, true, true, true, true, true, true, true, true);
                    Functions.RPCFunc.SET_VEHICLE_STRONG(veh, true);
                    Functions.RPCFunc.SET_VEHICLE_CAN_BREAK(veh, true);
                    Functions.RPCFunc.SET_VEHICLE_TYRES_CAN_BURST(veh, true);
                    Functions.RPCFunc.ENTITY_CAN_BE_DAMAGED(veh, 0);
                    Functions.RPCFunc.VEHICLE_CAN_VISIBLY_DAMAGED(veh, 0);
                }
            }
            else
            {
                if (NewRequestNetworkControl(veh))
                {
                    FixVehicle();
                    SET_ENTITY_INVINCIBLE(veh, 1);
                    Functions.RPCFunc.SET_ENTITY_PROOFS(veh, false, false, false, false, false, false, false, false);
                    Functions.RPCFunc.SET_VEHICLE_STRONG(veh, false);
                    Functions.RPCFunc.SET_VEHICLE_CAN_BREAK(veh, false);
                    Functions.RPCFunc.SET_VEHICLE_TYRES_CAN_BURST(veh, false);
                    Functions.RPCFunc.ENTITY_CAN_BE_DAMAGED(veh, 1);
                    Functions.RPCFunc.VEHICLE_CAN_VISIBLY_DAMAGED(veh, 1);
                }
            }
        }

        public static void FreezeVehicle(int list, bool state)
        {
            int num = Functions.RPCFunc.GET_PLAYER_PED(list);
            int num2 = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(num);

            if (state == true)
            {
                if (Functions.RPCFunc.IS_PED_IN_VEHICLE(num) == 1 && NewRequestNetworkControl(num2))
                {
                    Functions.RPCFunc.FREEZE_ENTITY_POSITION(num2, 1);
                }
                else
                {

                }
            }
            else
            {
                if (NewRequestNetworkControl(num2))
                    Functions.RPCFunc.FREEZE_ENTITY_POSITION(num2, 0);
            }
        }

        public static void KickandFreezeVehicle(int list)
        {
            int num = Functions.RPCFunc.GET_PLAYER_PED(list);
            if (IS_PED_IN_ANY_VEHICLE(num) == 1)
            {
                int num2 = GET_VEHICLE_PED_IS_IN(num);
                Thread.Sleep(400);
                CLEAR_PED_TASKS_IMMEDIATLY(num);
                Thread.Sleep(400);
                NETWORK_REQUEST_CONTROL_OF_ENTITY(num2);
                Functions.RPCFunc.FREEZE_ENTITY_POSITION(num2, 1);
            }
        }

        public static void RandomResprayVehicle()
        {
            int num = PLAYER_PED_ID();
            int num2 = Functions.RPCFunc.GET_PED_VEHICLE_IS_IN(num);

            Functions.RPCFunc.SET_VEHICLE_CUSTOM_PRIM_COLOR(num2, Functions.RPCFunc.GET_RANDOM_INT_IN_RANGE(0, 255), Functions.RPCFunc.GET_RANDOM_INT_IN_RANGE(0, 255), Functions.RPCFunc.GET_RANDOM_INT_IN_RANGE(0, 255));
            Functions.RPCFunc.SET_VEHICLE_CUSTOM_SEC_COLOR(num2, Functions.RPCFunc.GET_RANDOM_INT_IN_RANGE(0, 255), Functions.RPCFunc.GET_RANDOM_INT_IN_RANGE(0, 255), Functions.RPCFunc.GET_RANDOM_INT_IN_RANGE(0, 255));
        }

        public static void InvisibleVehicle(bool state)
        {
            if (state == true)
            {
                int num = PLAYER_PED_ID();
                int num2 = Functions.RPCFunc.GET_PED_VEHICLE_IS_IN(num);
                if (NewRequestNetworkControl(num2))
                    Functions.RPCFunc.ENTITY_VISIBLE(num2, false);
            }
            else
            {
                int num = PLAYER_PED_ID();
                int num2 = Functions.RPCFunc.GET_PED_VEHICLE_IS_IN(num);
                if (NewRequestNetworkControl(num2))
                    Functions.RPCFunc.ENTITY_VISIBLE(num2, true);
            }
        }

        public static void VehicleOnFire(int list, bool state)
        {
            if (state == true)
            {
                int num = Functions.RPCFunc.GET_PLAYER_PED(list);
                int num2 = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(num);
                if (Functions.RPCFunc.IS_PED_IN_VEHICLE(num) == 1 && NewRequestNetworkControl(num2))
                {
                    Functions.RPCFunc.SET_VEHICLE_ENGINE_HEALTH(num2, -1f);
                    Functions.RPCFunc.VEHICLE_PETROL_TANK_HEALTH(num2, -1f);
                    Functions.RPCFunc.SET_ENTITY_HEALTH(num2, -1);
                    Functions.RPCFunc.START_ENTITY_FIRE(num2);
                }
            }
            else
            {
                int num = Functions.RPCFunc.GET_PLAYER_PED(list);
                int num2 = Functions.RPCFunc.GET_PED_VEHICLE_IS_IN(num);
                if (Functions.RPCFunc.IS_PED_IN_VEHICLE(num) == 1 && NewRequestNetworkControl(num2))
                {
                    Functions.RPCFunc.SET_VEHICLE_ENGINE_HEALTH(num2, 1f);
                    Functions.RPCFunc.VEHICLE_PETROL_TANK_HEALTH(num2, 1f);
                    Functions.RPCFunc.SET_ENTITY_HEALTH(num2, 1);
                    Functions.RPCFunc.STOP_ENTITY_FIRE(num2);
                }
            }
        }

        public static void KickandVehicleOnFire(int list)
        {
            int num = Functions.RPCFunc.GET_PLAYER_PED(list);
            if (IS_PED_IN_ANY_VEHICLE(num) == 1)
            {
                int num2 = GET_VEHICLE_PED_IS_IN(num);
                Thread.Sleep(400);
                Functions.RPCFunc.CLEAR_PED_TASKS_IMMEDIATLY(num);
                Thread.Sleep(400);
                NETWORK_REQUEST_CONTROL_OF_ENTITY(num2);
                Functions.RPCFunc.SET_VEHICLE_ENGINE_HEALTH(num2, -1f);
                Functions.RPCFunc.VEHICLE_PETROL_TANK_HEALTH(num2, -1f);
                Functions.RPCFunc.SET_ENTITY_HEALTH(num2, -1);
                Functions.RPCFunc.START_ENTITY_FIRE(num2);
            }
        }

        public static void FixVehicle()
        {
            int num = PLAYER_PED_ID();
            int num2 = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(num);
            float num3 = 0f;
            object[] objArray4 = new object[] { (int)num2, (float)num3 };
            if (Functions.RPCFunc.IS_PED_IN_VEHICLE(num) == 1 && NewRequestNetworkControl(num2))
            {
                ClassicRPC.Call(Natives.SET_VEHICLE_FIXED, num2);
                ClassicRPC.Call(Natives.SET_VEHICLE_DEFORMATION_FIXED, num2);
                ClassicRPC.Call(Natives.SET_VEHICLE_DIRT_LEVEL, objArray4);
            }
        }

        public static void ExplodePlayer(int list)
        {
            int PED_ID = GET_PLAYER_PED(list);
            int selectedIndex = list;
            float[] entityCoords = GET_ENTITY_COORDS(GET_PLAYER_PED(list));
            int type = 5;
            Owned_Explosion(PED_ID, entityCoords, type);
        }

        public static void LagPlayer(int list)
        {
            int_2 = GET_PLAYER_PED(list);
            float_0 = GET_ENTITY_COORDS(int_2);
            ++float_0[0];
            float_0[1] -= 0.0f;
            int hashKey = GET_HASH_KEY("CARGOPLANE");
            do
            {
                REQUEST_MODEL(hashKey);
                Application.DoEvents();
            }
            while (HAS_MODEL_LOADED(hashKey) != 1);
            int num2;
            object[] objArray;
            do
            {
                int_1 = CREATE_VEHICLE(hashKey, float_0);
                Thread.Sleep(10);
                int_1 = CREATE_VEHICLE(hashKey, float_0);
                Thread.Sleep(10);
                int_1 = CREATE_VEHICLE(hashKey, float_0);
                Thread.Sleep(10);
                int_1 = CREATE_VEHICLE(hashKey, float_0);
                Thread.Sleep(10);
                int_1 = CREATE_VEHICLE(hashKey, float_0);
                Thread.Sleep(10);
                int_1 = CREATE_VEHICLE(hashKey, float_0);

                for (int index = 0; index < 5; ++index)
                    RPC3.Call(OLDNatives.CLEAR_PED_TASKS_IMMEDIATELY, (object)int_2);

                RPC3.Call(OLDNatives.CLEAR_PED_TASKS_IMMEDIATELY, (object)int_2);
                Application.DoEvents();
                num2 = (int)OLDNatives.DOES_ENTITY_EXIST;
                objArray = new object[1]
                {
            (object) int_1
                };
            }
            while (RPCHook.Call((uint)num2, objArray) != 1);
        }

        public static void SendEnemyClone(int list)
        {
            int playerPedsprx = GET_PLAYER_PEDSPRX(list);
            float[] numArray1 = new float[3];
            numArray1[1] = -15f;
            float[] numArray2 = numArray1;
            RPCHook.Call2<float[]>(OLDNatives.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, (object)playerPedsprx, (object)numArray2);
            for (int index = 0; index < 1; ++index)
                EntityCreated2[aaa] = RPCHook.Call(OLDNatives.CLONE_PED, (object)playerPedsprx);
            int num;
            object[] objArray;
            do
            {
                num = (int)OLDNatives.DOES_ENTITY_EXIST;
                objArray = new object[1]
                {
          (object) EntityCreated2[aaa]
                };
            }
            while (RPCHook.Call((uint)num, objArray) != 1);

            int hashKeysprx2 = GET_HASH_KEYSPRX("WEAPON_CARBINERIFLE");
            GIVE_DELAYED_WEAPON_TO_PED(EntityCreated2[aaa], hashKeysprx2);
            SET_PED_CAN_SWITCH_WEAPON(EntityCreated2[aaa]);
            SET_PED_ARMOUR(EntityCreated2[aaa]);
            ADD_ARMOUR_TO_PED(EntityCreated2[aaa], 100);
            SET_PED_AS_ENEMY(playerPedsprx);
            SET_ENTITY_IS_TARGET_PRIORITY(playerPedsprx);
            TASK_SHOOT_AT_ENTITY(EntityCreated2[aaa], playerPedsprx);
            TASK_COMBAT_PED(EntityCreated2[aaa], playerPedsprx);
            SET_PED_KEEP_TASK(EntityCreated2[aaa]);
            SET_PED_SHOOT_RATE(EntityCreated2[aaa]);
            SET_PED_COMBAT_ABILITY(EntityCreated2[aaa]);
            SET_PED_COMBAT_ATTRIBUTES(EntityCreated2[aaa]);
            SET_PED_COMBAT_RANGE(EntityCreated2[aaa]);
            SET_PED_ACCURACY(EntityCreated2[aaa]);
            SET_PED_COMBAT_MOVEMENT(EntityCreated2[aaa]);
            SET_PED_FIRING_PATTERN(EntityCreated2[aaa]);
            SET_CAN_ATTACK_FRIENDLY(EntityCreated2[aaa], 0);
            SET_PED_MONEY(EntityCreated2[aaa], 10000);
            SET_ENTITY_INVINCIBLE(EntityCreated2[aaa], 0);

            ++aaa;
            ++sss;
            SET_PED_MONEY(EntityCreated2[aaa], 10000);
            ++aaa;
            SET_MODEL_AS_NO_LONGER_NEEDED(EntityCreated2[aaa]);
        }

        public static void GlitchMovements(int list, bool state)
        {
            int num = Functions.RPCFunc.GET_PLAYER_PED(list);

            if (state == true)
            {
                if (NewRequestNetworkControl(num))
                    Functions.RPCFunc.FREEZE_ENTITY_POSITION(num, 1);
            }
            else
            {
                if (NewRequestNetworkControl(num))
                    Functions.RPCFunc.FREEZE_ENTITY_POSITION(num, 0);
            }
        }

        public static void SendMoney(string txt, int list)
        {
            float[] numArray;
            int num2;
            int num4;
            num2 = 0;

            while (num2 < txt.Length)
            {
                if (txt.Contains(","))
                {
                    int index = txt.IndexOf(",");
                    txt.Remove(index);
                }
                num2++;
            }
            if (int.TryParse(txt, out num4))
            {
                int num5 = num4 / 0x7d0;
                int num6 = num4 % 0x7d0;
                numArray = Functions.RPCFunc.GET_COORDS(Functions.RPCFunc.GET_PLAYER_PED(list));
                for (num2 = 0; num2 < num5; num2++)
                {
                    Functions.RPCFunc.AMBIENT_PICKUP(0x711d02a4, numArray, 0x7d0);
                    Thread.Sleep(10);
                }
                if (num6 > 0)
                {
                    Functions.RPCFunc.AMBIENT_PICKUP(0x711d02a4, numArray, num6);
                }
            }
            else
            {

            }
        }

        public static void DropMoneyModel(string Model, float[] Pos)
        {
            int ModelHash = GET_HASH_KEY(Model);
            int PickupHash = GET_HASH_KEY("PICKUP_MONEY_CASE");

            REQUEST_MODEL(ModelHash);
            if (HAS_MODEL_LOADED(ModelHash) != 0)
            {
                Functions.RPCFunc.CREATE_AMBIENT_PICKUP2(PickupHash, Pos, 0, 20000, ModelHash, 0, 1);
                SET_MODEL_AS_NO_LONGER_NEEDED(ModelHash);
            }
        }

        public static void GiveFiveStars(int list)
        {
            RPC3.Call(OLDNatives.SET_DISPATCH_COPS_FOR_PLAYER, (object)list, (object)1);
            RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL, (object)list, (object)5, (object)1);
            RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NOW, (object)list, (object)1);
            RPC3.Call(OLDNatives.SET_WANTED_LEVEL_MULTIPLIER, (object)10);
            RPC3.Call(OLDNatives.SET_WANTED_LEVEL_DIFFICULTY, (object)list, (object)10);
            RPC3.Call(OLDNatives.REPORT_CRIME, (object)list, (object)36, (object)OLDNatives.GET_WANTED_LEVEL_THRESHOLD, (object)5);
        }

        public static void GiveStars(int list, int stars)
        {
            RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL, (object)list, (object)stars, (object)0);
            RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NOW, (object)list, (object)0);
        }

        public void SendEnemy(int list, string comboB, string weap, bool GodMode)
        {
            int hashKeysprx1 = GET_HASH_KEYSPRX(comboB);
            int playerPedsprx = GET_PLAYER_PEDSPRX(list);
            float[] numArray1 = new float[3];
            numArray1[1] = -15f;
            float[] numArray2 = numArray1;
            float[] coords = RPCHook.Call2<float[]>(OLDNatives.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, (object)playerPedsprx, (object)numArray2);
            Convert.ToInt32(1);
            Convert.ToInt32(1);
            do
            {
                REQUEST_MODEL(hashKeysprx1);
                Application.DoEvents();
            }
            while (HAS_MODEL_LOADED(hashKeysprx1) != 1);
            int num2;
            object[] objArray;
            do
            {
                EntityCreated2[aaa] = CREATE_PED(hashKeysprx1, coords);
                Application.DoEvents();
                num2 = (int)OLDNatives.DOES_ENTITY_EXIST;
                objArray = new object[1]
                {
            (object) EntityCreated2[aaa]
                };
            }
            while (RPCHook.Call((uint)num2, objArray) != 1);
            if (!(comboB == "A_C_COW") && !(comboB == "A_C_DEER") && (!(comboB == "A_C_HUSKY") && !(comboB == "A_C_RETRIEVER")) && (!(comboB == "A_C_ROTTWEILER") && !(comboB == "A_C_PIG") && (!(comboB == "A_C_COYOTE") && !(comboB == "A_C_MTLION"))) && (!(comboB == "A_C_SHEPHERD") && !(comboB == "A_C_CHOP") && (!(comboB == "A_C_BOAR") && !(comboB == "A_C_CHICKENHAWK")) && (!(comboB == "A_C_CORMORANT") && !(comboB == "A_C_CROW") && (!(comboB == "A_C_PIGEON") && !(comboB == "A_C_SEAGULL")))) && (!(comboB == "A_C_CHIMP") && !(comboB == "A_C_FISH") && (!(comboB == "A_C_HEN") && !(comboB == "A_C_RAT")) && (!(comboB == "A_C_RETRIEVER") && !(comboB == "A_C_RHESUS") && !(comboB == "A_C_SHARKTIGER"))))
            {
                int hashKeysprx3 = GET_HASH_KEYSPRX("WEAPON_KNIFE");
                ClassicRPC.NCall(NewNatives.GIVE_WEAPON_TO_PED, new object[] { EntityCreated2[aaa], Functions.Weapons.WeaponsU[comboBoxEdit87.SelectedIndex], 0x270f, 0, 1 });
                GIVE_DELAYED_WEAPON_TO_PED(EntityCreated2[aaa], hashKeysprx3);
                SET_PED_CAN_SWITCH_WEAPON(EntityCreated2[aaa]);
                SET_PED_ARMOUR(EntityCreated2[aaa]);
                ADD_ARMOUR_TO_PED(EntityCreated2[aaa], 100);
                SET_PED_AS_ENEMY(playerPedsprx);
                SET_ENTITY_IS_TARGET_PRIORITY(playerPedsprx);
                TASK_SHOOT_AT_ENTITY(EntityCreated2[aaa], playerPedsprx);
                TASK_COMBAT_PED(EntityCreated2[aaa], playerPedsprx);
                SET_PED_KEEP_TASK(EntityCreated2[aaa]);
                SET_PED_SHOOT_RATE(EntityCreated2[aaa]);
                SET_PED_COMBAT_ABILITY(EntityCreated2[aaa]);
                SET_PED_COMBAT_ATTRIBUTES(EntityCreated2[aaa]);
                SET_PED_COMBAT_RANGE(EntityCreated2[aaa]);
                SET_PED_ACCURACY(EntityCreated2[aaa]);
                SET_PED_COMBAT_MOVEMENT(EntityCreated2[aaa]);
                SET_PED_FIRING_PATTERN(EntityCreated2[aaa]);
                SET_CAN_ATTACK_FRIENDLY(EntityCreated2[aaa], 0);
                SET_DRIVER_ABILITY(EntityCreated2[aaa]);
                SET_DRIVER_AGGRESSIVENESS(EntityCreated2[aaa]);
                SET_PED_MONEY(EntityCreated2[aaa], 10000);
            }
            else
            {
                REMOVE_ALL_PED_WEAPONS(EntityCreated2[aaa]);
                TASK_COMBAT_PED(EntityCreated2[aaa], playerPedsprx);
                SET_PED_KEEP_TASK(EntityCreated2[aaa]);
                SET_PED_AS_ENEMY(playerPedsprx);
                SET_ENTITY_IS_TARGET_PRIORITY(playerPedsprx);
                SET_PED_SHOOT_RATE(EntityCreated2[aaa]);
                SET_PED_ARMOUR(EntityCreated2[aaa]);
                ADD_ARMOUR_TO_PED(EntityCreated2[aaa], 100);
                SET_PED_COMBAT_ABILITY(EntityCreated2[aaa]);
                SET_PED_COMBAT_ATTRIBUTES(EntityCreated2[aaa]);
                SET_PED_COMBAT_RANGE(EntityCreated2[aaa]);
                SET_PED_ACCURACY(EntityCreated2[aaa]);
                SET_PED_COMBAT_MOVEMENT(EntityCreated2[aaa]);
            }
            if (GodMode)
            {
                SET_ENTITY_INVINCIBLE(EntityCreated2[aaa], 1);
            }
            else if (!GodMode)
            {
                SET_ENTITY_INVINCIBLE(EntityCreated2[aaa], 0);
            }
            ++aaa;
            ++sss;
            if (comboB == "A_C_SHARKTIGER")
                Functions.RPCFunc.TASK_START_SCENARIO_IN_PLACE(EntityCreated2[aaa], "WORLD_SHARK_SWIM");
            SET_PED_MONEY(EntityCreated2[aaa], 10000);
            ++aaa;
            SET_MODEL_AS_NO_LONGER_NEEDED(hashKeysprx1);
        }

        public static bool requestcontrol(int list)
        {
            if (IS_PED_IN_ANY_VEHICLE(GET_PLAYER_PED(list)) > 0)
            {
                int num = 0;
                while (num <= 0)
                {
                    if (method_3(list) > 0)
                        return true;
                }
            }
            return false;
        }

        public static int method_3(int list)
        {
            if (stopcalling)
                return 0;
            int playerPed = GET_PLAYER_PED(list);
            if (IS_PED_IN_ANY_VEHICLE(playerPed) <= 0)
                return 0;
            return RPCHook.Call(OLDNatives.NETWORK_REQUEST_CONTROL_OF_ENTITY, (object)GET_VEHICLE_PED_IS_IN(playerPed));
        }

        public static int CREATE_PED_2(string Modellist, float[] Coord)
        {
            int hash = GET_HASH_KEY(Modellist);
            RPCHook.Call(Natives.REQUEST_MODEL, new object[] { hash });
            Thread.Sleep(1500);
            int num2 = 0;
            if (RPCHook.Call(Natives.HAS_MODEL_LOADED, new object[] { hash }) == 1)
            {
                num2 = RPCHook.Call(Natives.CREATE_PED, new object[] { 0x15, hash, Coord, 0f, 1, 0 });
                RPCHook.CompleteReq();
                RPCHook.Call(Natives.SET_MODEL_AS_NO_LONGER_NEEDED, new object[] { hash });
            }
            return num2;
        }

        public int SpawnBodyguard(int list, string bodyguardmodel, string weap, bool GM)
        {
            int PED = GET_PLAYER_PED(list);
            float[] numArray1 = new float[3];
            numArray1[1] = 3f;
            float[] numArray2 = numArray1;
            float[] Coord = RPCHook.Call2<float[]>(OLDNatives.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, (object)PED, (object)numArray2);
            int hash = GET_HASH_KEYSPRX(bodyguardmodel);
            do
            {
                REQUEST_MODEL(hash);
                Application.DoEvents();
            }
            while (HAS_MODEL_LOADED(hash) != 1);
            int Spawned = CREATE_PED(hash, Coord);
            int num2 = RPCHook.Call(Natives.GET_PLAYER_GROUP, new object[] { PED });
            while (RPCHook.Call((uint)OLDNatives.DOES_ENTITY_EXIST, Spawned) != 1);
            RPCHook.CompleteReq();
            RPCHook.Call(Natives.SET_PED_AS_GROUP_MEMBER, new object[] { Spawned, num2 });
            GIVE_DELAYED_WEAPON_TO_PED(Spawned, GET_HASH_KEYSPRX("WEAPON_KNIFE"));
            ClassicRPC.NCall(NewNatives.GIVE_WEAPON_TO_PED, new object[] { Spawned, Functions.Weapons.WeaponsU[comboBoxEdit89.SelectedIndex], 0x270f, 0, 1 });
            SET_PED_CAN_SWITCH_WEAPON(Spawned);
            SET_PED_ARMOUR(Spawned);
            ADD_ARMOUR_TO_PED(Spawned, 100);
            SET_PED_SHOOT_RATE(Spawned);
            SET_PED_COMBAT_ABILITY(Spawned);
            SET_PED_COMBAT_ATTRIBUTES(Spawned);
            SET_PED_COMBAT_RANGE(Spawned);
            SET_PED_ACCURACY(Spawned);
            SET_PED_COMBAT_MOVEMENT(Spawned);
            SET_PED_MONEY(Spawned, 10000);

            if (GM == true)
                SET_ENTITY_INVINCIBLE(Spawned, 1);
            
            SET_MODEL_AS_NO_LONGER_NEEDED(hash);
            return Spawned;
        }

        public void SendEnemyInCar(int list, string pedmodel, string vehmodel, string weap, bool GodModeVehicle, bool MaxUp, bool Need4Sp)
        {
            int hashKey1 = GET_HASH_KEY(vehmodel);
            int hashKey2 = GET_HASH_KEY(pedmodel);
            int playerPed1 = GET_PLAYER_PED(list);
            int hashKey4 = GET_HASH_KEY("WEAPON_KNIFE");
            int group = CREATE_GROUP(0);
            float[] entityCoords1 = GET_ENTITY_COORDS(playerPed1);
            ++entityCoords1[0];
            entityCoords1[1] -= 15f;
            do
            {
                REQUEST_MODEL(hashKey1);
                Application.DoEvents();
            }
            while (HAS_MODEL_LOADED(hashKey1) != 1);
            float[] entityCoords2 = GET_ENTITY_COORDS(playerPed1);
            int num2;
            object[] objArray1;
            do
            {
                Random random = new Random();
                entityCoords2[0] += (float)random.Next(-Convert.ToInt32(8f), Convert.ToInt32(8f));
                entityCoords2[1] += (float)random.Next(-Convert.ToInt32(8f), Convert.ToInt32(8f));
                entityCoords2[2] += Convert.ToSingle(30f);
                zzz[sss] = CREATE_VEHICLE2(hashKey1, entityCoords1);
                Thread.Sleep(150);
                num2 = (int)OLDNatives.DOES_ENTITY_EXIST;
                objArray1 = new object[1] { zzz[sss] };
            }
            while (RPCHook.Call((uint)num2, objArray1) != 1);
            RPCHook.Call2<int>(OLDNatives.SET_VEHICLE_ENGINE_ON, (object)zzz[sss], (object)1, (object)1);
            int num3;
            if (!RPCHook.Call2<bool>(OLDNatives.IS_THIS_MODEL_A_HELI, (object)RPCHook.Call2<int>(OLDNatives.GET_ENTITY_MODEL, (object)zzz[sss])))
                num3 = !RPCHook.Call2<bool>(OLDNatives.IS_THIS_MODEL_A_PLANE, (object)RPCHook.Call2<int>(OLDNatives.GET_ENTITY_MODEL, (object)zzz[sss])) ? 1 : 0;
            else
                num3 = 0;
            if (num3 == 0)
                RPCHook.Call2<int>(OLDNatives.SET_HELI_BLADES_FULL_SPEED, (object)zzz[sss]);
            do
            {
                REQUEST_MODEL(hashKey2);
                Application.DoEvents();
            }
            while (HAS_MODEL_LOADED(hashKey2) != 1);
            int num4;
            object[] objArray2;
            do
            {
                EntityCreated2[aaa] = CREATE_PED(hashKey2, entityCoords1);
                Application.DoEvents();
                num4 = (int)OLDNatives.DOES_ENTITY_EXIST;
                objArray2 = new object[1] { EntityCreated2[aaa] };
            }
            while (RPCHook.Call((uint)num4, objArray2) != 1);
            SET_PED_INTO_VEHICLE(EntityCreated2[aaa], zzz[sss], -1);
            SET_PED_AS_GROUP_LEADER(EntityCreated2[aaa], group);
            ClassicRPC.NCall(NewNatives.GIVE_WEAPON_TO_PED, new object[] { EntityCreated2[aaa], Functions.Weapons.WeaponsU[comboBoxEdit88.SelectedIndex], 0x270f, 0, 1 });
            GIVE_DELAYED_WEAPON_TO_PED(EntityCreated2[aaa], hashKey4);
            SET_PED_CAN_SWITCH_WEAPON(EntityCreated2[aaa]);
            SET_PED_AS_ENEMY(playerPed1);
            SET_ENTITY_IS_TARGET_PRIORITY(playerPed1);
            SET_PED_SHOOT_RATE(EntityCreated2[aaa]);
            SET_PED_ARMOUR(EntityCreated2[aaa]);
            ADD_ARMOUR_TO_PED(EntityCreated2[aaa], 100);
            SET_PED_COMBAT_ABILITY(EntityCreated2[aaa]);
            SET_PED_COMBAT_ATTRIBUTES(EntityCreated2[aaa]);
            SET_PED_COMBAT_RANGE(EntityCreated2[aaa]);
            SET_PED_ACCURACY(EntityCreated2[aaa]);
            SET_PED_COMBAT_MOVEMENT(EntityCreated2[aaa]);
            SET_PED_FIRING_PATTERN(EntityCreated2[aaa]);
            SET_CAN_ATTACK_FRIENDLY(EntityCreated2[aaa], 0);
            SET_DRIVER_ABILITY(EntityCreated2[aaa]);
            SET_DRIVER_AGGRESSIVENESS(EntityCreated2[aaa]);
            SET_PED_AS_ENEMY(playerPed1);
            SET_ENTITY_IS_TARGET_PRIORITY(playerPed1);
            TASK_SHOOT_AT_ENTITY(EntityCreated2[aaa], playerPed1);
            TASK_COMBAT_PED(EntityCreated2[aaa], playerPed1);
            SET_PED_MONEY(EntityCreated2[aaa], 10000);
            int num5 = 1;
            for (int seat = 0; seat < num5; ++seat)
            {
                int num6;
                object[] objArray3;
                do
                {
                    EntityCreated3[bbb] = CREATE_PED(hashKey2, entityCoords1);
                    Application.DoEvents();
                    num6 = (int)OLDNatives.DOES_ENTITY_EXIST;
                    objArray3 = new object[1]
                    {
              (object) EntityCreated3[bbb]
                    };
                }
                while (RPCHook.Call((uint)num6, objArray3) != 1);
                SET_PED_INTO_VEHICLE(EntityCreated3[bbb], zzz[sss], seat);
                SET_PED_AS_GROUP_MEMBER(EntityCreated3[bbb], group);
                SET_PED_NEVER_LEAVES_GROUP(EntityCreated3[bbb], group);
                ClassicRPC.NCall(NewNatives.GIVE_WEAPON_TO_PED, new object[] { EntityCreated3[bbb], Functions.Weapons.WeaponsU[comboBoxEdit88.SelectedIndex], 0x270f, 0, 1 });
                GIVE_DELAYED_WEAPON_TO_PED(EntityCreated3[bbb], hashKey4);
                SET_PED_CAN_SWITCH_WEAPON(EntityCreated3[bbb]);
                SET_PED_AS_ENEMY(playerPed1);
                SET_ENTITY_IS_TARGET_PRIORITY(playerPed1);
                SET_PED_SHOOT_RATE(EntityCreated3[bbb]);
                SET_PED_ARMOUR(EntityCreated3[bbb]);
                ADD_ARMOUR_TO_PED(EntityCreated3[bbb], 100);
                SET_PED_COMBAT_ABILITY(EntityCreated3[bbb]);
                SET_PED_COMBAT_ATTRIBUTES(EntityCreated3[bbb]);
                SET_PED_COMBAT_RANGE(EntityCreated3[bbb]);
                SET_PED_ACCURACY(EntityCreated3[bbb]);
                SET_PED_COMBAT_MOVEMENT(EntityCreated3[bbb]);
                SET_PED_FIRING_PATTERN(EntityCreated3[bbb]);
                SET_CAN_ATTACK_FRIENDLY(EntityCreated3[bbb], 0);
                SET_DRIVER_ABILITY(EntityCreated3[bbb]);
                SET_DRIVER_AGGRESSIVENESS(EntityCreated3[bbb]);
                SET_PED_AS_ENEMY(playerPed1);
                SET_ENTITY_IS_TARGET_PRIORITY(playerPed1);
                TASK_SHOOT_AT_ENTITY(EntityCreated3[bbb], playerPed1);
                TASK_COMBAT_PED(EntityCreated3[bbb], playerPed1);
                SET_PED_MONEY(EntityCreated3[bbb], 10000);
            }
            if (GodModeVehicle)
            {
                uint func_address1 = OLDNatives.SET_ENTITY_CAN_BE_DAMAGED;
                uint func_address2 = OLDNatives.SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED;
                int playerPed2 = GET_PLAYER_PED(list);
                if (IS_PED_IN_ANY_VEHICLE(playerPed2) <= 0)
                    return;
                int vehiclePedIsIn = GET_VEHICLE_PED_IS_IN(playerPed2);
                if (vehiclePedIsIn > 0 && requestcontrol(list))
                    RPCHook.Call(func_address1, (object)vehiclePedIsIn, (object)0);
                RPCHook.Call(func_address2, (object)vehiclePedIsIn, (object)0);
                SET_ENTITY_INVINCIBLE(zzz[sss], 1);
                SET_ENTITY_INVINCIBLE(EntityCreated2[aaa], 1);
                ADD_BLIP_VEHICLE(zzz[sss], 1);
                Functions.RPCFunc.SET_ENTITY_PROOFS(zzz[sss], true, true, true, true, true, true, true, true);
                ADD_BLIP_PED(EntityCreated2[aaa], 1);
                SET_ENTITY_CAN_BE_DAMAGED(EntityCreated2[aaa], 0);
                SET_ENTITY_INVINCIBLE(EntityCreated2[aaa], 1);
                SET_ENTITY_CAN_BE_DAMAGED(EntityCreated3[bbb], 0);
                SET_ENTITY_INVINCIBLE(EntityCreated3[bbb], 1);
                ADD_BLIP_BODYGAURD(EntityCreated2[aaa], Convert.ToInt32(1));
            }
            else if (!GodModeVehicle)
            {
                uint func_address1 = OLDNatives.SET_ENTITY_CAN_BE_DAMAGED;
                uint func_address2 = OLDNatives.SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED;
                int playerPed2 = GET_PLAYER_PED(list);
                if (IS_PED_IN_ANY_VEHICLE(playerPed2) <= 0)
                    return;
                int vehiclePedIsIn = GET_VEHICLE_PED_IS_IN(playerPed2);
                if (vehiclePedIsIn > 0 && requestcontrol(list))
                    RPCHook.Call(func_address1, (object)vehiclePedIsIn, (object)1);
                RPCHook.Call(func_address2, (object)vehiclePedIsIn, (object)1);
                SET_ENTITY_CAN_BE_DAMAGED(EntityCreated2[aaa], 1);
                SET_ENTITY_INVINCIBLE(EntityCreated2[aaa], 0);
                SET_ENTITY_CAN_BE_DAMAGED(EntityCreated3[bbb], 1);
                SET_ENTITY_INVINCIBLE(EntityCreated3[bbb], 0);
            }
            if (MaxUp)
            {
                if (IS_PED_IN_ANY_VEHICLE(playerPed1) != 0)
                {
                    int VehIn = GET_VEHICLE_PED_IS_IN(playerPed1);
                    Functions.RPCFunc.NETWORK_REQUEST_CONTROL_ENTITY(VehIn);
                    Functions.RPCFunc.SET_VEHICLE_CUSTOM_PRIM_COLOR(VehIn, 0, 0, 0);
                    Functions.RPCFunc.SET_VEHICLE_CUSTOM_SEC_COLOR(VehIn, 0, 0, 0);
                    Functions.RPCFunc.SET_VEHICLE_MOD_KIT(VehIn, 0);
                    Functions.RPCFunc.SET_VEHICLE_COLOURS(VehIn, 120, 120);
                    Functions.RPCFunc.SET_VEHICLE_NUMBER_PLATE_TEXT(VehIn, "PylezZo");
                    Functions.RPCFunc.SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(VehIn, 1);
                    Functions.RPCFunc.TOGGLE_VEHICLE_MOD(VehIn, 18, 1);
                    Functions.RPCFunc.TOGGLE_VEHICLE_MOD(VehIn, 22, 1);
                    Functions.RPCFunc.SET_VEHICLE_MOD2(VehIn, 16, 5, 0);
                    Functions.RPCFunc.SET_VEHICLE_MOD2(VehIn, 12, 2, 0);
                    Functions.RPCFunc.SET_VEHICLE_MOD2(VehIn, 11, 3, 0);
                    Functions.RPCFunc.SET_VEHICLE_MOD2(VehIn, 14, 14, 0);
                    Functions.RPCFunc.SET_VEHICLE_MOD2(VehIn, 15, 3, 0);
                    Functions.RPCFunc.SET_VEHICLE_MOD2(VehIn, 13, 2, 0);
                    Functions.RPCFunc.SET_VEHICLE_WHEEL_TYPE(VehIn, 6);
                    Functions.RPCFunc.SET_VEHICLE_WINDOW_TINT(VehIn, 5);
                    Functions.RPCFunc.SET_VEHICLE_MOD2(VehIn, 23, 19, 1);
                    Functions.RPCFunc.SET_VEHICLE_MOD2(VehIn, 0, 1, 0);
                    Functions.RPCFunc.SET_VEHICLE_MOD2(VehIn, 1, 1, 0);
                    Functions.RPCFunc.SET_VEHICLE_MOD2(VehIn, 2, 1, 0);
                    Functions.RPCFunc.SET_VEHICLE_MOD2(VehIn, 3, 1, 0);
                    Functions.RPCFunc.SET_VEHICLE_MOD2(VehIn, 4, 1, 0);
                    Functions.RPCFunc.SET_VEHICLE_MOD2(VehIn, 5, 1, 0);
                    Functions.RPCFunc.SET_VEHICLE_MOD2(VehIn, 6, 1, 0);
                    Functions.RPCFunc.SET_VEHICLE_MOD2(VehIn, 7, 1, 0);
                    Functions.RPCFunc.SET_VEHICLE_MOD2(VehIn, 8, 1, 0);
                    Functions.RPCFunc.SET_VEHICLE_MOD2(VehIn, 9, 1, 0);
                    Functions.RPCFunc.SET_VEHICLE_MOD2(VehIn, 10, 1, 0);
                    Functions.RPCFunc.SET_VEHICLE_CUSTOM_PRIM_COLOR(VehIn, 255, 0, 0);
                }
            }
            if (Need4Sp)
            {
                if (IS_PED_IN_ANY_VEHICLE(playerPed1) != 0)
                {
                    int VehIn = GET_VEHICLE_PED_IS_IN(playerPed1);
                    SET_VEHICLE_ENGINE_POWER_MULTIPLIER(VehIn, 50f);
                }
            }
            ++sss;
            ++aaa;
            ++bbb;
            SET_MODEL_AS_NO_LONGER_NEEDED(hashKey2);
            SET_MODEL_AS_NO_LONGER_NEEDED(hashKey1);
        }

        public static void SendTank(int list)
        {
            int hashKey1 = GET_HASH_KEY("RHINO");
            int hashKey2 = GET_HASH_KEY("S_M_Y_SWAT_01");
            int playerPed1 = GET_PLAYER_PED(list);
            int hashKey4 = GET_HASH_KEY("WEAPON_KNIFE");
            int group = CREATE_GROUP(0);
            float[] entityCoords1 = GET_ENTITY_COORDS(playerPed1);
            ++entityCoords1[0];
            entityCoords1[1] -= 15f;
            do
            {
                REQUEST_MODEL(hashKey1);
                Application.DoEvents();
            }
            while (HAS_MODEL_LOADED(hashKey1) != 1);
            float[] entityCoords2 = GET_ENTITY_COORDS(playerPed1);
            int num2;
            object[] objArray1;
            do
            {
                Random random = new Random();
                entityCoords2[0] += (float)random.Next(-Convert.ToInt32(8f), Convert.ToInt32(8f));
                entityCoords2[1] += (float)random.Next(-Convert.ToInt32(8f), Convert.ToInt32(8f));
                entityCoords2[2] += Convert.ToSingle(30f);
                zzz[sss] = CREATE_VEHICLE2(hashKey1, entityCoords1);
                SET_VEHICLE_ENGINE_POWER_MULTIPLIER(zzz[sss], 40f);
                Thread.Sleep(150);
                num2 = (int)OLDNatives.DOES_ENTITY_EXIST;
                objArray1 = new object[1]
                {
            (object) zzz[sss]
                };
            }
            while (RPCHook.Call((uint)num2, objArray1) != 1);
            RPCHook.Call2<int>(OLDNatives.SET_VEHICLE_ENGINE_ON, (object)zzz[sss], (object)1, (object)1);
            
            do
            {
                REQUEST_MODEL(hashKey2);
                Application.DoEvents();
            }
            while (HAS_MODEL_LOADED(hashKey2) != 1);
            int num4;
            object[] objArray2;
            do
            {
                EntityCreated2[aaa] = CREATE_PED(hashKey2, entityCoords1);
                Application.DoEvents();
                num4 = (int)OLDNatives.DOES_ENTITY_EXIST;
                objArray2 = new object[1]
                {
            (object) EntityCreated2[aaa]
                };
            }
            while (RPCHook.Call((uint)num4, objArray2) != 1);
            SET_PED_INTO_VEHICLE(EntityCreated2[aaa], zzz[sss], -1);
            SET_PED_AS_GROUP_LEADER(EntityCreated2[aaa], group);
            GIVE_DELAYED_WEAPON_TO_PED(EntityCreated2[aaa], hashKey4);
            SET_PED_CAN_SWITCH_WEAPON(EntityCreated2[aaa]);
            SET_PED_AS_ENEMY(playerPed1);
            SET_ENTITY_IS_TARGET_PRIORITY(playerPed1);
            SET_PED_SHOOT_RATE(EntityCreated2[aaa]);
            SET_PED_ARMOUR(EntityCreated2[aaa]);
            ADD_ARMOUR_TO_PED(EntityCreated2[aaa], 100);
            SET_PED_COMBAT_ABILITY(EntityCreated2[aaa]);
            SET_PED_COMBAT_ATTRIBUTES(EntityCreated2[aaa]);
            SET_PED_COMBAT_RANGE(EntityCreated2[aaa]);
            SET_PED_ACCURACY(EntityCreated2[aaa]);
            SET_PED_COMBAT_MOVEMENT(EntityCreated2[aaa]);
            SET_PED_FIRING_PATTERN(EntityCreated2[aaa]);
            SET_CAN_ATTACK_FRIENDLY(EntityCreated2[aaa], 0);
            SET_DRIVER_ABILITY(EntityCreated2[aaa]);
            SET_DRIVER_AGGRESSIVENESS(EntityCreated2[aaa]);
            SET_PED_AS_ENEMY(playerPed1);
            SET_ENTITY_IS_TARGET_PRIORITY(playerPed1);
            TASK_SHOOT_AT_ENTITY(EntityCreated2[aaa], playerPed1);
            TASK_COMBAT_PED(EntityCreated2[aaa], playerPed1);
            SET_PED_MONEY(EntityCreated2[aaa], 10000);
            int num5 = 1;
            for (int seat = 0; seat < num5; ++seat)
            {
                int num6;
                object[] objArray3;
                do
                {
                    EntityCreated3[bbb] = CREATE_PED(hashKey2, entityCoords1);
                    Application.DoEvents();
                    num6 = (int)OLDNatives.DOES_ENTITY_EXIST;
                    objArray3 = new object[1]
                    {
              (object) EntityCreated3[bbb]
                    };
                }
                while (RPCHook.Call((uint)num6, objArray3) != 1);
                SET_PED_INTO_VEHICLE(EntityCreated3[bbb], zzz[sss], seat);
                SET_PED_AS_GROUP_MEMBER(EntityCreated3[bbb], group);
                SET_PED_NEVER_LEAVES_GROUP(EntityCreated3[bbb], group);
                GIVE_DELAYED_WEAPON_TO_PED(EntityCreated3[bbb], hashKey4);
                SET_PED_CAN_SWITCH_WEAPON(EntityCreated3[bbb]);
                SET_PED_AS_ENEMY(playerPed1);
                SET_ENTITY_IS_TARGET_PRIORITY(playerPed1);
                SET_PED_SHOOT_RATE(EntityCreated3[bbb]);
                SET_PED_ARMOUR(EntityCreated3[bbb]);
                ADD_ARMOUR_TO_PED(EntityCreated3[bbb], 100);
                SET_PED_COMBAT_ABILITY(EntityCreated3[bbb]);
                SET_PED_COMBAT_ATTRIBUTES(EntityCreated3[bbb]);
                SET_PED_COMBAT_RANGE(EntityCreated3[bbb]);
                SET_PED_ACCURACY(EntityCreated3[bbb]);
                SET_PED_COMBAT_MOVEMENT(EntityCreated3[bbb]);
                SET_PED_FIRING_PATTERN(EntityCreated3[bbb]);
                SET_CAN_ATTACK_FRIENDLY(EntityCreated3[bbb], 0);
                SET_DRIVER_ABILITY(EntityCreated3[bbb]);
                SET_DRIVER_AGGRESSIVENESS(EntityCreated3[bbb]);
                SET_PED_AS_ENEMY(playerPed1);
                SET_ENTITY_IS_TARGET_PRIORITY(playerPed1);
                TASK_SHOOT_AT_ENTITY(EntityCreated3[bbb], playerPed1);
                TASK_COMBAT_PED(EntityCreated3[bbb], playerPed1);
                SET_PED_MONEY(EntityCreated3[bbb], 10000);
            }
            ++sss;
            ++aaa;
            ++bbb;
            SET_MODEL_AS_NO_LONGER_NEEDED(hashKey2);
            SET_MODEL_AS_NO_LONGER_NEEDED(hashKey1);
        }

        public static void SendBuzzard(int list4, string comboB17, bool GodModeBuzzard)
        {
            int hashKey1 = GET_HASH_KEY("BUZZARD");
            int hashKey2 = GET_HASH_KEY(comboB17);
            int playerPed1 = GET_PLAYER_PED(list4);
            int hashKey3 = GET_HASH_KEY("WEAPON_APPISTOL");
            int hashKey4 = GET_HASH_KEY("WEAPON_APPISTOL");
            int group = CREATE_GROUP(0);
            float[] entityCoords1 = GET_ENTITY_COORDS(playerPed1);
            ++entityCoords1[0];
            entityCoords1[1] -= 15f;
            do
            {
                REQUEST_MODEL(hashKey1);
                Application.DoEvents();
            }
            while (HAS_MODEL_LOADED(hashKey1) != 1);
            float[] entityCoords2 = GET_ENTITY_COORDS(playerPed1);
            int num2;
            object[] objArray1;
            do
            {
                Random random = new Random();
                entityCoords2[0] += (float)random.Next(-Convert.ToInt32(8f), Convert.ToInt32(8f));
                entityCoords2[1] += (float)random.Next(-Convert.ToInt32(8f), Convert.ToInt32(8f));
                entityCoords2[2] += Convert.ToSingle(30f);
                zzz[sss] = CREATE_VEHICLE2(hashKey1, entityCoords2);
                Thread.Sleep(150);
                num2 = (int)OLDNatives.DOES_ENTITY_EXIST;
                objArray1 = new object[1]
                {
            (object) zzz[sss]
                };
            }
            while (RPCHook.Call((uint)num2, objArray1) != 1);
            RPCHook.Call2<int>(OLDNatives.SET_VEHICLE_ENGINE_ON, (object)zzz[sss], (object)1, (object)1);
            int num3;
            if (!RPCHook.Call2<bool>(OLDNatives.IS_THIS_MODEL_A_HELI, (object)RPCHook.Call2<int>(OLDNatives.GET_ENTITY_MODEL, (object)zzz[sss])))
                num3 = !RPCHook.Call2<bool>(OLDNatives.IS_THIS_MODEL_A_PLANE, (object)RPCHook.Call2<int>(OLDNatives.GET_ENTITY_MODEL, (object)zzz[sss])) ? 1 : 0;
            else
                num3 = 0;
            if (num3 == 0)
                RPCHook.Call2<int>(OLDNatives.SET_HELI_BLADES_FULL_SPEED, (object)zzz[sss]);
            do
            {
                REQUEST_MODEL(hashKey2);
                Application.DoEvents();
            }
            while (HAS_MODEL_LOADED(hashKey2) != 1);
            int num4;
            object[] objArray2;
            do
            {
                EntityCreated2[aaa] = CREATE_PED(hashKey2, entityCoords1);
                Application.DoEvents();
                num4 = (int)OLDNatives.DOES_ENTITY_EXIST;
                objArray2 = new object[1]
                {
            (object) EntityCreated2[aaa]
                };
            }
            while (RPCHook.Call((uint)num4, objArray2) != 1);
            SET_PED_INTO_VEHICLE(EntityCreated2[aaa], zzz[sss], -1);
            SET_PED_AS_GROUP_LEADER(EntityCreated2[aaa], group);
            GIVE_DELAYED_WEAPON_TO_PED(EntityCreated2[aaa], hashKey3);
            GIVE_DELAYED_WEAPON_TO_PED(EntityCreated2[aaa], hashKey4);
            SET_PED_CAN_SWITCH_WEAPON(EntityCreated2[aaa]);
            SET_PED_AS_ENEMY(playerPed1);
            SET_ENTITY_IS_TARGET_PRIORITY(playerPed1);
            SET_PED_SHOOT_RATE(EntityCreated2[aaa]);
            SET_PED_ARMOUR(EntityCreated2[aaa]);
            ADD_ARMOUR_TO_PED(EntityCreated2[aaa], 100);
            SET_PED_COMBAT_ABILITY(EntityCreated2[aaa]);
            SET_PED_COMBAT_ATTRIBUTES(EntityCreated2[aaa]);
            SET_PED_COMBAT_RANGE(EntityCreated2[aaa]);
            SET_PED_ACCURACY(EntityCreated2[aaa]);
            SET_PED_COMBAT_MOVEMENT(EntityCreated2[aaa]);
            SET_PED_FIRING_PATTERN(EntityCreated2[aaa]);
            SET_CAN_ATTACK_FRIENDLY(EntityCreated2[aaa], 0);
            SET_DRIVER_ABILITY(EntityCreated2[aaa]);
            SET_DRIVER_AGGRESSIVENESS(EntityCreated2[aaa]);
            SET_PED_AS_ENEMY(playerPed1);
            SET_ENTITY_IS_TARGET_PRIORITY(playerPed1);
            TASK_SHOOT_AT_ENTITY(EntityCreated2[aaa], playerPed1);
            TASK_COMBAT_PED(EntityCreated2[aaa], playerPed1);
            SET_PED_MONEY(EntityCreated2[aaa], 10000);
            int num5 = 1;
            for (int seat = 0; seat < num5; ++seat)
            {
                int num6;
                object[] objArray3;
                do
                {
                    EntityCreated3[bbb] = CREATE_PED(hashKey2, entityCoords1);
                    Application.DoEvents();
                    num6 = (int)OLDNatives.DOES_ENTITY_EXIST;
                    objArray3 = new object[1]
                    {
              (object) EntityCreated3[bbb]
                    };
                }
                while (RPCHook.Call((uint)num6, objArray3) != 1);
                SET_PED_INTO_VEHICLE(EntityCreated3[bbb], zzz[sss], seat);
                SET_PED_AS_GROUP_MEMBER(EntityCreated3[bbb], group);
                SET_PED_NEVER_LEAVES_GROUP(EntityCreated3[bbb], group);
                GIVE_DELAYED_WEAPON_TO_PED(EntityCreated3[bbb], hashKey3);
                GIVE_DELAYED_WEAPON_TO_PED(EntityCreated3[bbb], hashKey4);
                SET_PED_CAN_SWITCH_WEAPON(EntityCreated3[bbb]);
                SET_PED_AS_ENEMY(playerPed1);
                SET_ENTITY_IS_TARGET_PRIORITY(playerPed1);
                SET_PED_SHOOT_RATE(EntityCreated3[bbb]);
                SET_PED_ARMOUR(EntityCreated3[bbb]);
                ADD_ARMOUR_TO_PED(EntityCreated3[bbb], 100);
                SET_PED_COMBAT_ABILITY(EntityCreated3[bbb]);
                SET_PED_COMBAT_ATTRIBUTES(EntityCreated3[bbb]);
                SET_PED_COMBAT_RANGE(EntityCreated3[bbb]);
                SET_PED_ACCURACY(EntityCreated3[bbb]);
                SET_PED_COMBAT_MOVEMENT(EntityCreated3[bbb]);
                SET_PED_FIRING_PATTERN(EntityCreated3[bbb]);
                SET_CAN_ATTACK_FRIENDLY(EntityCreated3[bbb], 0);
                SET_DRIVER_ABILITY(EntityCreated3[bbb]);
                SET_DRIVER_AGGRESSIVENESS(EntityCreated3[bbb]);
                SET_PED_AS_ENEMY(playerPed1);
                SET_ENTITY_IS_TARGET_PRIORITY(playerPed1);
                TASK_SHOOT_AT_ENTITY(EntityCreated3[bbb], playerPed1);
                TASK_COMBAT_PED(EntityCreated3[bbb], playerPed1);
                SET_PED_MONEY(EntityCreated3[bbb], 10000);
            }
            if (GodModeBuzzard)
            {
                uint func_address1 = OLDNatives.SET_ENTITY_CAN_BE_DAMAGED;
                uint func_address2 = OLDNatives.SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED;
                int playerPed2 = GET_PLAYER_PED(list4);
                if (IS_PED_IN_ANY_VEHICLE(playerPed2) <= 0)
                    return;
                int vehiclePedIsIn = GET_VEHICLE_PED_IS_IN(playerPed2);
                if (vehiclePedIsIn > 0 && requestcontrol(list4))
                    RPCHook.Call(func_address1, (object)vehiclePedIsIn, (object)0);
                RPCHook.Call(func_address2, (object)vehiclePedIsIn, (object)0);
                SET_ENTITY_INVINCIBLE(zzz[sss], 1);
                SET_ENTITY_INVINCIBLE(EntityCreated2[aaa], 1);
                Functions.RPCFunc.SET_ENTITY_PROOFS(zzz[sss], true, true, true, true, true, true, true, true);
                ADD_BLIP_VEHICLE(zzz[sss], 1);
                ADD_BLIP_PED(EntityCreated2[aaa], 1);
                SET_ENTITY_CAN_BE_DAMAGED(EntityCreated2[aaa], 0);
                SET_ENTITY_INVINCIBLE(EntityCreated2[aaa], 1);
                SET_ENTITY_CAN_BE_DAMAGED(EntityCreated3[bbb], 0);
                SET_ENTITY_INVINCIBLE(EntityCreated3[bbb], 1);
                ADD_BLIP_BODYGAURD(EntityCreated2[aaa], Convert.ToInt32(1));
            }
            else if (!GodModeBuzzard)
            {
                uint func_address1 = OLDNatives.SET_ENTITY_CAN_BE_DAMAGED;
                uint func_address2 = OLDNatives.SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED;
                int playerPed2 = GET_PLAYER_PED(list4);
                if (IS_PED_IN_ANY_VEHICLE(playerPed2) <= 0)
                    return;
                int vehiclePedIsIn = GET_VEHICLE_PED_IS_IN(playerPed2);
                if (vehiclePedIsIn > 0 && requestcontrol(list4))
                    RPCHook.Call(func_address1, (object)vehiclePedIsIn, (object)1);
                RPCHook.Call(func_address2, (object)vehiclePedIsIn, (object)1);
                SET_ENTITY_CAN_BE_DAMAGED(EntityCreated2[aaa], 1);
                SET_ENTITY_INVINCIBLE(EntityCreated2[aaa], 0);
                SET_ENTITY_CAN_BE_DAMAGED(EntityCreated3[bbb], 1);
                SET_ENTITY_INVINCIBLE(EntityCreated3[bbb], 0);
            }
            ++sss;
            ++aaa;
            ++bbb;
            SET_MODEL_AS_NO_LONGER_NEEDED(hashKey2);
            SET_MODEL_AS_NO_LONGER_NEEDED(hashKey1);
        }

        public static void AllPlayersTakeAllWeapons(int list4)
        {
            int num0 = list4 = 0;
            int num1 = list4 = 1;
            int num2 = list4 = 2;
            int num3 = list4 = 3;
            int num4 = list4 = 4;
            int num5 = list4 = 5;
            int num6 = list4 = 6;
            int num7 = list4 = 7;
            int num8 = list4 = 8;
            int num9 = list4 = 9;
            int num10 = list4 = 10;
            int num11 = list4 = 11;
            int num12 = list4 = 12;
            int num13 = list4 = 13;
            int num14 = list4 = 14;
            int num15 = list4 = 15;
            int num16 = list4 = 16;

            int PED_ID0 = RPCHook.Call(Natives.GET_PLAYER_PED, num0);
            int PED_ID1 = RPCHook.Call(Natives.GET_PLAYER_PED, num1);
            int PED_ID2 = RPCHook.Call(Natives.GET_PLAYER_PED, num2);
            int PED_ID3 = RPCHook.Call(Natives.GET_PLAYER_PED, num3);
            int PED_ID4 = RPCHook.Call(Natives.GET_PLAYER_PED, num4);
            int PED_ID5 = RPCHook.Call(Natives.GET_PLAYER_PED, num5);
            int PED_ID6 = RPCHook.Call(Natives.GET_PLAYER_PED, num6);
            int PED_ID7 = RPCHook.Call(Natives.GET_PLAYER_PED, num7);
            int PED_ID8 = RPCHook.Call(Natives.GET_PLAYER_PED, num8);
            int PED_ID9 = RPCHook.Call(Natives.GET_PLAYER_PED, num9);
            int PED_ID10 = RPCHook.Call(Natives.GET_PLAYER_PED, num10);
            int PED_ID11 = RPCHook.Call(Natives.GET_PLAYER_PED, num11);
            int PED_ID12 = RPCHook.Call(Natives.GET_PLAYER_PED, num12);
            int PED_ID13 = RPCHook.Call(Natives.GET_PLAYER_PED, num13);
            int PED_ID14 = RPCHook.Call(Natives.GET_PLAYER_PED, num14);
            int PED_ID15 = RPCHook.Call(Natives.GET_PLAYER_PED, num15);
            int PED_ID16 = RPCHook.Call(Natives.GET_PLAYER_PED, num16);

            if (!(GET_PLAYER_PED(PED_ID0) == PLAYER_PED_ID()))
            {
                RPCHook.Call(Natives.REMOVE_ALL_PED_WEAPONS, PED_ID0, 1);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID1) == PLAYER_PED_ID()))
            {
                RPCHook.Call(Natives.REMOVE_ALL_PED_WEAPONS, PED_ID1, 1);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID2) == PLAYER_PED_ID()))
            {
                RPCHook.Call(Natives.REMOVE_ALL_PED_WEAPONS, PED_ID2, 1);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID3) == PLAYER_PED_ID()))
            {
                RPCHook.Call(Natives.REMOVE_ALL_PED_WEAPONS, PED_ID3, 1);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID4) == PLAYER_PED_ID()))
            {
                RPCHook.Call(Natives.REMOVE_ALL_PED_WEAPONS, PED_ID4, 1);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID5) == PLAYER_PED_ID()))
            {
                RPCHook.Call(Natives.REMOVE_ALL_PED_WEAPONS, PED_ID5, 1);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID6) == PLAYER_PED_ID()))
            {
                RPCHook.Call(Natives.REMOVE_ALL_PED_WEAPONS, PED_ID6, 1);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID7) == PLAYER_PED_ID()))
            {
                RPCHook.Call(Natives.REMOVE_ALL_PED_WEAPONS, PED_ID7, 1);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID8) == PLAYER_PED_ID()))
            {
                RPCHook.Call(Natives.REMOVE_ALL_PED_WEAPONS, PED_ID8, 1);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID9) == PLAYER_PED_ID()))
            {
                RPCHook.Call(Natives.REMOVE_ALL_PED_WEAPONS, PED_ID9, 1);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID10) == PLAYER_PED_ID()))
            {
                RPCHook.Call(Natives.REMOVE_ALL_PED_WEAPONS, PED_ID10, 1);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID11) == PLAYER_PED_ID()))
            {
                RPCHook.Call(Natives.REMOVE_ALL_PED_WEAPONS, PED_ID11, 1);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID12) == PLAYER_PED_ID()))
            {
                RPCHook.Call(Natives.REMOVE_ALL_PED_WEAPONS, PED_ID12, 1);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID13) == PLAYER_PED_ID()))
            {
                RPCHook.Call(Natives.REMOVE_ALL_PED_WEAPONS, PED_ID13, 1);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID14) == PLAYER_PED_ID()))
            {
                RPCHook.Call(Natives.REMOVE_ALL_PED_WEAPONS, PED_ID14, 1);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID15) == PLAYER_PED_ID()))
            {
                RPCHook.Call(Natives.REMOVE_ALL_PED_WEAPONS, PED_ID15, 1);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID16) == PLAYER_PED_ID()))
            {
                RPCHook.Call(Natives.REMOVE_ALL_PED_WEAPONS, PED_ID1, 16);
            }
        }

        public static void AllPlayersTakeOneMilion()
        {
            int num0 = 0;
            int num1 = 1;
            int num2 = 2;
            int num3 = 3;
            int num4 = 4;
            int num5 = 5;
            int num6 = 6;
            int num7 = 7;
            int num8 = 8;
            int num9 = 9;
            int num10 = 10;
            int num11 = 11;
            int num12 = 12;
            int num13 = 13;
            int num14 = 14;
            int num15 = 15;
            int num16 = 16;

            int PED_ID0 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num0);
            int PED_ID1 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num1);
            int PED_ID2 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num2);
            int PED_ID3 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num3);
            int PED_ID4 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num4);
            int PED_ID5 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num5);
            int PED_ID6 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num6);
            int PED_ID7 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num7);
            int PED_ID8 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num8);
            int PED_ID9 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num9);
            int PED_ID10 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num10);
            int PED_ID11 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num11);
            int PED_ID12 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num12);
            int PED_ID13 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num13);
            int PED_ID14 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num14);
            int PED_ID15 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num15);
            int PED_ID16 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num16);

            if (!(GET_PLAYER_PED(PED_ID0) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.NETWORK_EARN_FROM_ROCKSTAR, PED_ID0, -1000000);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID1) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.NETWORK_EARN_FROM_ROCKSTAR, PED_ID1, -1000000);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID2) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.NETWORK_EARN_FROM_ROCKSTAR, PED_ID2, -1000000);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID3) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.NETWORK_EARN_FROM_ROCKSTAR, PED_ID3, -1000000);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID4) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.NETWORK_EARN_FROM_ROCKSTAR, PED_ID4, -1000000);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID5) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.NETWORK_EARN_FROM_ROCKSTAR, PED_ID5, -1000000);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID6) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.NETWORK_EARN_FROM_ROCKSTAR, PED_ID6, -1000000);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID7) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.NETWORK_EARN_FROM_ROCKSTAR, PED_ID7, -1000000);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID8) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.NETWORK_EARN_FROM_ROCKSTAR, PED_ID8, -1000000);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID9) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.NETWORK_EARN_FROM_ROCKSTAR, PED_ID9, -1000000);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID10) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.NETWORK_EARN_FROM_ROCKSTAR, PED_ID10, -1000000);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID11) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.NETWORK_EARN_FROM_ROCKSTAR, PED_ID11, -1000000);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID12) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.NETWORK_EARN_FROM_ROCKSTAR, PED_ID12, -1000000);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID13) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.NETWORK_EARN_FROM_ROCKSTAR, PED_ID13, -1000000);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID14) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.NETWORK_EARN_FROM_ROCKSTAR, PED_ID14, -1000000);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID15) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.NETWORK_EARN_FROM_ROCKSTAR, PED_ID15, -1000000);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID16) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.NETWORK_EARN_FROM_ROCKSTAR, PED_ID16, -1000000);
            }
        }

        public static void AllPlayersTelepVehicleAway()
        {
            int num0 = 0;
            int num1 = 1;
            int num2 = 2;
            int num3 = 3;
            int num4 = 4;
            int num5 = 5;
            int num6 = 6;
            int num7 = 7;
            int num8 = 8;
            int num9 = 9;
            int num10 = 10;
            int num11 = 11;
            int num12 = 12;
            int num13 = 13;
            int num14 = 14;
            int num15 = 15;
            int num16 = 16;

            int PED_ID0 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num0);
            int PED_ID1 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num1);
            int PED_ID2 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num2);
            int PED_ID3 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num3);
            int PED_ID4 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num4);
            int PED_ID5 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num5);
            int PED_ID6 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num6);
            int PED_ID7 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num7);
            int PED_ID8 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num8);
            int PED_ID9 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num9);
            int PED_ID10 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num10);
            int PED_ID11 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num11);
            int PED_ID12 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num12);
            int PED_ID13 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num13);
            int PED_ID14 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num14);
            int PED_ID15 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num15);
            int PED_ID16 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num16);

            if (!(GET_PLAYER_PED(PED_ID0) == PLAYER_PED_ID()))
            {
                CLEAR_PED_TASKS_IMMEDIATLY(PED_ID0);
                Thread.Sleep(300);
                int Veh0 = Functions.RPCFunc.GET_PLAYERS_LAST_VEHICLE(PED_ID0);

                if (NewRequestNetworkControl(Veh0))
                {
                    SET_ENTITY_COORDS(Veh0, 23.9789f, 7644.1338f, 19.0681f);
                }
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID1) == PLAYER_PED_ID()))
            {
                CLEAR_PED_TASKS_IMMEDIATLY(PED_ID1);
                Thread.Sleep(300);
                int Veh1 = Functions.RPCFunc.GET_PLAYERS_LAST_VEHICLE(PED_ID1);

                if (NewRequestNetworkControl(Veh1))
                {
                    SET_ENTITY_COORDS(Veh1, 23.9789f, 7644.1338f, 19.0681f);
                }
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID2) == PLAYER_PED_ID()))
            {
                CLEAR_PED_TASKS_IMMEDIATLY(PED_ID2);
                Thread.Sleep(300);
                int Veh2 = Functions.RPCFunc.GET_PLAYERS_LAST_VEHICLE(PED_ID2);

                if (NewRequestNetworkControl(Veh2))
                {
                    SET_ENTITY_COORDS(Veh2, 23.9789f, 7644.1338f, 19.0681f);
                }
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID3) == PLAYER_PED_ID()))
            {
                CLEAR_PED_TASKS_IMMEDIATLY(PED_ID3);
                Thread.Sleep(300);
                int Veh3 = Functions.RPCFunc.GET_PLAYERS_LAST_VEHICLE(PED_ID3);

                if (NewRequestNetworkControl(Veh3))
                {
                    SET_ENTITY_COORDS(Veh3, 23.9789f, 7644.1338f, 19.0681f);
                }
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID4) == PLAYER_PED_ID()))
            {
                CLEAR_PED_TASKS_IMMEDIATLY(PED_ID4);
                Thread.Sleep(300);
                int Veh4 = Functions.RPCFunc.GET_PLAYERS_LAST_VEHICLE(PED_ID4);

                if (NewRequestNetworkControl(Veh4))
                {
                    SET_ENTITY_COORDS(Veh4, 23.9789f, 7644.1338f, 19.0681f);
                }
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID5) == PLAYER_PED_ID()))
            {
                CLEAR_PED_TASKS_IMMEDIATLY(PED_ID5);
                Thread.Sleep(300);
                int Veh5 = Functions.RPCFunc.GET_PLAYERS_LAST_VEHICLE(PED_ID5);

                if (NewRequestNetworkControl(Veh5))
                {
                    SET_ENTITY_COORDS(Veh5, 23.9789f, 7644.1338f, 19.0681f);
                }
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID6) == PLAYER_PED_ID()))
            {
                CLEAR_PED_TASKS_IMMEDIATLY(PED_ID6);
                Thread.Sleep(300);
                int Veh6 = Functions.RPCFunc.GET_PLAYERS_LAST_VEHICLE(PED_ID6);

                if (NewRequestNetworkControl(Veh6))
                {
                    SET_ENTITY_COORDS(Veh6, 23.9789f, 7644.1338f, 19.0681f);
                }
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID7) == PLAYER_PED_ID()))
            {
                CLEAR_PED_TASKS_IMMEDIATLY(PED_ID7);
                Thread.Sleep(300);
                int Veh7 = Functions.RPCFunc.GET_PLAYERS_LAST_VEHICLE(PED_ID7);

                if (NewRequestNetworkControl(Veh7))
                {
                    SET_ENTITY_COORDS(Veh7, 23.9789f, 7644.1338f, 19.0681f);
                }
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID8) == PLAYER_PED_ID()))
            {
                CLEAR_PED_TASKS_IMMEDIATLY(PED_ID8);
                Thread.Sleep(300);
                int Veh8 = Functions.RPCFunc.GET_PLAYERS_LAST_VEHICLE(PED_ID8);

                if (NewRequestNetworkControl(Veh8))
                {
                    SET_ENTITY_COORDS(Veh8, 23.9789f, 7644.1338f, 19.0681f);
                }
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID9) == PLAYER_PED_ID()))
            {
                CLEAR_PED_TASKS_IMMEDIATLY(PED_ID9);
                Thread.Sleep(300);
                int Veh9 = Functions.RPCFunc.GET_PLAYERS_LAST_VEHICLE(PED_ID9);

                if (NewRequestNetworkControl(Veh9))
                {
                    SET_ENTITY_COORDS(Veh9, 23.9789f, 7644.1338f, 19.0681f);
                }
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID10) == PLAYER_PED_ID()))
            {
                CLEAR_PED_TASKS_IMMEDIATLY(PED_ID10);
                Thread.Sleep(300);
                int Veh10 = Functions.RPCFunc.GET_PLAYERS_LAST_VEHICLE(PED_ID10);

                if (NewRequestNetworkControl(Veh10))
                {
                    SET_ENTITY_COORDS(Veh10, 23.9789f, 7644.1338f, 19.0681f);
                }
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID11) == PLAYER_PED_ID()))
            {
                CLEAR_PED_TASKS_IMMEDIATLY(PED_ID11);
                Thread.Sleep(300);
                int Veh11 = Functions.RPCFunc.GET_PLAYERS_LAST_VEHICLE(PED_ID11);

                if (NewRequestNetworkControl(Veh11))
                {
                    SET_ENTITY_COORDS(Veh11, 23.9789f, 7644.1338f, 19.0681f);
                }
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID12) == PLAYER_PED_ID()))
            {
                CLEAR_PED_TASKS_IMMEDIATLY(PED_ID12);
                Thread.Sleep(300);
                int Veh12 = Functions.RPCFunc.GET_PLAYERS_LAST_VEHICLE(PED_ID12);

                if (NewRequestNetworkControl(Veh12))
                {
                    SET_ENTITY_COORDS(Veh12, 23.9789f, 7644.1338f, 19.0681f);
                }
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID13) == PLAYER_PED_ID()))
            {
                CLEAR_PED_TASKS_IMMEDIATLY(PED_ID13);
                Thread.Sleep(300);
                int Veh13 = Functions.RPCFunc.GET_PLAYERS_LAST_VEHICLE(PED_ID13);

                if (NewRequestNetworkControl(Veh13))
                {
                    SET_ENTITY_COORDS(Veh13, 23.9789f, 7644.1338f, 19.0681f);
                }
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID14) == PLAYER_PED_ID()))
            {
                CLEAR_PED_TASKS_IMMEDIATLY(PED_ID14);
                Thread.Sleep(300);
                int Veh14 = Functions.RPCFunc.GET_PLAYERS_LAST_VEHICLE(PED_ID14);

                if (NewRequestNetworkControl(Veh14))
                {
                    SET_ENTITY_COORDS(Veh14, 23.9789f, 7644.1338f, 19.0681f);
                }
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID15) == PLAYER_PED_ID()))
            {
                CLEAR_PED_TASKS_IMMEDIATLY(PED_ID15);
                Thread.Sleep(300);
                int Veh15 = Functions.RPCFunc.GET_PLAYERS_LAST_VEHICLE(PED_ID15);

                if (NewRequestNetworkControl(Veh15))
                {
                    SET_ENTITY_COORDS(Veh15, 23.9789f, 7644.1338f, 19.0681f);
                }
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID16) == PLAYER_PED_ID()))
            {
                CLEAR_PED_TASKS_IMMEDIATLY(PED_ID16);
                Thread.Sleep(300);
                int Veh16 = Functions.RPCFunc.GET_PLAYERS_LAST_VEHICLE(PED_ID16);

                if (NewRequestNetworkControl(Veh16))
                {
                    SET_ENTITY_COORDS(Veh16, 23.9789f, 7644.1338f, 19.0681f);
                }
            }
        }

        public static void AllPlayersKickFromVehicle(int list4)
        {
            int num0 = list4 = 0;
            int num1 = list4 = 1;
            int num2 = list4 = 2;
            int num3 = list4 = 3;
            int num4 = list4 = 4;
            int num5 = list4 = 5;
            int num6 = list4 = 6;
            int num7 = list4 = 7;
            int num8 = list4 = 8;
            int num9 = list4 = 9;
            int num10 = list4 = 10;
            int num11 = list4 = 11;
            int num12 = list4 = 12;
            int num13 = list4 = 13;
            int num14 = list4 = 14;
            int num15 = list4 = 15;
            int num16 = list4 = 16;

            int PED_ID0 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num0);
            int PED_ID1 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num1);
            int PED_ID2 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num2);
            int PED_ID3 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num3);
            int PED_ID4 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num4);
            int PED_ID5 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num5);
            int PED_ID6 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num6);
            int PED_ID7 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num7);
            int PED_ID8 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num8);
            int PED_ID9 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num9);
            int PED_ID10 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num10);
            int PED_ID11 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num11);
            int PED_ID12 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num12);
            int PED_ID13 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num13);
            int PED_ID14 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num14);
            int PED_ID15 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num15);
            int PED_ID16 = ClassicRPC.Call(Natives.GET_PLAYER_PED, num16);

            if (!(GET_PLAYER_PED(PED_ID0) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.CLEAR_PED_TASKS_IMMEDIATELY, PED_ID0);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID1) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.CLEAR_PED_TASKS_IMMEDIATELY, PED_ID1);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID2) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.CLEAR_PED_TASKS_IMMEDIATELY, PED_ID2);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID3) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.CLEAR_PED_TASKS_IMMEDIATELY, PED_ID3);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID4) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.CLEAR_PED_TASKS_IMMEDIATELY, PED_ID4);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID5) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.CLEAR_PED_TASKS_IMMEDIATELY, PED_ID5);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID6) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.CLEAR_PED_TASKS_IMMEDIATELY, PED_ID6);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID7) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.CLEAR_PED_TASKS_IMMEDIATELY, PED_ID7);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID8) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.CLEAR_PED_TASKS_IMMEDIATELY, PED_ID8);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID9) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.CLEAR_PED_TASKS_IMMEDIATELY, PED_ID9);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID10) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.CLEAR_PED_TASKS_IMMEDIATELY, PED_ID10);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID11) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.CLEAR_PED_TASKS_IMMEDIATELY, PED_ID11);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID12) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.CLEAR_PED_TASKS_IMMEDIATELY, PED_ID12);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID13) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.CLEAR_PED_TASKS_IMMEDIATELY, PED_ID13);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID14) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.CLEAR_PED_TASKS_IMMEDIATELY, PED_ID14);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID15) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.CLEAR_PED_TASKS_IMMEDIATELY, PED_ID15);
            }
            Thread.Sleep(20);
            if (!(GET_PLAYER_PED(PED_ID16) == PLAYER_PED_ID()))
            {
                ClassicRPC.Call(Natives.CLEAR_PED_TASKS_IMMEDIATELY, PED_ID16);
            }
        }

        public static void AllPlayersExplodeAllLobby(int list4)
        {
            int num0 = list4 = 0;
            int PED_ID0 = GET_PLAYER_PED(num0);
            float[] entityCoords0 = GET_ENTITY_COORDS(GET_PLAYER_PED(num0));
            int type0 = 5;
            if (!(PED_ID0 == PLAYER_PED_ID()))
            {
                Owned_Explosion(PED_ID0, entityCoords0, type0);
            }
            Thread.Sleep(350);

            int num1 = list4 = 1;
            int PED_ID1 = GET_PLAYER_PED(num1);
            float[] entityCoords1 = GET_ENTITY_COORDS(GET_PLAYER_PED(num1));
            int type1 = 5;
            if (!(PED_ID1 == PLAYER_PED_ID()))
            {
                Owned_Explosion(PED_ID1, entityCoords1, type1);
            }
            Thread.Sleep(350);

            int num2 = list4 = 2;
            int PED_ID2 = GET_PLAYER_PED(num2);
            float[] entityCoords2 = GET_ENTITY_COORDS(GET_PLAYER_PED(num2));
            int type2 = 5;
            if (!(PED_ID2 == PLAYER_PED_ID()))
            {
                Owned_Explosion(PED_ID2, entityCoords0, type2);
            }
            Thread.Sleep(350);

            int num3 = list4 = 3;
            int PED_ID3 = GET_PLAYER_PED(num3);
            float[] entityCoords3 = GET_ENTITY_COORDS(GET_PLAYER_PED(num3));
            int type3 = 5;
            if (!(PED_ID3 == PLAYER_PED_ID()))
            {
                Owned_Explosion(PED_ID3, entityCoords3, type3);
            }
            Thread.Sleep(350);

            int num4 = list4 = 4;
            int PED_ID4 = GET_PLAYER_PED(num4);
            float[] entityCoords4 = GET_ENTITY_COORDS(GET_PLAYER_PED(num4));
            int type4 = 5;
            if (!(PED_ID4 == PLAYER_PED_ID()))
            {
                Owned_Explosion(PED_ID4, entityCoords4, type4);
            }
            Thread.Sleep(350);

            int num5 = list4 = 5;
            int PED_ID5 = GET_PLAYER_PED(num5);
            float[] entityCoords5 = GET_ENTITY_COORDS(GET_PLAYER_PED(num5));
            int type5 = 5;
            if (!(PED_ID0 == PLAYER_PED_ID()))
            {
                Owned_Explosion(PED_ID5, entityCoords5, type5);
            }
            Thread.Sleep(350);

            int num6 = list4 = 6;
            int PED_ID6 = GET_PLAYER_PED(num6);
            float[] entityCoords6 = GET_ENTITY_COORDS(GET_PLAYER_PED(num6));
            int type6 = 5;
            if (!(PED_ID6 == PLAYER_PED_ID()))
            {
                Owned_Explosion(PED_ID6, entityCoords6, type6);
            }
            Thread.Sleep(350);

            int num7 = list4 = 7;
            int PED_ID7 = GET_PLAYER_PED(num7);
            float[] entityCoords7 = GET_ENTITY_COORDS(GET_PLAYER_PED(num7));
            int type7 = 5;
            if (!(PED_ID7 == PLAYER_PED_ID()))
            {
                Owned_Explosion(PED_ID7, entityCoords7, type7);
            }
            Thread.Sleep(350);

            int num8 = list4 = 8;
            int PED_ID8 = GET_PLAYER_PED(num8);
            float[] entityCoords8 = GET_ENTITY_COORDS(GET_PLAYER_PED(num8));
            int type8 = 5;
            if (!(PED_ID8 == PLAYER_PED_ID()))
            {
                Owned_Explosion(PED_ID8, entityCoords8, type8);
            }
            Thread.Sleep(350);

            int num9 = list4 = 9;
            int PED_ID9 = GET_PLAYER_PED(num9);
            float[] entityCoords9 = GET_ENTITY_COORDS(GET_PLAYER_PED(num9));
            int type9 = 5;
            if (!(PED_ID9 == PLAYER_PED_ID()))
            {
                Owned_Explosion(PED_ID9, entityCoords9, type9);
            }
            Thread.Sleep(350);

            int num10 = list4 = 10;
            int PED_ID10 = GET_PLAYER_PED(num10);
            float[] entityCoords10 = GET_ENTITY_COORDS(GET_PLAYER_PED(num10));
            int type10 = 5;
            if (!(PED_ID10 == PLAYER_PED_ID()))
            {
                Owned_Explosion(PED_ID10, entityCoords10, type10);
            }
            Thread.Sleep(350);

            int num11 = list4 = 11;
            int PED_ID11 = GET_PLAYER_PED(num11);
            float[] entityCoords11 = GET_ENTITY_COORDS(GET_PLAYER_PED(num11));
            int type11 = 5;
            if (!(PED_ID11 == PLAYER_PED_ID()))
            {
                Owned_Explosion(PED_ID11, entityCoords11, type11);
            }
            Thread.Sleep(350);

            int num12 = list4 = 12;
            int PED_ID12 = GET_PLAYER_PED(num12);
            float[] entityCoords12 = GET_ENTITY_COORDS(GET_PLAYER_PED(num12));
            int type12 = 5;
            if (!(PED_ID12 == PLAYER_PED_ID()))
            {
                Owned_Explosion(PED_ID12, entityCoords12, type12);
            }
            Thread.Sleep(350);

            int num13 = list4 = 13;
            int PED_ID13 = GET_PLAYER_PED(num13);
            float[] entityCoords13 = GET_ENTITY_COORDS(GET_PLAYER_PED(num13));
            int type13 = 5;
            if (!(PED_ID13 == PLAYER_PED_ID()))
            {
                Owned_Explosion(PED_ID13, entityCoords13, type13);
            }
            Thread.Sleep(350);

            int num14 = list4 = 14;
            int PED_ID14 = GET_PLAYER_PED(num14);
            float[] entityCoords14 = GET_ENTITY_COORDS(GET_PLAYER_PED(num14));
            int type14 = 5;
            if (!(PED_ID14 == PLAYER_PED_ID()))
            {
                Owned_Explosion(PED_ID14, entityCoords14, type14);
            }
            Thread.Sleep(350);

            int num15 = list4 = 15;
            int PED_ID15 = GET_PLAYER_PED(num15);
            float[] entityCoords15 = GET_ENTITY_COORDS(GET_PLAYER_PED(num15));
            int type15 = 5;
            if (!(PED_ID15 == PLAYER_PED_ID()))
            {
                Owned_Explosion(PED_ID15, entityCoords15, type15);
            }
            Thread.Sleep(350);

            int num16 = list4 = 16;
            int PED_ID16 = GET_PLAYER_PED(num16);
            float[] entityCoords16 = GET_ENTITY_COORDS(GET_PLAYER_PED(num16));
            int type16 = 5;
            if (!(PED_ID16 == PLAYER_PED_ID()))
            {
                Owned_Explosion(PED_ID16, entityCoords16, type16);
            }
        }

        public static void AllPlayersMoneyRain(int list4)
        {
            int num0 = list4 = 0;
            int num1 = list4 = 1;
            int num2 = list4 = 2;
            int num3 = list4 = 3;
            int num4 = list4 = 4;
            int num5 = list4 = 5;
            int num6 = list4 = 6;
            int num7 = list4 = 7;
            int num8 = list4 = 8;
            int num9 = list4 = 9;
            int num10 = list4 = 10;
            int num11 = list4 = 11;
            int num12 = list4 = 12;
            int num13 = list4 = 13;
            int num14 = list4 = 14;
            int num15 = list4 = 15;
            int num16 = list4 = 16;

            int PED_ID0 = RPCHook.Call(Natives.GET_PLAYER_PED, num0);
            int PED_ID1 = RPCHook.Call(Natives.GET_PLAYER_PED, num1);
            int PED_ID2 = RPCHook.Call(Natives.GET_PLAYER_PED, num2);
            int PED_ID3 = RPCHook.Call(Natives.GET_PLAYER_PED, num3);
            int PED_ID4 = RPCHook.Call(Natives.GET_PLAYER_PED, num4);
            int PED_ID5 = RPCHook.Call(Natives.GET_PLAYER_PED, num5);
            int PED_ID6 = RPCHook.Call(Natives.GET_PLAYER_PED, num6);
            int PED_ID7 = RPCHook.Call(Natives.GET_PLAYER_PED, num7);
            int PED_ID8 = RPCHook.Call(Natives.GET_PLAYER_PED, num8);
            int PED_ID9 = RPCHook.Call(Natives.GET_PLAYER_PED, num9);
            int PED_ID10 = RPCHook.Call(Natives.GET_PLAYER_PED, num10);
            int PED_ID11 = RPCHook.Call(Natives.GET_PLAYER_PED, num11);
            int PED_ID12 = RPCHook.Call(Natives.GET_PLAYER_PED, num12);
            int PED_ID13 = RPCHook.Call(Natives.GET_PLAYER_PED, num13);
            int PED_ID14 = RPCHook.Call(Natives.GET_PLAYER_PED, num14);
            int PED_ID15 = RPCHook.Call(Natives.GET_PLAYER_PED, num15);
            int PED_ID16 = RPCHook.Call(Natives.GET_PLAYER_PED, num16);

            float[] numArray0 = new float[3];
            numArray0 = Functions.RPCFunc.GET_COORDS(PED_ID0);
            float[] numArray1 = new float[3];
            numArray1 = Functions.RPCFunc.GET_COORDS(PED_ID1);
            float[] numArray2 = new float[3];
            numArray2 = Functions.RPCFunc.GET_COORDS(PED_ID2);
            float[] numArray3 = new float[3];
            numArray3 = Functions.RPCFunc.GET_COORDS(PED_ID3);
            float[] numArray4 = new float[3];
            numArray4 = Functions.RPCFunc.GET_COORDS(PED_ID4);
            float[] numArray5 = new float[3];
            numArray5 = Functions.RPCFunc.GET_COORDS(PED_ID5);
            float[] numArray6 = new float[3];
            numArray6 = Functions.RPCFunc.GET_COORDS(PED_ID6);
            float[] numArray7 = new float[3];
            numArray7 = Functions.RPCFunc.GET_COORDS(PED_ID7);
            float[] numArray8 = new float[3];
            numArray8 = Functions.RPCFunc.GET_COORDS(PED_ID8);
            float[] numArray9 = new float[3];
            numArray9 = Functions.RPCFunc.GET_COORDS(PED_ID9);
            float[] numArray10 = new float[3];
            numArray10 = Functions.RPCFunc.GET_COORDS(PED_ID10);
            float[] numArray11 = new float[3];
            numArray11 = Functions.RPCFunc.GET_COORDS(PED_ID11);
            float[] numArray12 = new float[3];
            numArray12 = Functions.RPCFunc.GET_COORDS(PED_ID12);
            float[] numArray13 = new float[3];
            numArray13 = Functions.RPCFunc.GET_COORDS(PED_ID13);
            float[] numArray14 = new float[3];
            numArray14 = Functions.RPCFunc.GET_COORDS(PED_ID14);
            float[] numArray15 = new float[3];
            numArray15 = Functions.RPCFunc.GET_COORDS(PED_ID15);
            float[] numArray16 = new float[3];
            numArray16 = Functions.RPCFunc.GET_COORDS(PED_ID16);

            float[] numArray00 = new float[3];

            for (int i = 0; i < 20; i++)
            {
                Random random = new Random();
                int int_1111 = random.Next(-500, 500);
                int int_2222 = random.Next(-500, 500);
                numArray00 = numArray0;
                numArray00[0] += ((float)int_1111) / 100f;
                numArray00[1] += ((float)int_2222) / 100f;
                numArray00[2] += 3f;
                Functions.RPCFunc.AMBIENT_PICKUP(Functions.Addresses.PICKUP_MONEY_PAPER_BAG, numArray00, 0x7d0);
            }
            Thread.Sleep(150);

            for (int i = 0; i < 20; i++)
            {
                Random random = new Random();
                int int_1111 = random.Next(-500, 500);
                int int_2222 = random.Next(-500, 500);
                numArray00 = numArray1;
                numArray00[0] += ((float)int_1111) / 100f;
                numArray00[1] += ((float)int_2222) / 100f;
                numArray00[2] += 3f;
                Functions.RPCFunc.AMBIENT_PICKUP(Functions.Addresses.PICKUP_MONEY_PAPER_BAG, numArray00, 0x7d0);
            }
            Thread.Sleep(150);

            for (int i = 0; i < 20; i++)
            {
                Random random = new Random();
                int int_1111 = random.Next(-500, 500);
                int int_2222 = random.Next(-500, 500);
                numArray00 = numArray2;
                numArray00[0] += ((float)int_1111) / 100f;
                numArray00[1] += ((float)int_2222) / 100f;
                numArray00[2] += 3f;
                Functions.RPCFunc.AMBIENT_PICKUP(Functions.Addresses.PICKUP_MONEY_PAPER_BAG, numArray00, 0x7d0);
            }
            Thread.Sleep(150);

            for (int i = 0; i < 20; i++)
            {
                Random random = new Random();
                int int_1111 = random.Next(-500, 500);
                int int_2222 = random.Next(-500, 500);
                numArray00 = numArray3;
                numArray00[0] += ((float)int_1111) / 100f;
                numArray00[1] += ((float)int_2222) / 100f;
                numArray00[2] += 3f;
                Functions.RPCFunc.AMBIENT_PICKUP(Functions.Addresses.PICKUP_MONEY_PAPER_BAG, numArray00, 0x7d0);
            }
            Thread.Sleep(150);

            for (int i = 0; i < 20; i++)
            {
                Random random = new Random();
                int int_1111 = random.Next(-500, 500);
                int int_2222 = random.Next(-500, 500);
                numArray00 = numArray4;
                numArray00[0] += ((float)int_1111) / 100f;
                numArray00[1] += ((float)int_2222) / 100f;
                numArray00[2] += 3f;
                Functions.RPCFunc.AMBIENT_PICKUP(Functions.Addresses.PICKUP_MONEY_PAPER_BAG, numArray00, 0x7d0);
            }
            Thread.Sleep(150);

            for (int i = 0; i < 20; i++)
            {
                Random random = new Random();
                int int_1111 = random.Next(-500, 500);
                int int_2222 = random.Next(-500, 500);
                numArray00 = numArray5;
                numArray00[0] += ((float)int_1111) / 100f;
                numArray00[1] += ((float)int_2222) / 100f;
                numArray00[2] += 3f;
                Functions.RPCFunc.AMBIENT_PICKUP(Functions.Addresses.PICKUP_MONEY_PAPER_BAG, numArray00, 0x7d0);
            }
            Thread.Sleep(150);

            for (int i = 0; i < 20; i++)
            {
                Random random = new Random();
                int int_1111 = random.Next(-500, 500);
                int int_2222 = random.Next(-500, 500);
                numArray00 = numArray6;
                numArray00[0] += ((float)int_1111) / 100f;
                numArray00[1] += ((float)int_2222) / 100f;
                numArray00[2] += 3f;
                Functions.RPCFunc.AMBIENT_PICKUP(Functions.Addresses.PICKUP_MONEY_PAPER_BAG, numArray00, 0x7d0);
            }
            Thread.Sleep(150);

            for (int i = 0; i < 20; i++)
            {
                Random random = new Random();
                int int_1111 = random.Next(-500, 500);
                int int_2222 = random.Next(-500, 500);
                numArray00 = numArray7;
                numArray00[0] += ((float)int_1111) / 100f;
                numArray00[1] += ((float)int_2222) / 100f;
                numArray00[2] += 3f;
                Functions.RPCFunc.AMBIENT_PICKUP(Functions.Addresses.PICKUP_MONEY_PAPER_BAG, numArray00, 0x7d0);
            }
            Thread.Sleep(150);

            for (int i = 0; i < 20; i++)
            {
                Random random = new Random();
                int int_1111 = random.Next(-500, 500);
                int int_2222 = random.Next(-500, 500);
                numArray00 = numArray8;
                numArray00[0] += ((float)int_1111) / 100f;
                numArray00[1] += ((float)int_2222) / 100f;
                numArray00[2] += 3f;
                Functions.RPCFunc.AMBIENT_PICKUP(Functions.Addresses.PICKUP_MONEY_PAPER_BAG, numArray00, 0x7d0);
            }
            Thread.Sleep(150);

            for (int i = 0; i < 20; i++)
            {
                Random random = new Random();
                int int_1111 = random.Next(-500, 500);
                int int_2222 = random.Next(-500, 500);
                numArray00 = numArray9;
                numArray00[0] += ((float)int_1111) / 100f;
                numArray00[1] += ((float)int_2222) / 100f;
                numArray00[2] += 3f;
                Functions.RPCFunc.AMBIENT_PICKUP(Functions.Addresses.PICKUP_MONEY_PAPER_BAG, numArray00, 0x7d0);
            }
            Thread.Sleep(150);

            for (int i = 0; i < 20; i++)
            {
                Random random = new Random();
                int int_1111 = random.Next(-500, 500);
                int int_2222 = random.Next(-500, 500);
                numArray00 = numArray10;
                numArray00[0] += ((float)int_1111) / 100f;
                numArray00[1] += ((float)int_2222) / 100f;
                numArray00[2] += 3f;
                Functions.RPCFunc.AMBIENT_PICKUP(Functions.Addresses.PICKUP_MONEY_PAPER_BAG, numArray00, 0x7d0);
            }
            Thread.Sleep(150);

            for (int i = 0; i < 20; i++)
            {
                Random random = new Random();
                int int_1111 = random.Next(-500, 500);
                int int_2222 = random.Next(-500, 500);
                numArray00 = numArray11;
                numArray00[0] += ((float)int_1111) / 100f;
                numArray00[1] += ((float)int_2222) / 100f;
                numArray00[2] += 3f;
                Functions.RPCFunc.AMBIENT_PICKUP(Functions.Addresses.PICKUP_MONEY_PAPER_BAG, numArray00, 0x7d0);
            }
            Thread.Sleep(150);

            for (int i = 0; i < 20; i++)
            {
                Random random = new Random();
                int int_1111 = random.Next(-500, 500);
                int int_2222 = random.Next(-500, 500);
                numArray00 = numArray12;
                numArray00[0] += ((float)int_1111) / 100f;
                numArray00[1] += ((float)int_2222) / 100f;
                numArray00[2] += 3f;
                Functions.RPCFunc.AMBIENT_PICKUP(Functions.Addresses.PICKUP_MONEY_PAPER_BAG, numArray00, 0x7d0);
            }
            Thread.Sleep(150);

            for (int i = 0; i < 20; i++)
            {
                Random random = new Random();
                int int_1111 = random.Next(-500, 500);
                int int_2222 = random.Next(-500, 500);
                numArray00 = numArray13;
                numArray00[0] += ((float)int_1111) / 100f;
                numArray00[1] += ((float)int_2222) / 100f;
                numArray00[2] += 3f;
                Functions.RPCFunc.AMBIENT_PICKUP(Functions.Addresses.PICKUP_MONEY_PAPER_BAG, numArray00, 0x7d0);
            }
            Thread.Sleep(150);

            for (int i = 0; i < 20; i++)
            {
                Random random = new Random();
                int int_1111 = random.Next(-500, 500);
                int int_2222 = random.Next(-500, 500);
                numArray00 = numArray14;
                numArray00[0] += ((float)int_1111) / 100f;
                numArray00[1] += ((float)int_2222) / 100f;
                numArray00[2] += 3f;
                Functions.RPCFunc.AMBIENT_PICKUP(Functions.Addresses.PICKUP_MONEY_PAPER_BAG, numArray00, 0x7d0);
            }
            Thread.Sleep(150);

            for (int i = 0; i < 20; i++)
            {
                Random random = new Random();
                int int_1111 = random.Next(-500, 500);
                int int_2222 = random.Next(-500, 500);
                numArray00 = numArray15;
                numArray00[0] += ((float)int_1111) / 100f;
                numArray00[1] += ((float)int_2222) / 100f;
                numArray00[2] += 3f;
                Functions.RPCFunc.AMBIENT_PICKUP(Functions.Addresses.PICKUP_MONEY_PAPER_BAG, numArray00, 0x7d0);
            }
            Thread.Sleep(150);

            for (int i = 0; i < 20; i++)
            {
                Random random = new Random();
                int int_1111 = random.Next(-500, 500);
                int int_2222 = random.Next(-500, 500);
                numArray00 = numArray16;
                numArray00[0] += ((float)int_1111) / 100f;
                numArray00[1] += ((float)int_2222) / 100f;
                numArray00[2] += 3f;
                Functions.RPCFunc.AMBIENT_PICKUP(Functions.Addresses.PICKUP_MONEY_PAPER_BAG, numArray00, 0x7d0);
            }
            Thread.Sleep(50);
        }

        public static void AllPlayersGive5Stars(int list4)
        {
            int num0 = list4 = 0;
            int num1 = list4 = 1;
            int num2 = list4 = 2;
            int num3 = list4 = 3;
            int num4 = list4 = 4;
            int num5 = list4 = 5;
            int num6 = list4 = 6;
            int num7 = list4 = 7;
            int num8 = list4 = 8;
            int num9 = list4 = 9;
            int num10 = list4 = 10;
            int num11 = list4 = 11;
            int num12 = list4 = 12;
            int num13 = list4 = 13;
            int num14 = list4 = 14;
            int num15 = list4 = 15;
            int num16 = list4 = 16;

            if (!(GET_PLAYER_PED(num0) == PLAYER_PED_ID()))
            {
                int int_32 = Convert.ToInt32(num0.ToString());
                RPC3.Call(OLDNatives.SET_DISPATCH_COPS_FOR_PLAYER, (object)int_32, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NOW, (object)int_32, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NO_DROP, (object)int_32, (object)1, (object)5);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL, (object)int_32, (object)5, (object)1);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_MULTIPLIER, (object)10);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_DIFFICULTY, (object)int_32, (object)10);
                RPC3.Call(OLDNatives.REPORT_CRIME, (object)int_32, (object)36, (object)OLDNatives.GET_WANTED_LEVEL_THRESHOLD, (object)5);
            }
            Thread.Sleep(100);
            if (!(GET_PLAYER_PED(num1) == PLAYER_PED_ID()))
            {
                int int_321 = Convert.ToInt32(num1.ToString());
                RPC3.Call(OLDNatives.SET_DISPATCH_COPS_FOR_PLAYER, (object)int_321, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NOW, (object)int_321, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NO_DROP, (object)int_321, (object)1, (object)5);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL, (object)int_321, (object)5, (object)1);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_MULTIPLIER, (object)10);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_DIFFICULTY, (object)int_321, (object)10);
                RPC3.Call(OLDNatives.REPORT_CRIME, (object)int_321, (object)36, (object)OLDNatives.GET_WANTED_LEVEL_THRESHOLD, (object)5);
            }
            Thread.Sleep(100);
            if (!(GET_PLAYER_PED(num2) == PLAYER_PED_ID()))
            {
                int int_322 = Convert.ToInt32(num2.ToString());
                RPC3.Call(OLDNatives.SET_DISPATCH_COPS_FOR_PLAYER, (object)int_322, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NOW, (object)int_322, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NO_DROP, (object)int_322, (object)1, (object)5);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL, (object)int_322, (object)5, (object)1);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_MULTIPLIER, (object)10);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_DIFFICULTY, (object)int_322, (object)10);
                RPC3.Call(OLDNatives.REPORT_CRIME, (object)int_322, (object)36, (object)OLDNatives.GET_WANTED_LEVEL_THRESHOLD, (object)5);
            }
            Thread.Sleep(100);
            if (!(GET_PLAYER_PED(num3) == PLAYER_PED_ID()))
            {
                int int_323 = Convert.ToInt32(num3.ToString());
                RPC3.Call(OLDNatives.SET_DISPATCH_COPS_FOR_PLAYER, (object)int_323, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NOW, (object)int_323, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NO_DROP, (object)int_323, (object)1, (object)5);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL, (object)int_323, (object)5, (object)1);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_MULTIPLIER, (object)10);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_DIFFICULTY, (object)int_323, (object)10);
                RPC3.Call(OLDNatives.REPORT_CRIME, (object)int_323, (object)36, (object)OLDNatives.GET_WANTED_LEVEL_THRESHOLD, (object)5);
            }
            Thread.Sleep(100);
            if (!(GET_PLAYER_PED(num4) == PLAYER_PED_ID()))
            {
                int int_324 = Convert.ToInt32(num4.ToString());
                RPC3.Call(OLDNatives.SET_DISPATCH_COPS_FOR_PLAYER, (object)int_324, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NOW, (object)int_324, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NO_DROP, (object)int_324, (object)1, (object)5);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL, (object)int_324, (object)5, (object)1);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_MULTIPLIER, (object)10);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_DIFFICULTY, (object)int_324, (object)10);
                RPC3.Call(OLDNatives.REPORT_CRIME, (object)int_324, (object)36, (object)OLDNatives.GET_WANTED_LEVEL_THRESHOLD, (object)5);
            }
            Thread.Sleep(100);
            if (!(GET_PLAYER_PED(num5) == PLAYER_PED_ID()))
            {
                int int_325 = Convert.ToInt32(num5.ToString());
                RPC3.Call(OLDNatives.SET_DISPATCH_COPS_FOR_PLAYER, (object)int_325, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NOW, (object)int_325, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NO_DROP, (object)int_325, (object)1, (object)5);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL, (object)int_325, (object)5, (object)1);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_MULTIPLIER, (object)10);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_DIFFICULTY, (object)int_325, (object)10);
                RPC3.Call(OLDNatives.REPORT_CRIME, (object)int_325, (object)36, (object)OLDNatives.GET_WANTED_LEVEL_THRESHOLD, (object)5);
            }
            Thread.Sleep(100);
            if (!(GET_PLAYER_PED(num6) == PLAYER_PED_ID()))
            {
                int int_326 = Convert.ToInt32(num6.ToString());
                RPC3.Call(OLDNatives.SET_DISPATCH_COPS_FOR_PLAYER, (object)int_326, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NOW, (object)int_326, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NO_DROP, (object)int_326, (object)1, (object)5);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL, (object)int_326, (object)5, (object)1);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_MULTIPLIER, (object)10);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_DIFFICULTY, (object)int_326, (object)10);
                RPC3.Call(OLDNatives.REPORT_CRIME, (object)int_326, (object)36, (object)OLDNatives.GET_WANTED_LEVEL_THRESHOLD, (object)5);
            }
            Thread.Sleep(100);
            if (!(GET_PLAYER_PED(num7) == PLAYER_PED_ID()))
            {
                int int_327 = Convert.ToInt32(num7.ToString());
                RPC3.Call(OLDNatives.SET_DISPATCH_COPS_FOR_PLAYER, (object)int_327, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NOW, (object)int_327, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NO_DROP, (object)int_327, (object)1, (object)5);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL, (object)int_327, (object)5, (object)1);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_MULTIPLIER, (object)10);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_DIFFICULTY, (object)int_327, (object)10);
                RPC3.Call(OLDNatives.REPORT_CRIME, (object)int_327, (object)36, (object)OLDNatives.GET_WANTED_LEVEL_THRESHOLD, (object)5);
            }
            Thread.Sleep(100);
            if (!(GET_PLAYER_PED(num8) == PLAYER_PED_ID()))
            {
                int int_328 = Convert.ToInt32(num8.ToString());
                RPC3.Call(OLDNatives.SET_DISPATCH_COPS_FOR_PLAYER, (object)int_328, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NOW, (object)int_328, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NO_DROP, (object)int_328, (object)1, (object)5);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL, (object)int_328, (object)5, (object)1);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_MULTIPLIER, (object)10);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_DIFFICULTY, (object)int_328, (object)10);
                RPC3.Call(OLDNatives.REPORT_CRIME, (object)int_328, (object)36, (object)OLDNatives.GET_WANTED_LEVEL_THRESHOLD, (object)5);
            }
            Thread.Sleep(100);
            if (!(GET_PLAYER_PED(num9) == PLAYER_PED_ID()))
            {
                int int_329 = Convert.ToInt32(num9.ToString());
                RPC3.Call(OLDNatives.SET_DISPATCH_COPS_FOR_PLAYER, (object)int_329, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NOW, (object)int_329, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NO_DROP, (object)int_329, (object)1, (object)5);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL, (object)int_329, (object)5, (object)1);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_MULTIPLIER, (object)10);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_DIFFICULTY, (object)int_329, (object)10);
                RPC3.Call(OLDNatives.REPORT_CRIME, (object)int_329, (object)36, (object)OLDNatives.GET_WANTED_LEVEL_THRESHOLD, (object)5);
            }
            Thread.Sleep(100);
            if (!(GET_PLAYER_PED(num10) == PLAYER_PED_ID()))
            {
                int int_3210 = Convert.ToInt32(num10.ToString());
                RPC3.Call(OLDNatives.SET_DISPATCH_COPS_FOR_PLAYER, (object)int_3210, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NOW, (object)int_3210, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NO_DROP, (object)int_3210, (object)1, (object)5);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL, (object)int_3210, (object)5, (object)1);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_MULTIPLIER, (object)10);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_DIFFICULTY, (object)int_3210, (object)10);
                RPC3.Call(OLDNatives.REPORT_CRIME, (object)int_3210, (object)36, (object)OLDNatives.GET_WANTED_LEVEL_THRESHOLD, (object)5);
            }
            Thread.Sleep(100);
            if (!(GET_PLAYER_PED(num11) == PLAYER_PED_ID()))
            {
                int int_3211 = Convert.ToInt32(num11.ToString());
                RPC3.Call(OLDNatives.SET_DISPATCH_COPS_FOR_PLAYER, (object)int_3211, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NOW, (object)int_3211, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NO_DROP, (object)int_3211, (object)1, (object)5);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL, (object)int_3211, (object)5, (object)1);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_MULTIPLIER, (object)10);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_DIFFICULTY, (object)int_3211, (object)10);
                RPC3.Call(OLDNatives.REPORT_CRIME, (object)int_3211, (object)36, (object)OLDNatives.GET_WANTED_LEVEL_THRESHOLD, (object)5);
            }
            Thread.Sleep(100);
            if (!(GET_PLAYER_PED(num12) == PLAYER_PED_ID()))
            {
                int int_3212 = Convert.ToInt32(num12.ToString());
                RPC3.Call(OLDNatives.SET_DISPATCH_COPS_FOR_PLAYER, (object)int_3212, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NOW, (object)int_3212, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NO_DROP, (object)int_3212, (object)1, (object)5);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL, (object)int_3212, (object)5, (object)1);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_MULTIPLIER, (object)10);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_DIFFICULTY, (object)int_3212, (object)10);
                RPC3.Call(OLDNatives.REPORT_CRIME, (object)int_3212, (object)36, (object)OLDNatives.GET_WANTED_LEVEL_THRESHOLD, (object)5);
            }
            Thread.Sleep(100);
            if (!(GET_PLAYER_PED(num13) == PLAYER_PED_ID()))
            {
                int int_3213 = Convert.ToInt32(num13.ToString());
                RPC3.Call(OLDNatives.SET_DISPATCH_COPS_FOR_PLAYER, (object)int_3213, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NOW, (object)int_3213, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NO_DROP, (object)int_3213, (object)1, (object)5);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL, (object)int_3213, (object)5, (object)1);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_MULTIPLIER, (object)10);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_DIFFICULTY, (object)int_3213, (object)10);
                RPC3.Call(OLDNatives.REPORT_CRIME, (object)int_3213, (object)36, (object)OLDNatives.GET_WANTED_LEVEL_THRESHOLD, (object)5);
            }
            Thread.Sleep(100);
            if (!(GET_PLAYER_PED(num14) == PLAYER_PED_ID()))
            {
                int int_3214 = Convert.ToInt32(num14.ToString());
                RPC3.Call(OLDNatives.SET_DISPATCH_COPS_FOR_PLAYER, (object)int_3214, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NOW, (object)int_3214, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NO_DROP, (object)int_3214, (object)1, (object)5);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL, (object)int_3214, (object)5, (object)1);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_MULTIPLIER, (object)10);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_DIFFICULTY, (object)int_3214, (object)10);
                RPC3.Call(OLDNatives.REPORT_CRIME, (object)int_3214, (object)36, (object)OLDNatives.GET_WANTED_LEVEL_THRESHOLD, (object)5);
            }
            Thread.Sleep(100);
            if (!(GET_PLAYER_PED(num15) == PLAYER_PED_ID()))
            {
                int int_3215 = Convert.ToInt32(num15.ToString());
                RPC3.Call(OLDNatives.SET_DISPATCH_COPS_FOR_PLAYER, (object)int_3215, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NOW, (object)int_3215, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NO_DROP, (object)int_3215, (object)1, (object)5);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL, (object)int_3215, (object)5, (object)1);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_MULTIPLIER, (object)10);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_DIFFICULTY, (object)int_3215, (object)10);
                RPC3.Call(OLDNatives.REPORT_CRIME, (object)int_3215, (object)36, (object)OLDNatives.GET_WANTED_LEVEL_THRESHOLD, (object)5);
            }
            Thread.Sleep(100);
            if (!(GET_PLAYER_PED(num16) == PLAYER_PED_ID()))
            {
                int int_3216 = Convert.ToInt32(num16.ToString());
                RPC3.Call(OLDNatives.SET_DISPATCH_COPS_FOR_PLAYER, (object)int_3216, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NOW, (object)int_3216, (object)1);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL_NO_DROP, (object)int_3216, (object)1, (object)5);
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL, (object)int_3216, (object)5, (object)1);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_MULTIPLIER, (object)10);
                RPC3.Call(OLDNatives.SET_WANTED_LEVEL_DIFFICULTY, (object)int_3216, (object)10);
                RPC3.Call(OLDNatives.REPORT_CRIME, (object)int_3216, (object)36, (object)OLDNatives.GET_WANTED_LEVEL_THRESHOLD, (object)5);
            }
            Thread.Sleep(100);
        }

        public static void AllPlayersAttachEnemyClone()
        {
            int num0 = 0;
            int num1 = 1;
            int num2 = 2;
            int num3 = 3;
            int num4 = 4;
            int num5 = 5;
            int num6 = 6;
            int num7 = 7;
            int num8 = 8;
            int num9 = 9;
            int num10 = 10;
            int num11 = 11;
            int num12 = 12;
            int num13 = 13;
            int num14 = 14;
            int num15 = 15;
            int num16 = 16;

            int playerPedsprx0 = GET_PLAYER_PEDSPRX(num0);
            int playerPedsprx1 = GET_PLAYER_PEDSPRX(num1);
            int playerPedsprx2 = GET_PLAYER_PEDSPRX(num2);
            int playerPedsprx3 = GET_PLAYER_PEDSPRX(num3);
            int playerPedsprx4 = GET_PLAYER_PEDSPRX(num4);
            int playerPedsprx5 = GET_PLAYER_PEDSPRX(num5);
            int playerPedsprx6 = GET_PLAYER_PEDSPRX(num6);
            int playerPedsprx7 = GET_PLAYER_PEDSPRX(num7);
            int playerPedsprx8 = GET_PLAYER_PEDSPRX(num8);
            int playerPedsprx9 = GET_PLAYER_PEDSPRX(num9);
            int playerPedsprx10 = GET_PLAYER_PEDSPRX(num10);
            int playerPedsprx11 = GET_PLAYER_PEDSPRX(num11);
            int playerPedsprx12 = GET_PLAYER_PEDSPRX(num12);
            int playerPedsprx13 = GET_PLAYER_PEDSPRX(num13);
            int playerPedsprx14 = GET_PLAYER_PEDSPRX(num14);
            int playerPedsprx15 = GET_PLAYER_PEDSPRX(num15);
            int playerPedsprx16 = GET_PLAYER_PEDSPRX(num16);
            int num;
            object[] objArray;
            float[] numArray1 = new float[3];
            numArray1[1] = -5f;
            float[] numArray2 = numArray1;

            if (!(GET_PLAYER_PED(num0) == PLAYER_PED_ID()))
            {

                RPCHook.Call2<float[]>(OLDNatives.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, (object)playerPedsprx0, (object)numArray2);
                for (int index = 0; index < 1; ++index)
                    EntityCreated2[aaa] = RPCHook.Call(OLDNatives.CLONE_PED, (object)playerPedsprx0);
                do
                {
                    num = (int)OLDNatives.DOES_ENTITY_EXIST;
                    objArray = new object[1]
                    {
          (object) EntityCreated2[aaa]
                    };
                }
                while (RPCHook.Call((uint)num, objArray) != 1);

                int hashKeysprx2 = GET_HASH_KEYSPRX("WEAPON_CARBINERIFLE");
                GIVE_DELAYED_WEAPON_TO_PED(EntityCreated2[aaa], hashKeysprx2);
                SET_PED_CAN_SWITCH_WEAPON(EntityCreated2[aaa]);
                SET_PED_AS_ENEMY(playerPedsprx0);
                SET_ENTITY_IS_TARGET_PRIORITY(playerPedsprx0);
                SET_PED_SHOOT_RATE(EntityCreated2[aaa]);
                SET_PED_ARMOUR(EntityCreated2[aaa]);
                ADD_ARMOUR_TO_PED(EntityCreated2[aaa], 100);
                SET_PED_COMBAT_ABILITY(EntityCreated2[aaa]);
                SET_PED_COMBAT_ATTRIBUTES(EntityCreated2[aaa]);
                SET_PED_COMBAT_RANGE(EntityCreated2[aaa]);
                SET_PED_ACCURACY(EntityCreated2[aaa]);
                SET_PED_COMBAT_MOVEMENT(EntityCreated2[aaa]);
                SET_PED_FIRING_PATTERN(EntityCreated2[aaa]);
                SET_CAN_ATTACK_FRIENDLY(EntityCreated2[aaa], 0);
                SET_DRIVER_ABILITY(EntityCreated2[aaa]);
                SET_DRIVER_AGGRESSIVENESS(EntityCreated2[aaa]);
                TASK_SHOOT_AT_ENTITY(EntityCreated2[aaa], playerPedsprx0);
                TASK_COMBAT_PED(EntityCreated2[aaa], playerPedsprx0);
                SET_PED_KEEP_TASK(EntityCreated2[aaa]);
                SET_PED_MONEY(EntityCreated2[aaa], 10000);

                ++aaa;
                ++sss;
                SET_PED_MONEY(EntityCreated2[aaa], 10000);
                ++aaa;
                SET_MODEL_AS_NO_LONGER_NEEDED(EntityCreated2[aaa]);
            }
            Application.DoEvents();

            if (!(GET_PLAYER_PED(num1) == PLAYER_PED_ID()))
            {
                RPCHook.Call2<float[]>(OLDNatives.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, (object)playerPedsprx1, (object)numArray2);
                for (int index = 0; index < 1; ++index)
                    EntityCreated2[aaa] = RPCHook.Call(OLDNatives.CLONE_PED, (object)playerPedsprx1);

                do
                {
                    num = (int)OLDNatives.DOES_ENTITY_EXIST;
                    objArray = new object[1]
                    {
          (object) EntityCreated2[aaa]
                    };
                }
                while (RPCHook.Call((uint)num, objArray) != 1);

                int hashKeysprx2 = GET_HASH_KEYSPRX("WEAPON_CARBINERIFLE");
                GIVE_DELAYED_WEAPON_TO_PED(EntityCreated2[aaa], hashKeysprx2);
                SET_PED_CAN_SWITCH_WEAPON(EntityCreated2[aaa]);
                SET_PED_AS_ENEMY(playerPedsprx1);
                SET_ENTITY_IS_TARGET_PRIORITY(playerPedsprx1);
                SET_PED_SHOOT_RATE(EntityCreated2[aaa]);
                SET_PED_ARMOUR(EntityCreated2[aaa]);
                ADD_ARMOUR_TO_PED(EntityCreated2[aaa], 100);
                SET_PED_COMBAT_ABILITY(EntityCreated2[aaa]);
                SET_PED_COMBAT_ATTRIBUTES(EntityCreated2[aaa]);
                SET_PED_COMBAT_RANGE(EntityCreated2[aaa]);
                SET_PED_ACCURACY(EntityCreated2[aaa]);
                SET_PED_COMBAT_MOVEMENT(EntityCreated2[aaa]);
                SET_PED_FIRING_PATTERN(EntityCreated2[aaa]);
                SET_CAN_ATTACK_FRIENDLY(EntityCreated2[aaa], 0);
                SET_DRIVER_ABILITY(EntityCreated2[aaa]);
                SET_DRIVER_AGGRESSIVENESS(EntityCreated2[aaa]);
                TASK_SHOOT_AT_ENTITY(EntityCreated2[aaa], playerPedsprx1);
                TASK_COMBAT_PED(EntityCreated2[aaa], playerPedsprx1);
                SET_PED_KEEP_TASK(EntityCreated2[aaa]);
                SET_PED_MONEY(EntityCreated2[aaa], 10000);

                ++aaa;
                ++sss;
                SET_PED_MONEY(EntityCreated2[aaa], 10000);
                ++aaa;
                SET_MODEL_AS_NO_LONGER_NEEDED(EntityCreated2[aaa]);
            }
            Application.DoEvents();

            if (!(GET_PLAYER_PED(num2) == PLAYER_PED_ID()))
            {
                RPCHook.Call2<float[]>(OLDNatives.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, (object)playerPedsprx2, (object)numArray2);
                for (int index = 0; index < 1; ++index)
                    EntityCreated2[aaa] = RPCHook.Call(OLDNatives.CLONE_PED, (object)playerPedsprx2);

                do
                {
                    num = (int)OLDNatives.DOES_ENTITY_EXIST;
                    objArray = new object[1]
                    {
          (object) EntityCreated2[aaa]
                    };
                }
                while (RPCHook.Call((uint)num, objArray) != 1);

                int hashKeysprx2 = GET_HASH_KEYSPRX("WEAPON_CARBINERIFLE");
                GIVE_DELAYED_WEAPON_TO_PED(EntityCreated2[aaa], hashKeysprx2);
                SET_PED_CAN_SWITCH_WEAPON(EntityCreated2[aaa]);
                SET_PED_AS_ENEMY(playerPedsprx2);
                SET_ENTITY_IS_TARGET_PRIORITY(playerPedsprx2);
                SET_PED_SHOOT_RATE(EntityCreated2[aaa]);
                SET_PED_ARMOUR(EntityCreated2[aaa]);
                ADD_ARMOUR_TO_PED(EntityCreated2[aaa], 100);
                SET_PED_COMBAT_ABILITY(EntityCreated2[aaa]);
                SET_PED_COMBAT_ATTRIBUTES(EntityCreated2[aaa]);
                SET_PED_COMBAT_RANGE(EntityCreated2[aaa]);
                SET_PED_ACCURACY(EntityCreated2[aaa]);
                SET_PED_COMBAT_MOVEMENT(EntityCreated2[aaa]);
                SET_PED_FIRING_PATTERN(EntityCreated2[aaa]);
                SET_CAN_ATTACK_FRIENDLY(EntityCreated2[aaa], 0);
                SET_DRIVER_ABILITY(EntityCreated2[aaa]);
                SET_DRIVER_AGGRESSIVENESS(EntityCreated2[aaa]);
                TASK_SHOOT_AT_ENTITY(EntityCreated2[aaa], playerPedsprx2);
                TASK_COMBAT_PED(EntityCreated2[aaa], playerPedsprx2);
                SET_PED_KEEP_TASK(EntityCreated2[aaa]);
                SET_PED_MONEY(EntityCreated2[aaa], 10000);

                ++aaa;
                ++sss;
                SET_PED_MONEY(EntityCreated2[aaa], 10000);
                ++aaa;
                SET_MODEL_AS_NO_LONGER_NEEDED(EntityCreated2[aaa]);
            }
            Application.DoEvents();

            if (!(GET_PLAYER_PED(num3) == PLAYER_PED_ID()))
            {
                RPCHook.Call2<float[]>(OLDNatives.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, (object)playerPedsprx3, (object)numArray2);
                for (int index = 0; index < 1; ++index)
                    EntityCreated2[aaa] = RPCHook.Call(OLDNatives.CLONE_PED, (object)playerPedsprx3);

                do
                {
                    num = (int)OLDNatives.DOES_ENTITY_EXIST;
                    objArray = new object[1]
                    {
          (object) EntityCreated2[aaa]
                    };
                }
                while (RPCHook.Call((uint)num, objArray) != 1);

                int hashKeysprx2 = GET_HASH_KEYSPRX("WEAPON_CARBINERIFLE");
                GIVE_DELAYED_WEAPON_TO_PED(EntityCreated2[aaa], hashKeysprx2);
                SET_PED_CAN_SWITCH_WEAPON(EntityCreated2[aaa]);
                SET_PED_AS_ENEMY(playerPedsprx3);
                SET_ENTITY_IS_TARGET_PRIORITY(playerPedsprx3);
                SET_PED_SHOOT_RATE(EntityCreated2[aaa]);
                SET_PED_ARMOUR(EntityCreated2[aaa]);
                ADD_ARMOUR_TO_PED(EntityCreated2[aaa], 100);
                SET_PED_COMBAT_ABILITY(EntityCreated2[aaa]);
                SET_PED_COMBAT_ATTRIBUTES(EntityCreated2[aaa]);
                SET_PED_COMBAT_RANGE(EntityCreated2[aaa]);
                SET_PED_ACCURACY(EntityCreated2[aaa]);
                SET_PED_COMBAT_MOVEMENT(EntityCreated2[aaa]);
                SET_PED_FIRING_PATTERN(EntityCreated2[aaa]);
                SET_CAN_ATTACK_FRIENDLY(EntityCreated2[aaa], 0);
                SET_DRIVER_ABILITY(EntityCreated2[aaa]);
                SET_DRIVER_AGGRESSIVENESS(EntityCreated2[aaa]);
                TASK_SHOOT_AT_ENTITY(EntityCreated2[aaa], playerPedsprx3);
                TASK_COMBAT_PED(EntityCreated2[aaa], playerPedsprx3);
                SET_PED_KEEP_TASK(EntityCreated2[aaa]);
                SET_PED_MONEY(EntityCreated2[aaa], 10000);

                ++aaa;
                ++sss;
                SET_PED_MONEY(EntityCreated2[aaa], 10000);
                ++aaa;
                SET_MODEL_AS_NO_LONGER_NEEDED(EntityCreated2[aaa]);
            }
            Application.DoEvents();

            if (!(GET_PLAYER_PED(num4) == PLAYER_PED_ID()))
            {
                RPCHook.Call2<float[]>(OLDNatives.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, (object)playerPedsprx4, (object)numArray2);
                for (int index = 0; index < 1; ++index)
                    EntityCreated2[aaa] = RPCHook.Call(OLDNatives.CLONE_PED, (object)playerPedsprx4);

                do
                {
                    num = (int)OLDNatives.DOES_ENTITY_EXIST;
                    objArray = new object[1]
                    {
          (object) EntityCreated2[aaa]
                    };
                }
                while (RPCHook.Call((uint)num, objArray) != 1);

                int hashKeysprx2 = GET_HASH_KEYSPRX("WEAPON_CARBINERIFLE");
                GIVE_DELAYED_WEAPON_TO_PED(EntityCreated2[aaa], hashKeysprx2);
                SET_PED_CAN_SWITCH_WEAPON(EntityCreated2[aaa]);
                SET_PED_AS_ENEMY(playerPedsprx4);
                SET_ENTITY_IS_TARGET_PRIORITY(playerPedsprx4);
                SET_PED_SHOOT_RATE(EntityCreated2[aaa]);
                SET_PED_ARMOUR(EntityCreated2[aaa]);
                ADD_ARMOUR_TO_PED(EntityCreated2[aaa], 100);
                SET_PED_COMBAT_ABILITY(EntityCreated2[aaa]);
                SET_PED_COMBAT_ATTRIBUTES(EntityCreated2[aaa]);
                SET_PED_COMBAT_RANGE(EntityCreated2[aaa]);
                SET_PED_ACCURACY(EntityCreated2[aaa]);
                SET_PED_COMBAT_MOVEMENT(EntityCreated2[aaa]);
                SET_PED_FIRING_PATTERN(EntityCreated2[aaa]);
                SET_CAN_ATTACK_FRIENDLY(EntityCreated2[aaa], 0);
                SET_DRIVER_ABILITY(EntityCreated2[aaa]);
                SET_DRIVER_AGGRESSIVENESS(EntityCreated2[aaa]);
                TASK_SHOOT_AT_ENTITY(EntityCreated2[aaa], playerPedsprx4);
                TASK_COMBAT_PED(EntityCreated2[aaa], playerPedsprx4);
                SET_PED_KEEP_TASK(EntityCreated2[aaa]);
                SET_PED_MONEY(EntityCreated2[aaa], 10000);

                ++aaa;
                ++sss;
                SET_PED_MONEY(EntityCreated2[aaa], 10000);
                ++aaa;
                SET_MODEL_AS_NO_LONGER_NEEDED(EntityCreated2[aaa]);
            }
            Application.DoEvents();

            if (!(GET_PLAYER_PED(num5) == PLAYER_PED_ID()))
            {
                RPCHook.Call2<float[]>(OLDNatives.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, (object)playerPedsprx5, (object)numArray2);
                for (int index = 0; index < 1; ++index)
                    EntityCreated2[aaa] = RPCHook.Call(OLDNatives.CLONE_PED, (object)playerPedsprx5);

                do
                {
                    num = (int)OLDNatives.DOES_ENTITY_EXIST;
                    objArray = new object[1]
                    {
          (object) EntityCreated2[aaa]
                    };
                }
                while (RPCHook.Call((uint)num, objArray) != 1);

                int hashKeysprx2 = GET_HASH_KEYSPRX("WEAPON_CARBINERIFLE");
                GIVE_DELAYED_WEAPON_TO_PED(EntityCreated2[aaa], hashKeysprx2);
                SET_PED_CAN_SWITCH_WEAPON(EntityCreated2[aaa]);
                SET_PED_AS_ENEMY(playerPedsprx5);
                SET_ENTITY_IS_TARGET_PRIORITY(playerPedsprx5);
                SET_PED_SHOOT_RATE(EntityCreated2[aaa]);
                SET_PED_ARMOUR(EntityCreated2[aaa]);
                ADD_ARMOUR_TO_PED(EntityCreated2[aaa], 100);
                SET_PED_COMBAT_ABILITY(EntityCreated2[aaa]);
                SET_PED_COMBAT_ATTRIBUTES(EntityCreated2[aaa]);
                SET_PED_COMBAT_RANGE(EntityCreated2[aaa]);
                SET_PED_ACCURACY(EntityCreated2[aaa]);
                SET_PED_COMBAT_MOVEMENT(EntityCreated2[aaa]);
                SET_PED_FIRING_PATTERN(EntityCreated2[aaa]);
                SET_CAN_ATTACK_FRIENDLY(EntityCreated2[aaa], 0);
                SET_DRIVER_ABILITY(EntityCreated2[aaa]);
                SET_DRIVER_AGGRESSIVENESS(EntityCreated2[aaa]);
                TASK_SHOOT_AT_ENTITY(EntityCreated2[aaa], playerPedsprx5);
                TASK_COMBAT_PED(EntityCreated2[aaa], playerPedsprx5);
                SET_PED_KEEP_TASK(EntityCreated2[aaa]);
                SET_PED_MONEY(EntityCreated2[aaa], 10000);

                ++aaa;
                ++sss;
                SET_PED_MONEY(EntityCreated2[aaa], 10000);
                ++aaa;
                SET_MODEL_AS_NO_LONGER_NEEDED(EntityCreated2[aaa]);
            }
            Application.DoEvents();

            if (!(GET_PLAYER_PED(num6) == PLAYER_PED_ID()))
            {
                RPCHook.Call2<float[]>(OLDNatives.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, (object)playerPedsprx6, (object)numArray2);
                for (int index = 0; index < 1; ++index)
                    EntityCreated2[aaa] = RPCHook.Call(OLDNatives.CLONE_PED, (object)playerPedsprx6);

                do
                {
                    num = (int)OLDNatives.DOES_ENTITY_EXIST;
                    objArray = new object[1]
                    {
          (object) EntityCreated2[aaa]
                    };
                }
                while (RPCHook.Call((uint)num, objArray) != 1);

                int hashKeysprx2 = GET_HASH_KEYSPRX("WEAPON_CARBINERIFLE");
                GIVE_DELAYED_WEAPON_TO_PED(EntityCreated2[aaa], hashKeysprx2);
                SET_PED_CAN_SWITCH_WEAPON(EntityCreated2[aaa]);
                SET_PED_AS_ENEMY(playerPedsprx6);
                SET_ENTITY_IS_TARGET_PRIORITY(playerPedsprx6);
                SET_PED_SHOOT_RATE(EntityCreated2[aaa]);
                SET_PED_ARMOUR(EntityCreated2[aaa]);
                ADD_ARMOUR_TO_PED(EntityCreated2[aaa], 100);
                SET_PED_COMBAT_ABILITY(EntityCreated2[aaa]);
                SET_PED_COMBAT_ATTRIBUTES(EntityCreated2[aaa]);
                SET_PED_COMBAT_RANGE(EntityCreated2[aaa]);
                SET_PED_ACCURACY(EntityCreated2[aaa]);
                SET_PED_COMBAT_MOVEMENT(EntityCreated2[aaa]);
                SET_PED_FIRING_PATTERN(EntityCreated2[aaa]);
                SET_CAN_ATTACK_FRIENDLY(EntityCreated2[aaa], 0);
                SET_DRIVER_ABILITY(EntityCreated2[aaa]);
                SET_DRIVER_AGGRESSIVENESS(EntityCreated2[aaa]);
                TASK_SHOOT_AT_ENTITY(EntityCreated2[aaa], playerPedsprx6);
                TASK_COMBAT_PED(EntityCreated2[aaa], playerPedsprx6);
                SET_PED_KEEP_TASK(EntityCreated2[aaa]);
                SET_PED_MONEY(EntityCreated2[aaa], 10000);

                ++aaa;
                ++sss;
                SET_PED_MONEY(EntityCreated2[aaa], 10000);
                ++aaa;
                SET_MODEL_AS_NO_LONGER_NEEDED(EntityCreated2[aaa]);
            }
            Application.DoEvents();

            if (!(GET_PLAYER_PED(num7) == PLAYER_PED_ID()))
            {
                RPCHook.Call2<float[]>(OLDNatives.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, (object)playerPedsprx7, (object)numArray2);
                for (int index = 0; index < 1; ++index)
                    EntityCreated2[aaa] = RPCHook.Call(OLDNatives.CLONE_PED, (object)playerPedsprx7);

                do
                {
                    num = (int)OLDNatives.DOES_ENTITY_EXIST;
                    objArray = new object[1]
                    {
          (object) EntityCreated2[aaa]
                    };
                }
                while (RPCHook.Call((uint)num, objArray) != 1);

                int hashKeysprx2 = GET_HASH_KEYSPRX("WEAPON_CARBINERIFLE");
                GIVE_DELAYED_WEAPON_TO_PED(EntityCreated2[aaa], hashKeysprx2);
                SET_PED_CAN_SWITCH_WEAPON(EntityCreated2[aaa]);
                SET_PED_AS_ENEMY(playerPedsprx7);
                SET_ENTITY_IS_TARGET_PRIORITY(playerPedsprx7);
                SET_PED_SHOOT_RATE(EntityCreated2[aaa]);
                SET_PED_ARMOUR(EntityCreated2[aaa]);
                ADD_ARMOUR_TO_PED(EntityCreated2[aaa], 100);
                SET_PED_COMBAT_ABILITY(EntityCreated2[aaa]);
                SET_PED_COMBAT_ATTRIBUTES(EntityCreated2[aaa]);
                SET_PED_COMBAT_RANGE(EntityCreated2[aaa]);
                SET_PED_ACCURACY(EntityCreated2[aaa]);
                SET_PED_COMBAT_MOVEMENT(EntityCreated2[aaa]);
                SET_PED_FIRING_PATTERN(EntityCreated2[aaa]);
                SET_CAN_ATTACK_FRIENDLY(EntityCreated2[aaa], 0);
                SET_DRIVER_ABILITY(EntityCreated2[aaa]);
                SET_DRIVER_AGGRESSIVENESS(EntityCreated2[aaa]);
                TASK_SHOOT_AT_ENTITY(EntityCreated2[aaa], playerPedsprx7);
                TASK_COMBAT_PED(EntityCreated2[aaa], playerPedsprx7);
                SET_PED_KEEP_TASK(EntityCreated2[aaa]);
                SET_PED_MONEY(EntityCreated2[aaa], 10000);

                ++aaa;
                ++sss;
                SET_PED_MONEY(EntityCreated2[aaa], 10000);
                ++aaa;
                SET_MODEL_AS_NO_LONGER_NEEDED(EntityCreated2[aaa]);
            }
            Application.DoEvents();

            if (!(GET_PLAYER_PED(num8) == PLAYER_PED_ID()))
            {
                RPCHook.Call2<float[]>(OLDNatives.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, (object)playerPedsprx8, (object)numArray2);
                for (int index = 0; index < 1; ++index)
                    EntityCreated2[aaa] = RPCHook.Call(OLDNatives.CLONE_PED, (object)playerPedsprx8);

                do
                {
                    num = (int)OLDNatives.DOES_ENTITY_EXIST;
                    objArray = new object[1]
                    {
          (object) EntityCreated2[aaa]
                    };
                }
                while (RPCHook.Call((uint)num, objArray) != 1);

                int hashKeysprx2 = GET_HASH_KEYSPRX("WEAPON_CARBINERIFLE");
                GIVE_DELAYED_WEAPON_TO_PED(EntityCreated2[aaa], hashKeysprx2);
                SET_PED_CAN_SWITCH_WEAPON(EntityCreated2[aaa]);
                SET_PED_AS_ENEMY(playerPedsprx8);
                SET_ENTITY_IS_TARGET_PRIORITY(playerPedsprx8);
                SET_PED_SHOOT_RATE(EntityCreated2[aaa]);
                SET_PED_ARMOUR(EntityCreated2[aaa]);
                ADD_ARMOUR_TO_PED(EntityCreated2[aaa], 100);
                SET_PED_COMBAT_ABILITY(EntityCreated2[aaa]);
                SET_PED_COMBAT_ATTRIBUTES(EntityCreated2[aaa]);
                SET_PED_COMBAT_RANGE(EntityCreated2[aaa]);
                SET_PED_ACCURACY(EntityCreated2[aaa]);
                SET_PED_COMBAT_MOVEMENT(EntityCreated2[aaa]);
                SET_PED_FIRING_PATTERN(EntityCreated2[aaa]);
                SET_CAN_ATTACK_FRIENDLY(EntityCreated2[aaa], 0);
                SET_DRIVER_ABILITY(EntityCreated2[aaa]);
                SET_DRIVER_AGGRESSIVENESS(EntityCreated2[aaa]);
                TASK_SHOOT_AT_ENTITY(EntityCreated2[aaa], playerPedsprx8);
                TASK_COMBAT_PED(EntityCreated2[aaa], playerPedsprx8);
                SET_PED_KEEP_TASK(EntityCreated2[aaa]);
                SET_PED_MONEY(EntityCreated2[aaa], 10000);

                ++aaa;
                ++sss;
                SET_PED_MONEY(EntityCreated2[aaa], 10000);
                ++aaa;
                SET_MODEL_AS_NO_LONGER_NEEDED(EntityCreated2[aaa]);
            }
            Application.DoEvents();

            if (!(GET_PLAYER_PED(num9) == PLAYER_PED_ID()))
            {
                RPCHook.Call2<float[]>(OLDNatives.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, (object)playerPedsprx9, (object)numArray2);
                for (int index = 0; index < 1; ++index)
                    EntityCreated2[aaa] = RPCHook.Call(OLDNatives.CLONE_PED, (object)playerPedsprx9);

                do
                {
                    num = (int)OLDNatives.DOES_ENTITY_EXIST;
                    objArray = new object[1]
                    {
          (object) EntityCreated2[aaa]
                    };
                }
                while (RPCHook.Call((uint)num, objArray) != 1);

                int hashKeysprx2 = GET_HASH_KEYSPRX("WEAPON_CARBINERIFLE");
                GIVE_DELAYED_WEAPON_TO_PED(EntityCreated2[aaa], hashKeysprx2);
                SET_PED_CAN_SWITCH_WEAPON(EntityCreated2[aaa]);
                SET_PED_AS_ENEMY(playerPedsprx9);
                SET_ENTITY_IS_TARGET_PRIORITY(playerPedsprx9);
                SET_PED_SHOOT_RATE(EntityCreated2[aaa]);
                SET_PED_ARMOUR(EntityCreated2[aaa]);
                ADD_ARMOUR_TO_PED(EntityCreated2[aaa], 100);
                SET_PED_COMBAT_ABILITY(EntityCreated2[aaa]);
                SET_PED_COMBAT_ATTRIBUTES(EntityCreated2[aaa]);
                SET_PED_COMBAT_RANGE(EntityCreated2[aaa]);
                SET_PED_ACCURACY(EntityCreated2[aaa]);
                SET_PED_COMBAT_MOVEMENT(EntityCreated2[aaa]);
                SET_PED_FIRING_PATTERN(EntityCreated2[aaa]);
                SET_CAN_ATTACK_FRIENDLY(EntityCreated2[aaa], 0);
                SET_DRIVER_ABILITY(EntityCreated2[aaa]);
                SET_DRIVER_AGGRESSIVENESS(EntityCreated2[aaa]);
                TASK_SHOOT_AT_ENTITY(EntityCreated2[aaa], playerPedsprx9);
                TASK_COMBAT_PED(EntityCreated2[aaa], playerPedsprx9);
                SET_PED_KEEP_TASK(EntityCreated2[aaa]);
                SET_PED_MONEY(EntityCreated2[aaa], 10000);

                ++aaa;
                ++sss;
                SET_PED_MONEY(EntityCreated2[aaa], 10000);
                ++aaa;
                SET_MODEL_AS_NO_LONGER_NEEDED(EntityCreated2[aaa]);
            }
            Application.DoEvents();

            if (!(GET_PLAYER_PED(num10) == PLAYER_PED_ID()))
            {
                RPCHook.Call2<float[]>(OLDNatives.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, (object)playerPedsprx10, (object)numArray2);
                for (int index = 0; index < 1; ++index)
                    EntityCreated2[aaa] = RPCHook.Call(OLDNatives.CLONE_PED, (object)playerPedsprx10);

                do
                {
                    num = (int)OLDNatives.DOES_ENTITY_EXIST;
                    objArray = new object[1]
                    {
          (object) EntityCreated2[aaa]
                    };
                }
                while (RPCHook.Call((uint)num, objArray) != 1);

                int hashKeysprx2 = GET_HASH_KEYSPRX("WEAPON_CARBINERIFLE");
                GIVE_DELAYED_WEAPON_TO_PED(EntityCreated2[aaa], hashKeysprx2);
                SET_PED_CAN_SWITCH_WEAPON(EntityCreated2[aaa]);
                SET_PED_AS_ENEMY(playerPedsprx10);
                SET_ENTITY_IS_TARGET_PRIORITY(playerPedsprx10);
                SET_PED_SHOOT_RATE(EntityCreated2[aaa]);
                SET_PED_ARMOUR(EntityCreated2[aaa]);
                ADD_ARMOUR_TO_PED(EntityCreated2[aaa], 100);
                SET_PED_COMBAT_ABILITY(EntityCreated2[aaa]);
                SET_PED_COMBAT_ATTRIBUTES(EntityCreated2[aaa]);
                SET_PED_COMBAT_RANGE(EntityCreated2[aaa]);
                SET_PED_ACCURACY(EntityCreated2[aaa]);
                SET_PED_COMBAT_MOVEMENT(EntityCreated2[aaa]);
                SET_PED_FIRING_PATTERN(EntityCreated2[aaa]);
                SET_CAN_ATTACK_FRIENDLY(EntityCreated2[aaa], 0);
                SET_DRIVER_ABILITY(EntityCreated2[aaa]);
                SET_DRIVER_AGGRESSIVENESS(EntityCreated2[aaa]);
                TASK_SHOOT_AT_ENTITY(EntityCreated2[aaa], playerPedsprx10);
                TASK_COMBAT_PED(EntityCreated2[aaa], playerPedsprx10);
                SET_PED_KEEP_TASK(EntityCreated2[aaa]);
                SET_PED_MONEY(EntityCreated2[aaa], 10000);

                ++aaa;
                ++sss;
                SET_PED_MONEY(EntityCreated2[aaa], 10000);
                ++aaa;
                SET_MODEL_AS_NO_LONGER_NEEDED(EntityCreated2[aaa]);
            }
            Application.DoEvents();

            if (!(GET_PLAYER_PED(num11) == PLAYER_PED_ID()))
            {
                RPCHook.Call2<float[]>(OLDNatives.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, (object)playerPedsprx11, (object)numArray2);
                for (int index = 0; index < 1; ++index)
                    EntityCreated2[aaa] = RPCHook.Call(OLDNatives.CLONE_PED, (object)playerPedsprx11);

                do
                {
                    num = (int)OLDNatives.DOES_ENTITY_EXIST;
                    objArray = new object[1]
                    {
          (object) EntityCreated2[aaa]
                    };
                }
                while (RPCHook.Call((uint)num, objArray) != 1);

                int hashKeysprx2 = GET_HASH_KEYSPRX("WEAPON_CARBINERIFLE");
                GIVE_DELAYED_WEAPON_TO_PED(EntityCreated2[aaa], hashKeysprx2);
                SET_PED_CAN_SWITCH_WEAPON(EntityCreated2[aaa]);
                SET_PED_AS_ENEMY(playerPedsprx11);
                SET_ENTITY_IS_TARGET_PRIORITY(playerPedsprx11);
                SET_PED_SHOOT_RATE(EntityCreated2[aaa]);
                SET_PED_ARMOUR(EntityCreated2[aaa]);
                ADD_ARMOUR_TO_PED(EntityCreated2[aaa], 100);
                SET_PED_COMBAT_ABILITY(EntityCreated2[aaa]);
                SET_PED_COMBAT_ATTRIBUTES(EntityCreated2[aaa]);
                SET_PED_COMBAT_RANGE(EntityCreated2[aaa]);
                SET_PED_ACCURACY(EntityCreated2[aaa]);
                SET_PED_COMBAT_MOVEMENT(EntityCreated2[aaa]);
                SET_PED_FIRING_PATTERN(EntityCreated2[aaa]);
                SET_CAN_ATTACK_FRIENDLY(EntityCreated2[aaa], 0);
                SET_DRIVER_ABILITY(EntityCreated2[aaa]);
                SET_DRIVER_AGGRESSIVENESS(EntityCreated2[aaa]);
                TASK_SHOOT_AT_ENTITY(EntityCreated2[aaa], playerPedsprx11);
                TASK_COMBAT_PED(EntityCreated2[aaa], playerPedsprx11);
                SET_PED_KEEP_TASK(EntityCreated2[aaa]);
                SET_PED_MONEY(EntityCreated2[aaa], 10000);

                ++aaa;
                ++sss;
                SET_PED_MONEY(EntityCreated2[aaa], 10000);
                ++aaa;
                SET_MODEL_AS_NO_LONGER_NEEDED(EntityCreated2[aaa]);
            }
            Application.DoEvents();

            if (!(GET_PLAYER_PED(num12) == PLAYER_PED_ID()))
            {
                RPCHook.Call2<float[]>(OLDNatives.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, (object)playerPedsprx12, (object)numArray2);
                for (int index = 0; index < 1; ++index)
                    EntityCreated2[aaa] = RPCHook.Call(OLDNatives.CLONE_PED, (object)playerPedsprx12);

                do
                {
                    num = (int)OLDNatives.DOES_ENTITY_EXIST;
                    objArray = new object[1]
                    {
          (object) EntityCreated2[aaa]
                    };
                }
                while (RPCHook.Call((uint)num, objArray) != 1);

                int hashKeysprx2 = GET_HASH_KEYSPRX("WEAPON_CARBINERIFLE");
                GIVE_DELAYED_WEAPON_TO_PED(EntityCreated2[aaa], hashKeysprx2);
                SET_PED_CAN_SWITCH_WEAPON(EntityCreated2[aaa]);
                SET_PED_AS_ENEMY(playerPedsprx12);
                SET_ENTITY_IS_TARGET_PRIORITY(playerPedsprx12);
                SET_PED_SHOOT_RATE(EntityCreated2[aaa]);
                SET_PED_ARMOUR(EntityCreated2[aaa]);
                ADD_ARMOUR_TO_PED(EntityCreated2[aaa], 100);
                SET_PED_COMBAT_ABILITY(EntityCreated2[aaa]);
                SET_PED_COMBAT_ATTRIBUTES(EntityCreated2[aaa]);
                SET_PED_COMBAT_RANGE(EntityCreated2[aaa]);
                SET_PED_ACCURACY(EntityCreated2[aaa]);
                SET_PED_COMBAT_MOVEMENT(EntityCreated2[aaa]);
                SET_PED_FIRING_PATTERN(EntityCreated2[aaa]);
                SET_CAN_ATTACK_FRIENDLY(EntityCreated2[aaa], 0);
                SET_DRIVER_ABILITY(EntityCreated2[aaa]);
                SET_DRIVER_AGGRESSIVENESS(EntityCreated2[aaa]);
                TASK_SHOOT_AT_ENTITY(EntityCreated2[aaa], playerPedsprx12);
                TASK_COMBAT_PED(EntityCreated2[aaa], playerPedsprx12);
                SET_PED_KEEP_TASK(EntityCreated2[aaa]);
                SET_PED_MONEY(EntityCreated2[aaa], 10000);

                ++aaa;
                ++sss;
                SET_PED_MONEY(EntityCreated2[aaa], 10000);
                ++aaa;
                SET_MODEL_AS_NO_LONGER_NEEDED(EntityCreated2[aaa]);
            }
            Application.DoEvents();

            if (!(GET_PLAYER_PED(num13) == PLAYER_PED_ID()))
            {
                RPCHook.Call2<float[]>(OLDNatives.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, (object)playerPedsprx13, (object)numArray2);
                for (int index = 0; index < 1; ++index)
                    EntityCreated2[aaa] = RPCHook.Call(OLDNatives.CLONE_PED, (object)playerPedsprx13);

                do
                {
                    num = (int)OLDNatives.DOES_ENTITY_EXIST;
                    objArray = new object[1]
                    {
          (object) EntityCreated2[aaa]
                    };
                }
                while (RPCHook.Call((uint)num, objArray) != 1);

                int hashKeysprx2 = GET_HASH_KEYSPRX("WEAPON_CARBINERIFLE");
                GIVE_DELAYED_WEAPON_TO_PED(EntityCreated2[aaa], hashKeysprx2);
                SET_PED_CAN_SWITCH_WEAPON(EntityCreated2[aaa]);
                SET_PED_AS_ENEMY(playerPedsprx13);
                SET_ENTITY_IS_TARGET_PRIORITY(playerPedsprx13);
                SET_PED_SHOOT_RATE(EntityCreated2[aaa]);
                SET_PED_ARMOUR(EntityCreated2[aaa]);
                ADD_ARMOUR_TO_PED(EntityCreated2[aaa], 100);
                SET_PED_COMBAT_ABILITY(EntityCreated2[aaa]);
                SET_PED_COMBAT_ATTRIBUTES(EntityCreated2[aaa]);
                SET_PED_COMBAT_RANGE(EntityCreated2[aaa]);
                SET_PED_ACCURACY(EntityCreated2[aaa]);
                SET_PED_COMBAT_MOVEMENT(EntityCreated2[aaa]);
                SET_PED_FIRING_PATTERN(EntityCreated2[aaa]);
                SET_CAN_ATTACK_FRIENDLY(EntityCreated2[aaa], 0);
                SET_DRIVER_ABILITY(EntityCreated2[aaa]);
                SET_DRIVER_AGGRESSIVENESS(EntityCreated2[aaa]);
                TASK_SHOOT_AT_ENTITY(EntityCreated2[aaa], playerPedsprx13);
                TASK_COMBAT_PED(EntityCreated2[aaa], playerPedsprx13);
                SET_PED_KEEP_TASK(EntityCreated2[aaa]);
                SET_PED_MONEY(EntityCreated2[aaa], 10000);

                ++aaa;
                ++sss;
                SET_PED_MONEY(EntityCreated2[aaa], 10000);
                ++aaa;
                SET_MODEL_AS_NO_LONGER_NEEDED(EntityCreated2[aaa]);
            }
            Application.DoEvents();

            if (!(GET_PLAYER_PED(num14) == PLAYER_PED_ID()))
            {
                RPCHook.Call2<float[]>(OLDNatives.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, (object)playerPedsprx14, (object)numArray2);
                for (int index = 0; index < 1; ++index)
                    EntityCreated2[aaa] = RPCHook.Call(OLDNatives.CLONE_PED, (object)playerPedsprx14);

                do
                {
                    num = (int)OLDNatives.DOES_ENTITY_EXIST;
                    objArray = new object[1]
                    {
          (object) EntityCreated2[aaa]
                    };
                }
                while (RPCHook.Call((uint)num, objArray) != 1);

                int hashKeysprx2 = GET_HASH_KEYSPRX("WEAPON_CARBINERIFLE");
                GIVE_DELAYED_WEAPON_TO_PED(EntityCreated2[aaa], hashKeysprx2);
                SET_PED_CAN_SWITCH_WEAPON(EntityCreated2[aaa]);
                SET_PED_AS_ENEMY(playerPedsprx14);
                SET_ENTITY_IS_TARGET_PRIORITY(playerPedsprx14);
                SET_PED_SHOOT_RATE(EntityCreated2[aaa]);
                SET_PED_ARMOUR(EntityCreated2[aaa]);
                ADD_ARMOUR_TO_PED(EntityCreated2[aaa], 100);
                SET_PED_COMBAT_ABILITY(EntityCreated2[aaa]);
                SET_PED_COMBAT_ATTRIBUTES(EntityCreated2[aaa]);
                SET_PED_COMBAT_RANGE(EntityCreated2[aaa]);
                SET_PED_ACCURACY(EntityCreated2[aaa]);
                SET_PED_COMBAT_MOVEMENT(EntityCreated2[aaa]);
                SET_PED_FIRING_PATTERN(EntityCreated2[aaa]);
                SET_CAN_ATTACK_FRIENDLY(EntityCreated2[aaa], 0);
                SET_DRIVER_ABILITY(EntityCreated2[aaa]);
                SET_DRIVER_AGGRESSIVENESS(EntityCreated2[aaa]);
                TASK_SHOOT_AT_ENTITY(EntityCreated2[aaa], playerPedsprx14);
                TASK_COMBAT_PED(EntityCreated2[aaa], playerPedsprx14);
                SET_PED_KEEP_TASK(EntityCreated2[aaa]);
                SET_PED_MONEY(EntityCreated2[aaa], 10000);

                ++aaa;
                ++sss;
                SET_PED_MONEY(EntityCreated2[aaa], 10000);
                ++aaa;
                SET_MODEL_AS_NO_LONGER_NEEDED(EntityCreated2[aaa]);
            }
            Application.DoEvents();

            if (!(GET_PLAYER_PED(num15) == PLAYER_PED_ID()))
            {
                RPCHook.Call2<float[]>(OLDNatives.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, (object)playerPedsprx15, (object)numArray2);
                for (int index = 0; index < 1; ++index)
                    EntityCreated2[aaa] = RPCHook.Call(OLDNatives.CLONE_PED, (object)playerPedsprx15);

                do
                {
                    num = (int)OLDNatives.DOES_ENTITY_EXIST;
                    objArray = new object[1]
                    {
          (object) EntityCreated2[aaa]
                    };
                }
                while (RPCHook.Call((uint)num, objArray) != 1);

                int hashKeysprx2 = GET_HASH_KEYSPRX("WEAPON_CARBINERIFLE");
                GIVE_DELAYED_WEAPON_TO_PED(EntityCreated2[aaa], hashKeysprx2);
                SET_PED_CAN_SWITCH_WEAPON(EntityCreated2[aaa]);
                SET_PED_AS_ENEMY(playerPedsprx15);
                SET_ENTITY_IS_TARGET_PRIORITY(playerPedsprx15);
                SET_PED_SHOOT_RATE(EntityCreated2[aaa]);
                SET_PED_ARMOUR(EntityCreated2[aaa]);
                ADD_ARMOUR_TO_PED(EntityCreated2[aaa], 100);
                SET_PED_COMBAT_ABILITY(EntityCreated2[aaa]);
                SET_PED_COMBAT_ATTRIBUTES(EntityCreated2[aaa]);
                SET_PED_COMBAT_RANGE(EntityCreated2[aaa]);
                SET_PED_ACCURACY(EntityCreated2[aaa]);
                SET_PED_COMBAT_MOVEMENT(EntityCreated2[aaa]);
                SET_PED_FIRING_PATTERN(EntityCreated2[aaa]);
                SET_CAN_ATTACK_FRIENDLY(EntityCreated2[aaa], 0);
                SET_DRIVER_ABILITY(EntityCreated2[aaa]);
                SET_DRIVER_AGGRESSIVENESS(EntityCreated2[aaa]);
                TASK_SHOOT_AT_ENTITY(EntityCreated2[aaa], playerPedsprx15);
                TASK_COMBAT_PED(EntityCreated2[aaa], playerPedsprx15);
                SET_PED_KEEP_TASK(EntityCreated2[aaa]);
                SET_PED_MONEY(EntityCreated2[aaa], 10000);

                ++aaa;
                ++sss;
                SET_PED_MONEY(EntityCreated2[aaa], 10000);
                ++aaa;
                SET_MODEL_AS_NO_LONGER_NEEDED(EntityCreated2[aaa]);
            }
            Application.DoEvents();

            if (!(GET_PLAYER_PED(num16) == PLAYER_PED_ID()))
            {
                RPCHook.Call2<float[]>(OLDNatives.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, (object)playerPedsprx16, (object)numArray2);
                for (int index = 0; index < 1; ++index)
                    EntityCreated2[aaa] = RPCHook.Call(OLDNatives.CLONE_PED, (object)playerPedsprx16);

                do
                {
                    num = (int)OLDNatives.DOES_ENTITY_EXIST;
                    objArray = new object[1]
                    {
          (object) EntityCreated2[aaa]
                    };
                }
                while (RPCHook.Call((uint)num, objArray) != 1);

                int hashKeysprx2 = GET_HASH_KEYSPRX("WEAPON_CARBINERIFLE");
                GIVE_DELAYED_WEAPON_TO_PED(EntityCreated2[aaa], hashKeysprx2);
                SET_PED_CAN_SWITCH_WEAPON(EntityCreated2[aaa]);
                SET_PED_AS_ENEMY(playerPedsprx16);
                SET_ENTITY_IS_TARGET_PRIORITY(playerPedsprx16);
                SET_PED_SHOOT_RATE(EntityCreated2[aaa]);
                SET_PED_ARMOUR(EntityCreated2[aaa]);
                ADD_ARMOUR_TO_PED(EntityCreated2[aaa], 100);
                SET_PED_COMBAT_ABILITY(EntityCreated2[aaa]);
                SET_PED_COMBAT_ATTRIBUTES(EntityCreated2[aaa]);
                SET_PED_COMBAT_RANGE(EntityCreated2[aaa]);
                SET_PED_ACCURACY(EntityCreated2[aaa]);
                SET_PED_COMBAT_MOVEMENT(EntityCreated2[aaa]);
                SET_PED_FIRING_PATTERN(EntityCreated2[aaa]);
                SET_CAN_ATTACK_FRIENDLY(EntityCreated2[aaa], 0);
                SET_DRIVER_ABILITY(EntityCreated2[aaa]);
                SET_DRIVER_AGGRESSIVENESS(EntityCreated2[aaa]);
                TASK_SHOOT_AT_ENTITY(EntityCreated2[aaa], playerPedsprx16);
                TASK_COMBAT_PED(EntityCreated2[aaa], playerPedsprx16);
                SET_PED_KEEP_TASK(EntityCreated2[aaa]);
                SET_PED_MONEY(EntityCreated2[aaa], 10000);

                ++aaa;
                ++sss;
                SET_PED_MONEY(EntityCreated2[aaa], 10000);
                ++aaa;
                SET_MODEL_AS_NO_LONGER_NEEDED(EntityCreated2[aaa]);
            }
            Application.DoEvents();
        }

        public static void MakeExplodeAll(int list)
        {
            if (list == 1)
            {
                int type = 5;
                int num1 = list = 1;
                int num2 = list = 2;
                int num3 = list = 3;
                int num4 = list = 4;
                int num5 = list = 5;
                int num6 = list = 6;
                int num7 = list = 7;
                int num8 = list = 8;
                int num9 = list = 9;
                int num10 = list = 10;
                int num11 = list = 11;
                int num12 = list = 12;
                int num13 = list = 13;
                int num14 = list = 14;
                int num15 = list = 15;
                int num16 = list = 16;

                int PED_ID1 = GET_PLAYER_PED(num1);

                float[] entityCoords2 = GET_ENTITY_COORDS(GET_PLAYER_PED(num2));
                float[] entityCoords3 = GET_ENTITY_COORDS(GET_PLAYER_PED(num3));
                float[] entityCoords4 = GET_ENTITY_COORDS(GET_PLAYER_PED(num4));
                float[] entityCoords5 = GET_ENTITY_COORDS(GET_PLAYER_PED(num5));
                float[] entityCoords6 = GET_ENTITY_COORDS(GET_PLAYER_PED(num6));
                float[] entityCoords7 = GET_ENTITY_COORDS(GET_PLAYER_PED(num7));
                float[] entityCoords8 = GET_ENTITY_COORDS(GET_PLAYER_PED(num8));
                float[] entityCoords9 = GET_ENTITY_COORDS(GET_PLAYER_PED(num9));
                float[] entityCoords10 = GET_ENTITY_COORDS(GET_PLAYER_PED(num10));
                float[] entityCoords11 = GET_ENTITY_COORDS(GET_PLAYER_PED(num11));
                float[] entityCoords12 = GET_ENTITY_COORDS(GET_PLAYER_PED(num12));
                float[] entityCoords13 = GET_ENTITY_COORDS(GET_PLAYER_PED(num13));
                float[] entityCoords14 = GET_ENTITY_COORDS(GET_PLAYER_PED(num14));
                float[] entityCoords15 = GET_ENTITY_COORDS(GET_PLAYER_PED(num15));
                float[] entityCoords16 = GET_ENTITY_COORDS(GET_PLAYER_PED(num16));

                list = 2;

                Owned_Explosion(PED_ID1, entityCoords2, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID1, entityCoords3, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID1, entityCoords4, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID1, entityCoords5, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID1, entityCoords6, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID1, entityCoords7, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID1, entityCoords8, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID1, entityCoords9, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID1, entityCoords10, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID1, entityCoords11, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID1, entityCoords12, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID1, entityCoords13, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID1, entityCoords14, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID1, entityCoords15, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID1, entityCoords16, type);
                Thread.Sleep(350);
            }

            if (list == 2)
            {
                int type = 5;
                int num1 = list = 1;
                int num2 = list = 2;
                int num3 = list = 3;
                int num4 = list = 4;
                int num5 = list = 5;
                int num6 = list = 6;
                int num7 = list = 7;
                int num8 = list = 8;
                int num9 = list = 9;
                int num10 = list = 10;
                int num11 = list = 11;
                int num12 = list = 12;
                int num13 = list = 13;
                int num14 = list = 14;
                int num15 = list = 15;
                int num16 = list = 16;

                int PED_ID2 = GET_PLAYER_PED(num2);

                float[] entityCoords1 = GET_ENTITY_COORDS(GET_PLAYER_PED(num1));
                float[] entityCoords3 = GET_ENTITY_COORDS(GET_PLAYER_PED(num3));
                float[] entityCoords4 = GET_ENTITY_COORDS(GET_PLAYER_PED(num4));
                float[] entityCoords5 = GET_ENTITY_COORDS(GET_PLAYER_PED(num5));
                float[] entityCoords6 = GET_ENTITY_COORDS(GET_PLAYER_PED(num6));
                float[] entityCoords7 = GET_ENTITY_COORDS(GET_PLAYER_PED(num7));
                float[] entityCoords8 = GET_ENTITY_COORDS(GET_PLAYER_PED(num8));
                float[] entityCoords9 = GET_ENTITY_COORDS(GET_PLAYER_PED(num9));
                float[] entityCoords10 = GET_ENTITY_COORDS(GET_PLAYER_PED(num10));
                float[] entityCoords11 = GET_ENTITY_COORDS(GET_PLAYER_PED(num11));
                float[] entityCoords12 = GET_ENTITY_COORDS(GET_PLAYER_PED(num12));
                float[] entityCoords13 = GET_ENTITY_COORDS(GET_PLAYER_PED(num13));
                float[] entityCoords14 = GET_ENTITY_COORDS(GET_PLAYER_PED(num14));
                float[] entityCoords15 = GET_ENTITY_COORDS(GET_PLAYER_PED(num15));
                float[] entityCoords16 = GET_ENTITY_COORDS(GET_PLAYER_PED(num16));

                Owned_Explosion(PED_ID2, entityCoords1, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID2, entityCoords3, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID2, entityCoords4, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID2, entityCoords5, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID2, entityCoords6, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID2, entityCoords7, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID2, entityCoords8, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID2, entityCoords9, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID2, entityCoords10, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID2, entityCoords11, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID2, entityCoords12, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID2, entityCoords13, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID2, entityCoords14, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID2, entityCoords15, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID2, entityCoords16, type);
                Thread.Sleep(350);
            }

            if (list == 3)
            {
                int type = 5;
                int num1 = list = 1;
                int num2 = list = 2;
                int num3 = list = 3;
                int num4 = list = 4;
                int num5 = list = 5;
                int num6 = list = 6;
                int num7 = list = 7;
                int num8 = list = 8;
                int num9 = list = 9;
                int num10 = list = 10;
                int num11 = list = 11;
                int num12 = list = 12;
                int num13 = list = 13;
                int num14 = list = 14;
                int num15 = list = 15;
                int num16 = list = 16;

                int PED_ID3 = GET_PLAYER_PED(num3);

                float[] entityCoords1 = GET_ENTITY_COORDS(GET_PLAYER_PED(num1));
                float[] entityCoords2 = GET_ENTITY_COORDS(GET_PLAYER_PED(num2));
                float[] entityCoords4 = GET_ENTITY_COORDS(GET_PLAYER_PED(num4));
                float[] entityCoords5 = GET_ENTITY_COORDS(GET_PLAYER_PED(num5));
                float[] entityCoords6 = GET_ENTITY_COORDS(GET_PLAYER_PED(num6));
                float[] entityCoords7 = GET_ENTITY_COORDS(GET_PLAYER_PED(num7));
                float[] entityCoords8 = GET_ENTITY_COORDS(GET_PLAYER_PED(num8));
                float[] entityCoords9 = GET_ENTITY_COORDS(GET_PLAYER_PED(num9));
                float[] entityCoords10 = GET_ENTITY_COORDS(GET_PLAYER_PED(num10));
                float[] entityCoords11 = GET_ENTITY_COORDS(GET_PLAYER_PED(num11));
                float[] entityCoords12 = GET_ENTITY_COORDS(GET_PLAYER_PED(num12));
                float[] entityCoords13 = GET_ENTITY_COORDS(GET_PLAYER_PED(num13));
                float[] entityCoords14 = GET_ENTITY_COORDS(GET_PLAYER_PED(num14));
                float[] entityCoords15 = GET_ENTITY_COORDS(GET_PLAYER_PED(num15));
                float[] entityCoords16 = GET_ENTITY_COORDS(GET_PLAYER_PED(num16));

                Owned_Explosion(PED_ID3, entityCoords1, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID3, entityCoords2, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID3, entityCoords4, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID3, entityCoords5, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID3, entityCoords6, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID3, entityCoords7, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID3, entityCoords8, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID3, entityCoords9, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID3, entityCoords10, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID3, entityCoords11, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID3, entityCoords12, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID3, entityCoords13, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID3, entityCoords14, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID3, entityCoords15, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID3, entityCoords16, type);
                Thread.Sleep(350);
            }

            if (list == 4)
            {
                int type = 5;
                int num1 = list = 1;
                int num2 = list = 2;
                int num3 = list = 3;
                int num4 = list = 4;
                int num5 = list = 5;
                int num6 = list = 6;
                int num7 = list = 7;
                int num8 = list = 8;
                int num9 = list = 9;
                int num10 = list = 10;
                int num11 = list = 11;
                int num12 = list = 12;
                int num13 = list = 13;
                int num14 = list = 14;
                int num15 = list = 15;
                int num16 = list = 16;

                int PED_ID4 = GET_PLAYER_PED(num4);

                float[] entityCoords1 = GET_ENTITY_COORDS(GET_PLAYER_PED(num1));
                float[] entityCoords2 = GET_ENTITY_COORDS(GET_PLAYER_PED(num2));
                float[] entityCoords3 = GET_ENTITY_COORDS(GET_PLAYER_PED(num3));
                float[] entityCoords5 = GET_ENTITY_COORDS(GET_PLAYER_PED(num5));
                float[] entityCoords6 = GET_ENTITY_COORDS(GET_PLAYER_PED(num6));
                float[] entityCoords7 = GET_ENTITY_COORDS(GET_PLAYER_PED(num7));
                float[] entityCoords8 = GET_ENTITY_COORDS(GET_PLAYER_PED(num8));
                float[] entityCoords9 = GET_ENTITY_COORDS(GET_PLAYER_PED(num9));
                float[] entityCoords10 = GET_ENTITY_COORDS(GET_PLAYER_PED(num10));
                float[] entityCoords11 = GET_ENTITY_COORDS(GET_PLAYER_PED(num11));
                float[] entityCoords12 = GET_ENTITY_COORDS(GET_PLAYER_PED(num12));
                float[] entityCoords13 = GET_ENTITY_COORDS(GET_PLAYER_PED(num13));
                float[] entityCoords14 = GET_ENTITY_COORDS(GET_PLAYER_PED(num14));
                float[] entityCoords15 = GET_ENTITY_COORDS(GET_PLAYER_PED(num15));
                float[] entityCoords16 = GET_ENTITY_COORDS(GET_PLAYER_PED(num16));

                Owned_Explosion(PED_ID4, entityCoords1, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID4, entityCoords2, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID4, entityCoords3, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID4, entityCoords5, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID4, entityCoords6, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID4, entityCoords7, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID4, entityCoords8, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID4, entityCoords9, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID4, entityCoords10, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID4, entityCoords11, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID4, entityCoords12, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID4, entityCoords13, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID4, entityCoords14, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID4, entityCoords15, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID4, entityCoords16, type);
                Thread.Sleep(350);
            }

            if (list == 5)
            {
                int type = 5;
                int num1 = list = 1;
                int num2 = list = 2;
                int num3 = list = 3;
                int num4 = list = 4;
                int num5 = list = 5;
                int num6 = list = 6;
                int num7 = list = 7;
                int num8 = list = 8;
                int num9 = list = 9;
                int num10 = list = 10;
                int num11 = list = 11;
                int num12 = list = 12;
                int num13 = list = 13;
                int num14 = list = 14;
                int num15 = list = 15;
                int num16 = list = 16;

                int PED_ID5 = GET_PLAYER_PED(num5);

                float[] entityCoords1 = GET_ENTITY_COORDS(GET_PLAYER_PED(num1));
                float[] entityCoords2 = GET_ENTITY_COORDS(GET_PLAYER_PED(num2));
                float[] entityCoords3 = GET_ENTITY_COORDS(GET_PLAYER_PED(num3));
                float[] entityCoords4 = GET_ENTITY_COORDS(GET_PLAYER_PED(num4));
                float[] entityCoords6 = GET_ENTITY_COORDS(GET_PLAYER_PED(num6));
                float[] entityCoords7 = GET_ENTITY_COORDS(GET_PLAYER_PED(num7));
                float[] entityCoords8 = GET_ENTITY_COORDS(GET_PLAYER_PED(num8));
                float[] entityCoords9 = GET_ENTITY_COORDS(GET_PLAYER_PED(num9));
                float[] entityCoords10 = GET_ENTITY_COORDS(GET_PLAYER_PED(num10));
                float[] entityCoords11 = GET_ENTITY_COORDS(GET_PLAYER_PED(num11));
                float[] entityCoords12 = GET_ENTITY_COORDS(GET_PLAYER_PED(num12));
                float[] entityCoords13 = GET_ENTITY_COORDS(GET_PLAYER_PED(num13));
                float[] entityCoords14 = GET_ENTITY_COORDS(GET_PLAYER_PED(num14));
                float[] entityCoords15 = GET_ENTITY_COORDS(GET_PLAYER_PED(num15));
                float[] entityCoords16 = GET_ENTITY_COORDS(GET_PLAYER_PED(num16));

                Owned_Explosion(PED_ID5, entityCoords1, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID5, entityCoords2, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID5, entityCoords4, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID5, entityCoords3, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID5, entityCoords6, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID5, entityCoords7, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID5, entityCoords8, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID5, entityCoords9, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID5, entityCoords10, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID5, entityCoords11, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID5, entityCoords12, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID5, entityCoords13, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID5, entityCoords14, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID5, entityCoords15, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID5, entityCoords16, type);
                Thread.Sleep(350);
            }

            if (list == 6)
            {
                int type = 5;
                int num1 = list = 1;
                int num2 = list = 2;
                int num3 = list = 3;
                int num4 = list = 4;
                int num5 = list = 5;
                int num6 = list = 6;
                int num7 = list = 7;
                int num8 = list = 8;
                int num9 = list = 9;
                int num10 = list = 10;
                int num11 = list = 11;
                int num12 = list = 12;
                int num13 = list = 13;
                int num14 = list = 14;
                int num15 = list = 15;
                int num16 = list = 16;

                int PED_ID6 = GET_PLAYER_PED(num6);

                float[] entityCoords1 = GET_ENTITY_COORDS(GET_PLAYER_PED(num1));
                float[] entityCoords2 = GET_ENTITY_COORDS(GET_PLAYER_PED(num2));
                float[] entityCoords3 = GET_ENTITY_COORDS(GET_PLAYER_PED(num3));
                float[] entityCoords4 = GET_ENTITY_COORDS(GET_PLAYER_PED(num4));
                float[] entityCoords5 = GET_ENTITY_COORDS(GET_PLAYER_PED(num5));
                float[] entityCoords7 = GET_ENTITY_COORDS(GET_PLAYER_PED(num7));
                float[] entityCoords8 = GET_ENTITY_COORDS(GET_PLAYER_PED(num8));
                float[] entityCoords9 = GET_ENTITY_COORDS(GET_PLAYER_PED(num9));
                float[] entityCoords10 = GET_ENTITY_COORDS(GET_PLAYER_PED(num10));
                float[] entityCoords11 = GET_ENTITY_COORDS(GET_PLAYER_PED(num11));
                float[] entityCoords12 = GET_ENTITY_COORDS(GET_PLAYER_PED(num12));
                float[] entityCoords13 = GET_ENTITY_COORDS(GET_PLAYER_PED(num13));
                float[] entityCoords14 = GET_ENTITY_COORDS(GET_PLAYER_PED(num14));
                float[] entityCoords15 = GET_ENTITY_COORDS(GET_PLAYER_PED(num15));
                float[] entityCoords16 = GET_ENTITY_COORDS(GET_PLAYER_PED(num16));

                Owned_Explosion(PED_ID6, entityCoords1, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID6, entityCoords2, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID6, entityCoords3, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID6, entityCoords5, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID6, entityCoords4, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID6, entityCoords7, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID6, entityCoords8, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID6, entityCoords9, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID6, entityCoords10, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID6, entityCoords11, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID6, entityCoords12, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID6, entityCoords13, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID6, entityCoords14, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID6, entityCoords15, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID6, entityCoords16, type);
                Thread.Sleep(350);
            }

            if (list == 7)
            {
                int type = 5;
                int num1 = list = 1;
                int num2 = list = 2;
                int num3 = list = 3;
                int num4 = list = 4;
                int num5 = list = 5;
                int num6 = list = 6;
                int num7 = list = 7;
                int num8 = list = 8;
                int num9 = list = 9;
                int num10 = list = 10;
                int num11 = list = 11;
                int num12 = list = 12;
                int num13 = list = 13;
                int num14 = list = 14;
                int num15 = list = 15;
                int num16 = list = 16;

                int PED_ID7 = GET_PLAYER_PED(num7);

                float[] entityCoords1 = GET_ENTITY_COORDS(GET_PLAYER_PED(num1));
                float[] entityCoords2 = GET_ENTITY_COORDS(GET_PLAYER_PED(num2));
                float[] entityCoords3 = GET_ENTITY_COORDS(GET_PLAYER_PED(num3));
                float[] entityCoords4 = GET_ENTITY_COORDS(GET_PLAYER_PED(num4));
                float[] entityCoords5 = GET_ENTITY_COORDS(GET_PLAYER_PED(num5));
                float[] entityCoords6 = GET_ENTITY_COORDS(GET_PLAYER_PED(num6));
                float[] entityCoords8 = GET_ENTITY_COORDS(GET_PLAYER_PED(num8));
                float[] entityCoords9 = GET_ENTITY_COORDS(GET_PLAYER_PED(num9));
                float[] entityCoords10 = GET_ENTITY_COORDS(GET_PLAYER_PED(num10));
                float[] entityCoords11 = GET_ENTITY_COORDS(GET_PLAYER_PED(num11));
                float[] entityCoords12 = GET_ENTITY_COORDS(GET_PLAYER_PED(num12));
                float[] entityCoords13 = GET_ENTITY_COORDS(GET_PLAYER_PED(num13));
                float[] entityCoords14 = GET_ENTITY_COORDS(GET_PLAYER_PED(num14));
                float[] entityCoords15 = GET_ENTITY_COORDS(GET_PLAYER_PED(num15));
                float[] entityCoords16 = GET_ENTITY_COORDS(GET_PLAYER_PED(num16));

                Owned_Explosion(PED_ID7, entityCoords1, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID7, entityCoords2, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID7, entityCoords4, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID7, entityCoords5, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID7, entityCoords6, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID7, entityCoords3, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID7, entityCoords8, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID7, entityCoords9, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID7, entityCoords10, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID7, entityCoords11, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID7, entityCoords12, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID7, entityCoords13, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID7, entityCoords14, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID7, entityCoords15, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID7, entityCoords16, type);
                Thread.Sleep(350);
            }

            if (list == 8)
            {
                int type = 5;
                int num1 = list = 1;
                int num2 = list = 2;
                int num3 = list = 3;
                int num4 = list = 4;
                int num5 = list = 5;
                int num6 = list = 6;
                int num7 = list = 7;
                int num8 = list = 8;
                int num9 = list = 9;
                int num10 = list = 10;
                int num11 = list = 11;
                int num12 = list = 12;
                int num13 = list = 13;
                int num14 = list = 14;
                int num15 = list = 15;
                int num16 = list = 16;

                int PED_ID8 = GET_PLAYER_PED(num8);

                float[] entityCoords1 = GET_ENTITY_COORDS(GET_PLAYER_PED(num1));
                float[] entityCoords2 = GET_ENTITY_COORDS(GET_PLAYER_PED(num2));
                float[] entityCoords3 = GET_ENTITY_COORDS(GET_PLAYER_PED(num3));
                float[] entityCoords4 = GET_ENTITY_COORDS(GET_PLAYER_PED(num4));
                float[] entityCoords5 = GET_ENTITY_COORDS(GET_PLAYER_PED(num5));
                float[] entityCoords6 = GET_ENTITY_COORDS(GET_PLAYER_PED(num6));
                float[] entityCoords7 = GET_ENTITY_COORDS(GET_PLAYER_PED(num7));
                float[] entityCoords9 = GET_ENTITY_COORDS(GET_PLAYER_PED(num9));
                float[] entityCoords10 = GET_ENTITY_COORDS(GET_PLAYER_PED(num10));
                float[] entityCoords11 = GET_ENTITY_COORDS(GET_PLAYER_PED(num11));
                float[] entityCoords12 = GET_ENTITY_COORDS(GET_PLAYER_PED(num12));
                float[] entityCoords13 = GET_ENTITY_COORDS(GET_PLAYER_PED(num13));
                float[] entityCoords14 = GET_ENTITY_COORDS(GET_PLAYER_PED(num14));
                float[] entityCoords15 = GET_ENTITY_COORDS(GET_PLAYER_PED(num15));
                float[] entityCoords16 = GET_ENTITY_COORDS(GET_PLAYER_PED(num16));

                Owned_Explosion(PED_ID8, entityCoords1, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID8, entityCoords2, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID8, entityCoords3, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID8, entityCoords5, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID8, entityCoords6, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID8, entityCoords7, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID8, entityCoords4, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID8, entityCoords9, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID8, entityCoords10, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID8, entityCoords11, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID8, entityCoords12, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID8, entityCoords13, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID8, entityCoords14, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID8, entityCoords15, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID8, entityCoords16, type);
                Thread.Sleep(350);
            }

            if (list == 9)
            {
                int type = 5;
                int num1 = list = 1;
                int num2 = list = 2;
                int num3 = list = 3;
                int num4 = list = 4;
                int num5 = list = 5;
                int num6 = list = 6;
                int num7 = list = 7;
                int num8 = list = 8;
                int num9 = list = 9;
                int num10 = list = 10;
                int num11 = list = 11;
                int num12 = list = 12;
                int num13 = list = 13;
                int num14 = list = 14;
                int num15 = list = 15;
                int num16 = list = 16;

                int PED_ID9 = GET_PLAYER_PED(num9);

                float[] entityCoords1 = GET_ENTITY_COORDS(GET_PLAYER_PED(num1));
                float[] entityCoords2 = GET_ENTITY_COORDS(GET_PLAYER_PED(num2));
                float[] entityCoords3 = GET_ENTITY_COORDS(GET_PLAYER_PED(num3));
                float[] entityCoords4 = GET_ENTITY_COORDS(GET_PLAYER_PED(num4));
                float[] entityCoords5 = GET_ENTITY_COORDS(GET_PLAYER_PED(num5));
                float[] entityCoords6 = GET_ENTITY_COORDS(GET_PLAYER_PED(num6));
                float[] entityCoords7 = GET_ENTITY_COORDS(GET_PLAYER_PED(num7));
                float[] entityCoords8 = GET_ENTITY_COORDS(GET_PLAYER_PED(num8));
                float[] entityCoords10 = GET_ENTITY_COORDS(GET_PLAYER_PED(num10));
                float[] entityCoords11 = GET_ENTITY_COORDS(GET_PLAYER_PED(num11));
                float[] entityCoords12 = GET_ENTITY_COORDS(GET_PLAYER_PED(num12));
                float[] entityCoords13 = GET_ENTITY_COORDS(GET_PLAYER_PED(num13));
                float[] entityCoords14 = GET_ENTITY_COORDS(GET_PLAYER_PED(num14));
                float[] entityCoords15 = GET_ENTITY_COORDS(GET_PLAYER_PED(num15));
                float[] entityCoords16 = GET_ENTITY_COORDS(GET_PLAYER_PED(num16));

                Owned_Explosion(PED_ID9, entityCoords1, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID9, entityCoords2, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID9, entityCoords4, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID9, entityCoords3, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID9, entityCoords6, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID9, entityCoords7, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID9, entityCoords8, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID9, entityCoords5, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID9, entityCoords10, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID9, entityCoords11, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID9, entityCoords12, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID9, entityCoords13, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID9, entityCoords14, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID9, entityCoords15, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID9, entityCoords16, type);
                Thread.Sleep(350);
            }

            if (list == 10)
            {
                int type = 5;
                int num1 = list = 1;
                int num2 = list = 2;
                int num3 = list = 3;
                int num4 = list = 4;
                int num5 = list = 5;
                int num6 = list = 6;
                int num7 = list = 7;
                int num8 = list = 8;
                int num9 = list = 9;
                int num10 = list = 10;
                int num11 = list = 11;
                int num12 = list = 12;
                int num13 = list = 13;
                int num14 = list = 14;
                int num15 = list = 15;
                int num16 = list = 16;

                int PED_ID10 = GET_PLAYER_PED(num10);

                float[] entityCoords1 = GET_ENTITY_COORDS(GET_PLAYER_PED(num1));
                float[] entityCoords2 = GET_ENTITY_COORDS(GET_PLAYER_PED(num2));
                float[] entityCoords3 = GET_ENTITY_COORDS(GET_PLAYER_PED(num3));
                float[] entityCoords4 = GET_ENTITY_COORDS(GET_PLAYER_PED(num4));
                float[] entityCoords5 = GET_ENTITY_COORDS(GET_PLAYER_PED(num5));
                float[] entityCoords6 = GET_ENTITY_COORDS(GET_PLAYER_PED(num6));
                float[] entityCoords7 = GET_ENTITY_COORDS(GET_PLAYER_PED(num7));
                float[] entityCoords8 = GET_ENTITY_COORDS(GET_PLAYER_PED(num8));
                float[] entityCoords9 = GET_ENTITY_COORDS(GET_PLAYER_PED(num9));
                float[] entityCoords11 = GET_ENTITY_COORDS(GET_PLAYER_PED(num11));
                float[] entityCoords12 = GET_ENTITY_COORDS(GET_PLAYER_PED(num12));
                float[] entityCoords13 = GET_ENTITY_COORDS(GET_PLAYER_PED(num13));
                float[] entityCoords14 = GET_ENTITY_COORDS(GET_PLAYER_PED(num14));
                float[] entityCoords15 = GET_ENTITY_COORDS(GET_PLAYER_PED(num15));
                float[] entityCoords16 = GET_ENTITY_COORDS(GET_PLAYER_PED(num16));

                Owned_Explosion(PED_ID10, entityCoords1, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID10, entityCoords2, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID10, entityCoords3, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID10, entityCoords5, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID10, entityCoords4, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID10, entityCoords7, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID10, entityCoords8, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID10, entityCoords9, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID10, entityCoords6, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID10, entityCoords11, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID10, entityCoords12, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID10, entityCoords13, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID10, entityCoords14, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID10, entityCoords15, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID10, entityCoords16, type);
                Thread.Sleep(350);
            }

            if (list == 11)
            {
                int type = 5;
                int num1 = list = 1;
                int num2 = list = 2;
                int num3 = list = 3;
                int num4 = list = 4;
                int num5 = list = 5;
                int num6 = list = 6;
                int num7 = list = 7;
                int num8 = list = 8;
                int num9 = list = 9;
                int num10 = list = 10;
                int num11 = list = 11;
                int num12 = list = 12;
                int num13 = list = 13;
                int num14 = list = 14;
                int num15 = list = 15;
                int num16 = list = 16;

                int PED_ID11 = GET_PLAYER_PED(num11);

                float[] entityCoords1 = GET_ENTITY_COORDS(GET_PLAYER_PED(num1));
                float[] entityCoords2 = GET_ENTITY_COORDS(GET_PLAYER_PED(num2));
                float[] entityCoords3 = GET_ENTITY_COORDS(GET_PLAYER_PED(num3));
                float[] entityCoords4 = GET_ENTITY_COORDS(GET_PLAYER_PED(num4));
                float[] entityCoords5 = GET_ENTITY_COORDS(GET_PLAYER_PED(num5));
                float[] entityCoords6 = GET_ENTITY_COORDS(GET_PLAYER_PED(num6));
                float[] entityCoords7 = GET_ENTITY_COORDS(GET_PLAYER_PED(num7));
                float[] entityCoords8 = GET_ENTITY_COORDS(GET_PLAYER_PED(num8));
                float[] entityCoords9 = GET_ENTITY_COORDS(GET_PLAYER_PED(num9));
                float[] entityCoords10 = GET_ENTITY_COORDS(GET_PLAYER_PED(num10));
                float[] entityCoords12 = GET_ENTITY_COORDS(GET_PLAYER_PED(num12));
                float[] entityCoords13 = GET_ENTITY_COORDS(GET_PLAYER_PED(num13));
                float[] entityCoords14 = GET_ENTITY_COORDS(GET_PLAYER_PED(num14));
                float[] entityCoords15 = GET_ENTITY_COORDS(GET_PLAYER_PED(num15));
                float[] entityCoords16 = GET_ENTITY_COORDS(GET_PLAYER_PED(num16));

                Owned_Explosion(PED_ID11, entityCoords1, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID11, entityCoords2, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID11, entityCoords3, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID11, entityCoords5, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID11, entityCoords6, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID11, entityCoords7, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID11, entityCoords4, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID11, entityCoords9, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID11, entityCoords10, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID11, entityCoords8, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID11, entityCoords12, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID11, entityCoords13, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID11, entityCoords14, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID11, entityCoords15, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID11, entityCoords16, type);
                Thread.Sleep(350);
            }

            if (list == 12)
            {
                int type = 5;
                int num1 = list = 1;
                int num2 = list = 2;
                int num3 = list = 3;
                int num4 = list = 4;
                int num5 = list = 5;
                int num6 = list = 6;
                int num7 = list = 7;
                int num8 = list = 8;
                int num9 = list = 9;
                int num10 = list = 10;
                int num11 = list = 11;
                int num12 = list = 12;
                int num13 = list = 13;
                int num14 = list = 14;
                int num15 = list = 15;
                int num16 = list = 16;

                int PED_ID12 = GET_PLAYER_PED(num12);

                float[] entityCoords1 = GET_ENTITY_COORDS(GET_PLAYER_PED(num1));
                float[] entityCoords2 = GET_ENTITY_COORDS(GET_PLAYER_PED(num2));
                float[] entityCoords3 = GET_ENTITY_COORDS(GET_PLAYER_PED(num3));
                float[] entityCoords4 = GET_ENTITY_COORDS(GET_PLAYER_PED(num4));
                float[] entityCoords5 = GET_ENTITY_COORDS(GET_PLAYER_PED(num5));
                float[] entityCoords6 = GET_ENTITY_COORDS(GET_PLAYER_PED(num6));
                float[] entityCoords7 = GET_ENTITY_COORDS(GET_PLAYER_PED(num7));
                float[] entityCoords8 = GET_ENTITY_COORDS(GET_PLAYER_PED(num8));
                float[] entityCoords9 = GET_ENTITY_COORDS(GET_PLAYER_PED(num9));
                float[] entityCoords10 = GET_ENTITY_COORDS(GET_PLAYER_PED(num10));
                float[] entityCoords11 = GET_ENTITY_COORDS(GET_PLAYER_PED(num11));
                float[] entityCoords13 = GET_ENTITY_COORDS(GET_PLAYER_PED(num13));
                float[] entityCoords14 = GET_ENTITY_COORDS(GET_PLAYER_PED(num14));
                float[] entityCoords15 = GET_ENTITY_COORDS(GET_PLAYER_PED(num15));
                float[] entityCoords16 = GET_ENTITY_COORDS(GET_PLAYER_PED(num16));

                Owned_Explosion(PED_ID12, entityCoords1, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID12, entityCoords2, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID12, entityCoords4, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID12, entityCoords3, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID12, entityCoords6, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID12, entityCoords7, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID12, entityCoords8, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID12, entityCoords5, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID12, entityCoords10, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID12, entityCoords11, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID12, entityCoords9, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID12, entityCoords13, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID12, entityCoords14, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID12, entityCoords15, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID12, entityCoords16, type);
                Thread.Sleep(350);
            }

            if (list == 13)
            {
                int type = 5;
                int num1 = list = 1;
                int num2 = list = 2;
                int num3 = list = 3;
                int num4 = list = 4;
                int num5 = list = 5;
                int num6 = list = 6;
                int num7 = list = 7;
                int num8 = list = 8;
                int num9 = list = 9;
                int num10 = list = 10;
                int num11 = list = 11;
                int num12 = list = 12;
                int num13 = list = 13;
                int num14 = list = 14;
                int num15 = list = 15;
                int num16 = list = 16;

                int PED_ID13 = GET_PLAYER_PED(num13);

                float[] entityCoords1 = GET_ENTITY_COORDS(GET_PLAYER_PED(num1));
                float[] entityCoords2 = GET_ENTITY_COORDS(GET_PLAYER_PED(num2));
                float[] entityCoords3 = GET_ENTITY_COORDS(GET_PLAYER_PED(num3));
                float[] entityCoords4 = GET_ENTITY_COORDS(GET_PLAYER_PED(num4));
                float[] entityCoords5 = GET_ENTITY_COORDS(GET_PLAYER_PED(num5));
                float[] entityCoords6 = GET_ENTITY_COORDS(GET_PLAYER_PED(num6));
                float[] entityCoords7 = GET_ENTITY_COORDS(GET_PLAYER_PED(num7));
                float[] entityCoords8 = GET_ENTITY_COORDS(GET_PLAYER_PED(num8));
                float[] entityCoords9 = GET_ENTITY_COORDS(GET_PLAYER_PED(num9));
                float[] entityCoords10 = GET_ENTITY_COORDS(GET_PLAYER_PED(num10));
                float[] entityCoords11 = GET_ENTITY_COORDS(GET_PLAYER_PED(num11));
                float[] entityCoords12 = GET_ENTITY_COORDS(GET_PLAYER_PED(num12));
                float[] entityCoords14 = GET_ENTITY_COORDS(GET_PLAYER_PED(num14));
                float[] entityCoords15 = GET_ENTITY_COORDS(GET_PLAYER_PED(num15));
                float[] entityCoords16 = GET_ENTITY_COORDS(GET_PLAYER_PED(num16));

                Owned_Explosion(PED_ID13, entityCoords1, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID13, entityCoords2, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID13, entityCoords3, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID13, entityCoords5, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID13, entityCoords4, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID13, entityCoords7, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID13, entityCoords8, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID13, entityCoords9, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID13, entityCoords6, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID13, entityCoords11, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID13, entityCoords12, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID13, entityCoords10, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID13, entityCoords14, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID13, entityCoords15, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID13, entityCoords16, type);
                Thread.Sleep(350);
            }

            if (list == 14)
            {
                int type = 5;
                int num1 = list = 1;
                int num2 = list = 2;
                int num3 = list = 3;
                int num4 = list = 4;
                int num5 = list = 5;
                int num6 = list = 6;
                int num7 = list = 7;
                int num8 = list = 8;
                int num9 = list = 9;
                int num10 = list = 10;
                int num11 = list = 11;
                int num12 = list = 12;
                int num13 = list = 13;
                int num14 = list = 14;
                int num15 = list = 15;
                int num16 = list = 16;

                int PED_ID14 = GET_PLAYER_PED(num14);

                float[] entityCoords1 = GET_ENTITY_COORDS(GET_PLAYER_PED(num1));
                float[] entityCoords2 = GET_ENTITY_COORDS(GET_PLAYER_PED(num2));
                float[] entityCoords3 = GET_ENTITY_COORDS(GET_PLAYER_PED(num3));
                float[] entityCoords4 = GET_ENTITY_COORDS(GET_PLAYER_PED(num4));
                float[] entityCoords5 = GET_ENTITY_COORDS(GET_PLAYER_PED(num5));
                float[] entityCoords6 = GET_ENTITY_COORDS(GET_PLAYER_PED(num6));
                float[] entityCoords7 = GET_ENTITY_COORDS(GET_PLAYER_PED(num7));
                float[] entityCoords8 = GET_ENTITY_COORDS(GET_PLAYER_PED(num8));
                float[] entityCoords9 = GET_ENTITY_COORDS(GET_PLAYER_PED(num9));
                float[] entityCoords10 = GET_ENTITY_COORDS(GET_PLAYER_PED(num10));
                float[] entityCoords11 = GET_ENTITY_COORDS(GET_PLAYER_PED(num11));
                float[] entityCoords12 = GET_ENTITY_COORDS(GET_PLAYER_PED(num12));
                float[] entityCoords13 = GET_ENTITY_COORDS(GET_PLAYER_PED(num13));
                float[] entityCoords15 = GET_ENTITY_COORDS(GET_PLAYER_PED(num15));
                float[] entityCoords16 = GET_ENTITY_COORDS(GET_PLAYER_PED(num16));

                Owned_Explosion(PED_ID14, entityCoords1, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID14, entityCoords2, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID14, entityCoords3, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID14, entityCoords5, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID14, entityCoords6, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID14, entityCoords7, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID14, entityCoords4, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID14, entityCoords9, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID14, entityCoords10, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID14, entityCoords8, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID14, entityCoords12, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID14, entityCoords13, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID14, entityCoords11, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID14, entityCoords15, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID14, entityCoords16, type);
                Thread.Sleep(350);
            }

            if (list == 15)
            {
                int type = 5;
                int num1 = list = 1;
                int num2 = list = 2;
                int num3 = list = 3;
                int num4 = list = 4;
                int num5 = list = 5;
                int num6 = list = 6;
                int num7 = list = 7;
                int num8 = list = 8;
                int num9 = list = 9;
                int num10 = list = 10;
                int num11 = list = 11;
                int num12 = list = 12;
                int num13 = list = 13;
                int num14 = list = 14;
                int num15 = list = 15;
                int num16 = list = 16;

                int PED_ID15 = GET_PLAYER_PED(num15);

                float[] entityCoords1 = GET_ENTITY_COORDS(GET_PLAYER_PED(num1));
                float[] entityCoords2 = GET_ENTITY_COORDS(GET_PLAYER_PED(num2));
                float[] entityCoords3 = GET_ENTITY_COORDS(GET_PLAYER_PED(num3));
                float[] entityCoords4 = GET_ENTITY_COORDS(GET_PLAYER_PED(num4));
                float[] entityCoords5 = GET_ENTITY_COORDS(GET_PLAYER_PED(num5));
                float[] entityCoords6 = GET_ENTITY_COORDS(GET_PLAYER_PED(num6));
                float[] entityCoords7 = GET_ENTITY_COORDS(GET_PLAYER_PED(num7));
                float[] entityCoords8 = GET_ENTITY_COORDS(GET_PLAYER_PED(num8));
                float[] entityCoords9 = GET_ENTITY_COORDS(GET_PLAYER_PED(num9));
                float[] entityCoords10 = GET_ENTITY_COORDS(GET_PLAYER_PED(num10));
                float[] entityCoords11 = GET_ENTITY_COORDS(GET_PLAYER_PED(num11));
                float[] entityCoords12 = GET_ENTITY_COORDS(GET_PLAYER_PED(num12));
                float[] entityCoords13 = GET_ENTITY_COORDS(GET_PLAYER_PED(num13));
                float[] entityCoords14 = GET_ENTITY_COORDS(GET_PLAYER_PED(num14));
                float[] entityCoords16 = GET_ENTITY_COORDS(GET_PLAYER_PED(num16));

                Owned_Explosion(PED_ID15, entityCoords1, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID15, entityCoords2, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID15, entityCoords4, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID15, entityCoords3, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID15, entityCoords6, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID15, entityCoords7, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID15, entityCoords8, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID15, entityCoords5, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID15, entityCoords10, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID15, entityCoords11, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID15, entityCoords9, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID15, entityCoords13, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID15, entityCoords14, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID15, entityCoords12, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID15, entityCoords16, type);
                Thread.Sleep(350);
            }

            if (list == 16)
            {
                int type = 5;
                int num1 = list = 1;
                int num2 = list = 2;
                int num3 = list = 3;
                int num4 = list = 4;
                int num5 = list = 5;
                int num6 = list = 6;
                int num7 = list = 7;
                int num8 = list = 8;
                int num9 = list = 9;
                int num10 = list = 10;
                int num11 = list = 11;
                int num12 = list = 12;
                int num13 = list = 13;
                int num14 = list = 14;
                int num15 = list = 15;
                int num16 = list = 16;

                int PED_ID16 = GET_PLAYER_PED(num16);

                float[] entityCoords1 = GET_ENTITY_COORDS(GET_PLAYER_PED(num1));
                float[] entityCoords2 = GET_ENTITY_COORDS(GET_PLAYER_PED(num2));
                float[] entityCoords3 = GET_ENTITY_COORDS(GET_PLAYER_PED(num3));
                float[] entityCoords4 = GET_ENTITY_COORDS(GET_PLAYER_PED(num4));
                float[] entityCoords5 = GET_ENTITY_COORDS(GET_PLAYER_PED(num5));
                float[] entityCoords6 = GET_ENTITY_COORDS(GET_PLAYER_PED(num6));
                float[] entityCoords7 = GET_ENTITY_COORDS(GET_PLAYER_PED(num7));
                float[] entityCoords8 = GET_ENTITY_COORDS(GET_PLAYER_PED(num8));
                float[] entityCoords9 = GET_ENTITY_COORDS(GET_PLAYER_PED(num9));
                float[] entityCoords10 = GET_ENTITY_COORDS(GET_PLAYER_PED(num10));
                float[] entityCoords11 = GET_ENTITY_COORDS(GET_PLAYER_PED(num11));
                float[] entityCoords12 = GET_ENTITY_COORDS(GET_PLAYER_PED(num12));
                float[] entityCoords13 = GET_ENTITY_COORDS(GET_PLAYER_PED(num13));
                float[] entityCoords14 = GET_ENTITY_COORDS(GET_PLAYER_PED(num14));
                float[] entityCoords15 = GET_ENTITY_COORDS(GET_PLAYER_PED(num15));

                Owned_Explosion(PED_ID16, entityCoords1, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID16, entityCoords2, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID16, entityCoords3, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID16, entityCoords5, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID16, entityCoords4, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID16, entityCoords7, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID16, entityCoords8, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID16, entityCoords9, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID16, entityCoords6, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID16, entityCoords11, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID16, entityCoords12, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID16, entityCoords10, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID16, entityCoords14, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID16, entityCoords15, type);
                Thread.Sleep(350);
                Owned_Explosion(PED_ID16, entityCoords13, type);
                Thread.Sleep(350);
            }
        }
        #endregion

        #region Spawn Vehicle
        private void VehSpawn(string veh, bool state1, bool state2)
        {
            int Me = PLAYER_PED_ID();
            float[] fl = new float[3];
            fl[1] = 5f;
            float[] fl2 = fl;
            float[] coords = RPCHook.Call2<float[]>(OLDNatives.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, (object)Me, (object)fl2);
            int hashKey = GET_HASH_KEY(veh);
            do
            {
                REQUEST_MODEL(hashKey);
                Application.DoEvents();
                RPCHook.CompleteReq();
            }
            while (HAS_MODEL_LOADED(hashKey) != 1);
            int num1;
            object[] ob;
            do
            {
                zzz[sss] = CREATE_VEHICLE(hashKey, coords);
                Application.DoEvents();
                num1 = (int)OLDNatives.DOES_ENTITY_EXIST;
                ob = new object[1]
                {
          (object) zzz[sss]
                };
            }
            while (RPCHook.Call((uint)num1, ob) != 1);
            RPCHook.Call2<int>(OLDNatives.SET_VEHICLE_ENGINE_ON, (object)zzz[sss], (object)1, (object)1);
            int num2;
            if (!RPCHook.Call2<bool>(OLDNatives.IS_THIS_MODEL_A_HELI, (object)RPCHook.Call2<int>(OLDNatives.GET_ENTITY_MODEL, (object)zzz[sss])))
                num2 = !RPCHook.Call2<bool>(OLDNatives.IS_THIS_MODEL_A_PLANE, (object)RPCHook.Call2<int>(OLDNatives.GET_ENTITY_MODEL, (object)zzz[sss])) ? 1 : 0;
            else
                num2 = 0;
            if (num2 == 0)
                RPCHook.Call2<int>(OLDNatives.SET_HELI_BLADES_FULL_SPEED, (object)zzz[sss]);
            SET_PED_INTO_VEHICLE(Me, zzz[sss], -1);
            if (RPCHook.Call2<bool>(OLDNatives.IS_THIS_MODEL_A_HELI, (object)RPCHook.Call2<int>(OLDNatives.GET_ENTITY_MODEL, (object)zzz[sss])))
                state2 = false;
            if (veh == "RHINO")
                state2 = false;
            if (state1)
            {
                uint damag = OLDNatives.SET_ENTITY_CAN_BE_DAMAGED;
                uint damvis = OLDNatives.SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED;
                if (IS_PED_IN_ANY_VEHICLE(Me) != 0)
                    return;
                int vehin = GET_VEHICLE_PED_IS_IN(Me);
                if (vehin > 0 && requestcontrol())
                    RPCHook.Call(damag, (object)vehin, (object)0);
                RPCHook.Call(damvis, (object)vehin, (object)0);
                Functions.RPCFunc.SET_ENTITY_PROOFS(zzz[sss], true, true, true, true, true, true, true, true);
                SET_ENTITY_INVINCIBLE(zzz[sss], 1);
                ADD_BLIP_VEHICLE(zzz[sss], 1);
            }
            else if (!state1)
            {
                uint func_address1 = OLDNatives.SET_ENTITY_CAN_BE_DAMAGED;
                uint func_address2 = OLDNatives.SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED;
                int playerPed = GET_PLAYER_PED(Me);
                if (IS_PED_IN_ANY_VEHICLE(playerPed) <= 0)
                    return;
                int vehiclePedIsIn = GET_VEHICLE_PED_IS_IN(playerPed);
                if (vehiclePedIsIn > 0 && requestcontrol())
                    RPCHook.Call(func_address1, (object)vehiclePedIsIn, (object)1);
                RPCHook.Call(func_address2, (object)vehiclePedIsIn, (object)1);
            }
            if (state2)
            {
                int num11 = Functions.RPCFunc.GET_PLAYER_PED(Me);
                int num22 = Functions.RPCFunc.GET_PED_VEHICLE_IS_IN(num11);
                if (Functions.RPCFunc.IS_PED_IN_VEHICLE(num11) == 1)
                {
                    SET_VEHICLE_ENGINE_POWER_MULTIPLIER(num22, 50f);
                }
            }
            ++sss;
            SET_MODEL_AS_NO_LONGER_NEEDED(hashKey);
        }

        private void SPAWN_VEHICLE(string VehicleModel, bool gm, bool nfs)
        {
            int Me = PLAYER_PED_ID();
            float[] fl = new float[3];
            fl[1] = 5f;
            float[] fl2 = fl;
            float[] MyCoords = RPCHook.Call2<float[]>(OLDNatives.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, (object)Me, (object)fl2);
            int VehicleHash = GET_HASH_KEY(VehicleModel);

            REQUEST_MODEL(VehicleHash);
            Application.DoEvents();
            RPCHook.CompleteReq();
            if (HAS_MODEL_LOADED(VehicleHash) != 1)
            {
                VehSpawned2 = CREATE_VEHICLE(VehicleHash, MyCoords);
                RPCHook.CompleteReq();
                if (Functions.RPCFunc.DOES_ENTITY_EXIST(VehSpawned2))
                {
                    SET_PED_INTO_VEHICLE(Me, VehSpawned2, -1);
                    Functions.RPCFunc.SET_VEHICLE_ENGINE_ON(VehSpawned2, 1, 1);
                }
            }

            if (gm == true)
            {
                if (Functions.RPCFunc.IS_PED_IN_ANY_VEHICLE(Me) == 1)
                {
                    int VehIsIn = Functions.RPCFunc.GET_PED_VEHICLE_IS_IN(Me);
                    SET_ENTITY_CAN_BE_DAMAGED(VehIsIn, 0);
                    RPCHook.Call(OLDNatives.SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED, 0);
                    SET_ENTITY_INVINCIBLE(VehIsIn, 1);
                    ADD_BLIP_VEHICLE(VehIsIn, 1);
                }
            }

            if (nfs == true)
            {
                if (Functions.RPCFunc.IS_PED_IN_ANY_VEHICLE(Me) == 1)
                {
                    int VehIsIn = Functions.RPCFunc.GET_PED_VEHICLE_IS_IN(Me);
                    SET_VEHICLE_ENGINE_POWER_MULTIPLIER(VehIsIn, 50f);
                }
            }
            SET_MODEL_AS_NO_LONGER_NEEDED(VehicleHash);
        }

        private void SPAWN_VEHICLE_LOBBY(int list, string VehicleModel, bool gm, bool nfs, bool maxup)
        {
            int PED = GET_PLAYER_PED(list);
            float[] fl = new float[3];
            fl[1] = 5f;
            float[] fl2 = fl;
            float[] MyCoords = RPCHook.Call2<float[]>(OLDNatives.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, (object)PED, (object)fl2);
            int VehicleHash = GET_HASH_KEY(VehicleModel);

            REQUEST_MODEL(VehicleHash);
            Application.DoEvents();
            RPCHook.CompleteReq();
            if (HAS_MODEL_LOADED(VehicleHash) != 1)
            {
                VehSpawned2 = CREATE_VEHICLE(VehicleHash, MyCoords);
                RPCHook.CompleteReq();
                while (RPCHook.Call(Natives.DOES_ENTITY_EXIST, VehSpawned2) != 1);

                RPCHook.Call2<int>(OLDNatives.SET_VEHICLE_ENGINE_ON, (object)VehSpawned2, (object)1, (object)1);
                if (gm == true)
                {
                    SET_ENTITY_CAN_BE_DAMAGED(VehSpawned2, 0);
                    RPCHook.Call(OLDNatives.SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED, 0);
                    SET_ENTITY_INVINCIBLE(VehSpawned2, 1);
                    ADD_BLIP_VEHICLE(VehSpawned2, 1);
                }

                if (nfs == true)
                {
                    SET_VEHICLE_ENGINE_POWER_MULTIPLIER(VehSpawned2, 50f);
                }

                if (maxup == true)
                {
                    MaxUpgradesVehicleLobby(VehSpawned2);
                }
            }

            SET_MODEL_AS_NO_LONGER_NEEDED(VehicleHash);
        }

        public bool requestcontrol()
        {
            int Me = PLAYER_PED_ID();

            if (IS_PED_IN_ANY_VEHICLE(Me) > 0)
            {
                int num = 0;
                while (num <= 0)
                {
                    if (method_3() > 0)
                        return true;
                }
            }
            return false;
        }

        private int method_3()
        {
            int Me = PLAYER_PED_ID();

            if (stopcalling)
                return 0;
            if (IS_PED_IN_ANY_VEHICLE(Me) <= 0)
                return 0;
            return RPCHook.Call(OLDNatives.NETWORK_REQUEST_CONTROL_OF_ENTITY, (object)GET_VEHICLE_PED_IS_IN(Me));
        }
        #endregion

        private void barButtonItem1_ItemClick(object sender, ItemClickEventArgs e)
        {
            PS3.ChangeAPI(PS3Lib.SelectAPI.ControlConsole);
            ClassicRPC.PS3.ChangeAPI(PS3Lib.SelectAPI.ControlConsole);
            RPCHook.PS3.ChangeAPI(PS3Lib.SelectAPI.ControlConsole);
            RPCHook.IS_PLAYER_ONLINE.PS3.ChangeAPI(SelectAPI.ControlConsole);
            RPC3.PS3.ChangeAPI(PS3Lib.SelectAPI.ControlConsole);
            Functions.PS3.ChangeAPI(PS3Lib.SelectAPI.ControlConsole);
            PlayersInform.PS3.ChangeAPI(PS3Lib.SelectAPI.ControlConsole);
            ConnectionMethod = "CCAPI";

            try
            {
                if (PS3.ConnectTarget() && PS3.AttachProcess())
                {
                    ClassicRPC.Enable();
                    try
                    {
                        RPCHook._GET_ACTIVE_NOTIFICATION_HANDLE.Enable(OLDNatives._GET_ACTIVE_NOTIFICATION_HANDLE);
                    }
                    catch
                    {

                    }
                    labelControl12.Text = returnName();
                    XtraMessageBox.Show("Succesfully Connected to your PS3 ;)", "Success", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                    timer1.Start();
                    Attached = true;
                    labelControl10.Text = "Connected - Attached";
                    PS3.CCAPI.RingBuzzer(PS3Lib.CCAPI.BuzzerMode.Single);
                    PS3.CCAPI.Notify(PS3Lib.CCAPI.NotifyIcon.TROPHY4, "PylezZo Tool Connected ;)");
                    labelControl10.ForeColor = Color.MediumSpringGreen;
                    labelControl5.Text = PS3.CCAPI.GetFirmwareType();
                    labelControl6.Text = PS3.CCAPI.GetFirmwareVersion();
                    labelControl8.Text = PS3.CCAPI.GetTemperatureRSX();
                    labelControl7.Text = PS3.CCAPI.GetTemperatureCELL();
                }
                else
                {
                    Attached = false;
                    XtraMessageBox.Show("Something goes wrong.. Check your PS3-PC Connection and make sure CCAPI is installed correctly. \nAlso GTAV must be running to Connect and Attach the tool!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    labelControl10.Text = "Connection Failed";
                    labelControl10.ForeColor = Color.IndianRed;
                }
            }
            catch
            {
                Attached = false;
                XtraMessageBox.Show("Something goes wrong.. Check your PS3-PC Connection and make sure CCAPI is installed correctly.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                labelControl10.Text = "Connection Failed";
                labelControl10.ForeColor = Color.IndianRed;
            }
        }

        private void barButtonItem2_ItemClick(object sender, ItemClickEventArgs e)
        {
            PS3.ChangeAPI(PS3Lib.SelectAPI.TargetManager);
            ClassicRPC.PS3.ChangeAPI(PS3Lib.SelectAPI.TargetManager);
            RPCHook.PS3.ChangeAPI(PS3Lib.SelectAPI.TargetManager);
            RPCHook.IS_PLAYER_ONLINE.PS3.ChangeAPI(PS3Lib.SelectAPI.TargetManager);
            RPC3.PS3.ChangeAPI(PS3Lib.SelectAPI.TargetManager);
            Functions.PS3.ChangeAPI(PS3Lib.SelectAPI.TargetManager);
            PlayersInform.PS3.ChangeAPI(PS3Lib.SelectAPI.TargetManager);
            ConnectionMethod = "TMAPI";

            try
            {
                if (PS3.ConnectTarget() && PS3.AttachProcess())
                {
                    ClassicRPC.Enable();
                    try
                    {
                        RPCHook._GET_ACTIVE_NOTIFICATION_HANDLE.Enable(OLDNatives._GET_ACTIVE_NOTIFICATION_HANDLE);
                    }
                    catch
                    {

                    }
                    labelControl12.Text = returnName();
                    XtraMessageBox.Show("PylezZo Tool Succesfully Connected, enjoy! :D", "Success", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                    timer1.Start();
                    labelControl10.Text = "Connected - Attached";
                    labelControl10.ForeColor = Color.MediumSpringGreen;
                    labelControl5.Text = "N/A";
                    labelControl6.Text = "N/A";
                    labelControl8.Text = "N/A";
                    labelControl7.Text = "N/A";
                    Attached = true;
                }
                else
                {
                    Attached = false;
                    XtraMessageBox.Show("Something goes wrong.. Check your PS3-PC Connection and make sure CCAPI is installed correctly.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    labelControl10.Text = "Connection Failed";
                    labelControl10.ForeColor = Color.IndianRed;
                }
            }
            catch
            {
                Attached = false;
                XtraMessageBox.Show("Something goes wrong.. \nCheck your PS3 Connection and check if TMAPI works correctly.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                labelControl10.Text = "Connection Failed";
                labelControl10.ForeColor = Color.IndianRed;
            }
        }

        string returnName()
        {
            int name = ClassicRPC.Call((uint)Natives.GET_PLAYER_NAME, ClassicRPC.Call((uint)Natives.PLAYER_ID));
            return PS3.Extension.ReadString((uint)name);
        }

        private void barButtonItem3_ItemClick(object sender, ItemClickEventArgs e)
        {
            PS3.DisconnectTarget();
            labelControl10.Text = "Disconnected";
            timer1.Stop();
            labelControl10.ResetForeColor();
            labelControl12.ResetForeColor();
            labelControl12.Text = "...";
            labelControl5.Text = "...";
            labelControl6.Text = "4.xx";
            labelControl8.Text = "00 C";
            labelControl7.Text = "00 C";
            labelControl9.ResetForeColor();
            XtraMessageBox.Show("PS3 Disconnected, Bye Bye ;)", "Success", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }

        private void DisconnectCode()
        {
            PS3.DisconnectTarget();
            labelControl10.Text = "Disconnected";
            timer1.Stop();
            labelControl10.ResetForeColor();
            labelControl12.ResetForeColor();
            labelControl12.Text = "...";
            labelControl5.Text = "...";
            labelControl6.Text = "4.xx";
            labelControl8.Text = "00 C";
            labelControl7.Text = "00 C";
            labelControl9.ResetForeColor();
            XtraMessageBox.Show("PS3 Disconnected, Bye Bye ;)", "Success", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            Random rand = new Random();

            int A = rand.Next(0, 255);
            int R = rand.Next(0, 255);
            int G = rand.Next(0, 255);
            int B = rand.Next(0, 255);
            int J = rand.Next(0, 255);
            int F = rand.Next(0, 255);
            int D = rand.Next(0, 255);
            int N = rand.Next(0, 255);

            labelControl12.ForeColor = Color.FromArgb(A, R, G, B);
        }

        private void timer2_Tick(object sender, EventArgs e)
        {
            if (labelControl10.Text.Contains("Connected"))
            {
                PS3.CCAPI.ClearTargetInfo();
                labelControl5.Text = PS3.CCAPI.GetFirmwareType();
                labelControl6.Text = PS3.CCAPI.GetFirmwareVersion();
                labelControl8.Text = PS3.CCAPI.GetTemperatureRSX();
                labelControl7.Text = PS3.CCAPI.GetTemperatureCELL();
            }
        }

        private void checkButton1_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton1.Checked)
            {
                if (labelControl10.Text.Contains("Connected"))
                {
                    if (ConnectionMethod == "CCAPI")
                    {
                        timer2.Interval = 5000;
                        timer2.Start();
                        checkButton1.Text = "Auto-Refresh [ON]";
                        checkButton1.BackColor = Color.MediumSpringGreen;
                    }
                    else
                    {
                        XtraMessageBox.Show("This function is available for CCAPI only :(", "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                else
                {
                    XtraMessageBox.Show("You have to Connect first :)", "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            else
            {
                timer2.Stop();
                checkButton1.Text = "Auto-Refresh [OFF]";
                checkButton1.ResetBackColor();
            }
        }

        private void timer3_Tick(object sender, EventArgs e)
        {
            if (labelControl10.Text.Contains("Connected"))
            {
                PS3.CCAPI.ClearTargetInfo();
                barStaticItem1.Caption = "CPU Temp: " + PS3.CCAPI.GetTemperatureRSX() + "  -  CELL Temp: " + PS3.CCAPI.GetTemperatureCELL();
            }
        }

        private void checkButton3_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton3.Checked)
            {
                if (labelControl10.Text.Contains("Connected"))
                {
                    if (ConnectionMethod == "CCAPI")
                    {
                        timer3.Interval = 5000;
                        timer3.Start();
                        checkButton3.Text = "Auto-Refresh on Tool Footer [ON]";
                        checkButton3.BackColor = Color.MediumSpringGreen;
                    }
                    else
                    {
                        XtraMessageBox.Show("This function is available for CCAPI only :(", "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                else
                {
                    XtraMessageBox.Show("You have to Connect first :)", "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            else
            {
                timer3.Stop();
                checkButton3.Text = "Auto-Refresh on Tool Footer [OFF]";
                checkButton3.ResetBackColor();
            }
        }

        private void checkButton2_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton2.Checked)
            {
                if (labelControl10.Text.Contains("Connected"))
                {
                    if (ConnectionMethod == "CCAPI")
                    {
                        timer4.Interval = 8000;
                        timer4.Start();
                        checkButton2.Text = "Auto-Refresh on PS3 [ON]";
                        checkButton2.BackColor = Color.MediumSpringGreen;
                    }
                    else
                    {
                    XtraMessageBox.Show("This function is available for CCAPI only :(", "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                else
                {
                    XtraMessageBox.Show("You have to Connect first :)", "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            else
            {
                timer4.Stop();
                checkButton2.Text = "Auto-Refresh on PS3 [OFF]";
                checkButton2.ResetBackColor();
            }
        }

        private void timer4_Tick(object sender, EventArgs e)
        {
            if (labelControl10.Text.Contains("Connected"))
            {
                PS3.CCAPI.ClearTargetInfo();
                string rsx = PS3.CCAPI.GetTemperatureRSX();
                string cell = PS3.CCAPI.GetTemperatureCELL();
                PS3.CCAPI.Notify(PS3Lib.CCAPI.NotifyIcon.INFO, "CPU: " + rsx + "  -  CELL: " + cell);
            }
        }

        private void simpleButton3_Click(object sender, EventArgs e)
        {
            StringBuilder builder = new StringBuilder();
            builder.Append(Generator.Part1());
            builder.Append(Generator.Part2());
            builder.Append(Generator.Part3());
            builder.Append(Generator.Part3a());
            builder.Append(Generator.Part3b());
            builder.Append(Generator.Part3c());
            builder.Append(Generator.Part3d());
            builder.Append(Generator.Part4());
            builder.Append(Generator.Part5());
            builder.Append(Generator.Part6());
            builder.Append(Generator.Part7());
            builder.Append(Generator.Part8());
            builder.Append(Generator.Part9());
            builder.Append(Generator.Part10());
            builder.Append(Generator.Part11());
            builder.Append(Generator.Part12());
            builder.Append(Generator.Part13());
            builder.Append(Generator.Part14());
            builder.Append(Generator.Part15());
            builder.Append(Generator.Part16());
            textEdit1.Text = builder.ToString();
        }

        private void simpleButton6_Click(object sender, EventArgs e)
        {
            if (textEdit1.Text.Length == 32)
            {
                if (ConnectionMethod == "CCAPI")
                {
                    if (labelControl10.Text.Contains("Connected"))
                    {
                        PS3.CCAPI.SetConsoleID(textEdit1.Text);
                        PS3.CCAPI.Notify(PS3Lib.CCAPI.NotifyIcon.TROPHY4, "Console ID Spoofed to: " + textEdit1.Text);
                    }
                    else
                    {
                        XtraMessageBox.Show("You must be Connected to do this!", "Error :( ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                else
                {
                    XtraMessageBox.Show("This option is available for CCAPI Only.", "Error :( ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            else
            {
                XtraMessageBox.Show("The Console ID must be 32 characters!", "Error :( ", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void simpleButton4_Click(object sender, EventArgs e)
        {
            StringBuilder builder = new StringBuilder();
            builder.Append(GeneratorP.Part1());
            builder.Append(GeneratorP.Part2());
            builder.Append(GeneratorP.Part3());
            builder.Append(GeneratorP.Part3a());
            builder.Append(GeneratorP.Part3b());
            builder.Append(GeneratorP.Part3c());
            builder.Append(GeneratorP.Part3d());
            builder.Append(GeneratorP.Part3e());
            builder.Append(GeneratorP.Part3f());
            builder.Append(GeneratorP.Part3g());
            builder.Append(GeneratorP.Part4());
            builder.Append(GeneratorP.Part5());
            builder.Append(GeneratorP.Part6());
            builder.Append(GeneratorP.Part7());
            builder.Append(GeneratorP.Part8());
            builder.Append(GeneratorP.Part9());
            builder.Append(GeneratorP.Part10());
            builder.Append(GeneratorP.Part11());
            builder.Append(GeneratorP.Part12());
            builder.Append(GeneratorP.Part13());
            builder.Append(GeneratorP.Part14());
            builder.Append(GeneratorP.Part15());
            builder.Append(GeneratorP.Part16());
            builder.Append(GeneratorP.Part17());
            builder.Append(GeneratorP.Part18());
            builder.Append(GeneratorP.Part19());
            builder.Append(GeneratorP.Part20());
            builder.Append(GeneratorP.Part21());
            textEdit2.Text = builder.ToString();
        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            if (textEdit2.Text.Length == 32)
            {
                if (ConnectionMethod == "CCAPI")
                {
                    if (labelControl10.Text.Contains("Connected"))
                    {
                        PS3.CCAPI.SetPSID(textEdit2.Text);
                        PS3.CCAPI.Notify(PS3Lib.CCAPI.NotifyIcon.TROPHY4, "PSID Spoofed to: " + textEdit2.Text);
                    }
                    else
                    {
                        XtraMessageBox.Show("You must be Connected to do this!", "Error :( ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                else
                {
                    XtraMessageBox.Show("This option is available for CCAPI Only.", "Error :( ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            else
            {
                XtraMessageBox.Show("The Console ID must be 32 characters!", "Error :( ", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void simpleButton2_Click(object sender, EventArgs e)
        {
            if (labelControl10.Text.Contains("Connected"))
            {
                if (comboBoxEdit1.SelectedIndex == 0)
                {
                    if (ConnectionMethod == "CCAPI")
                    {
                        PS3.CCAPI.ShutDown(PS3Lib.CCAPI.RebootFlags.SoftReboot);
                        DisconnectCode();
                    }
                    else if (ConnectionMethod == "TMAPI")
                    {
                        PS3.TMAPI.PowerOff(false);
                        PS3.TMAPI.PowerOn(0);
                        DisconnectCode();
                    }
                }
                else if (comboBoxEdit1.SelectedIndex == 1)
                {
                    if (ConnectionMethod == "CCAPI")
                    {
                        PS3.CCAPI.ShutDown(PS3Lib.CCAPI.RebootFlags.HardReboot);
                        DisconnectCode();
                    }
                    else if (ConnectionMethod == "TMAPI")
                    {
                        PS3.TMAPI.PowerOff(false);
                        PS3.TMAPI.PowerOn(0);
                        DisconnectCode();
                    }
                }
                else if (comboBoxEdit1.SelectedIndex == 2)
                {
                    if (ConnectionMethod == "CCAPI")
                    {
                        PS3.CCAPI.ShutDown(PS3Lib.CCAPI.RebootFlags.ShutDown);
                        DisconnectCode();
                    }
                    else if (ConnectionMethod == "TMAPI")
                    {
                        PS3.TMAPI.PowerOff(false);
                        DisconnectCode();
                    }
                }
            }
            else
            {
                XtraMessageBox.Show("You must be Connected to do this!", "Error :( ", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void checkButton4_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton4.Checked)
            {
                if (ConnectionMethod == "CCAPI")
                {
                    if (labelControl10.Text.Contains("Connected"))
                    {
                        trackBarControl1.Enabled = true;
                        checkButton4.Text = "Auto-Spoof Console ID [ ON ]";

                        try
                        {
                            if (trackBarControl1.Value == 1)
                            {
                                timer5.Interval = 30000;
                                timer5.Start();
                                checkButton4.BackColor = Color.MediumSpringGreen;
                                XtraMessageBox.Show("Auto-Spoofer Enabled! \nA ConsoleID will be Generated and Spoofed every 30 seconds :)", "Enabled", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                            }
                            if (trackBarControl1.Value == 2)
                            {
                                timer5.Interval = 60000;
                                timer5.Start();
                                checkButton4.BackColor = Color.MediumSpringGreen;
                                XtraMessageBox.Show("Auto-Spoofer Enabled! \nA ConsoleID will be Generated and Spoofed every 1 minutes :)", "Enabled", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                            }
                            if (trackBarControl1.Value == 3)
                            {
                                timer5.Interval = 120000;
                                timer5.Start();
                                checkButton4.BackColor = Color.MediumSpringGreen;
                                XtraMessageBox.Show("Auto-Spoofer Enabled! \nA ConsoleID will be Generated and Spoofed every 2 minutes :)", "Enabled", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                            }
                        }
                        catch (Exception ex)
                        {
                            XtraMessageBox.Show(ex.Message, "Error :(", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                    else
                    {
                        XtraMessageBox.Show("You must be Connected to do this!", "Error :( ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                else
                {
                    XtraMessageBox.Show("This function is available for CCAPI Only :(", "Error :( ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            else
            {
                checkButton4.Text = "Auto-Spoof Console ID [ OFF ]";
                timer5.Stop();
                XtraMessageBox.Show("Auto-Spoofer Disabled", "Disabled", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
        }

        private void timer5_Tick(object sender, EventArgs e)
        {
            StringBuilder StringBuilder = new StringBuilder();
            StringBuilder.Append(GeneratorS.Part1());
            StringBuilder.Append(GeneratorS.Part2());
            StringBuilder.Append(GeneratorS.Part3());
            StringBuilder.Append(GeneratorS.Part4());
            StringBuilder.Append(GeneratorS.Part5());
            StringBuilder.Append(GeneratorS.Part6());
            StringBuilder.Append(GeneratorS.Part7());
            StringBuilder.Append(GeneratorS.Part8());
            StringBuilder.Append(GeneratorS.Part9());
            StringBuilder.Append(GeneratorS.Par1());
            StringBuilder.Append(GeneratorS.Par2());
            StringBuilder.Append(GeneratorS.Par3());
            StringBuilder.Append(GeneratorS.Par4());
            StringBuilder.Append(GeneratorS.Par5());
            StringBuilder.Append(GeneratorS.Par6());
            StringBuilder.Append(GeneratorS.Par7());
            StringBuilder.Append(GeneratorS.Par8());
            StringBuilder.Append(GeneratorS.Par9());
            textEdit1.Text = StringBuilder.ToString();

            if (textEdit1.Text.Length == 32)
            {
                try
                {
                    PS3.CCAPI.SetConsoleID(textEdit1.Text);
                    PS3.CCAPI.Notify(PS3Lib.CCAPI.NotifyIcon.TROPHY4, "Console ID Changed to: " + textEdit1.Text);
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show(ex.Message, "Error :(", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            else
            {
                XtraMessageBox.Show("Invalid ConsoleID!", "Error :(", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void hyperlinkLabelControl1_Click(object sender, EventArgs e)
        {
            Process.Start("https://www.cybermodding.it/forum.php");
        }

        private void buttonEdit1_EditValueChanged(object sender, EventArgs e)
        {

        }

        private void buttonEdit1_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            setStat("CHAR_XP_FM", Ranks[Convert.ToInt32(buttonEdit1.Text) - 1]);
        }

        private void buttonEdit2_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            setStat("CHAR_XP_FM", Convert.ToInt32(buttonEdit2.Text));
        }

        private void buttonEdit3_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            int value = Convert.ToInt32(buttonEdit3.Text);
            // Attempting to add negative values will result in random outcomes, so we check for if it's more than $0
            if (value > 0)
            {
                // A normal addition of money. Adds what you tell it to add.
                if (value <= 10000000)
                {
                    ClassicRPC.NCall(NewNatives.NETWORK_EARN_FROM_ROCKSTAR, value);
                }
                // This native will not permit you to add more than $10,000,000 per call, so we break it up.
                else
                {
                    int valueStorage = value;
                    while (valueStorage > 0)
                    {
                        if (valueStorage >= 10000000)
                        {
                            ClassicRPC.NCall(NewNatives.NETWORK_EARN_FROM_ROCKSTAR, 10000000);
                            valueStorage -= 10000000;
                        }
                        // This would be the final call. It's setting the remainder that is less than $10,000,000
                        else
                        {
                            ClassicRPC.NCall(NewNatives.NETWORK_EARN_FROM_ROCKSTAR, valueStorage);
                            valueStorage = 0;
                        }
                    }
                }
            }
        }

        private void buttonEdit4_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.MEM_MONEY, Convert.ToInt32(buttonEdit4.Text), 0);
        }

        private void buttonEdit5_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.NETWORK_SPENT_CASH_DROP, Convert.ToInt32(buttonEdit5.Text));
        }

        private void buttonEdit6_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            string[] statsSnacks = new string[] { "NO_BOUGHT_YUM_SNACKS", "NO_BOUGHT_HEALTH_SNACKS", "NO_BOUGHT_EPIC_SNACKS", "NUMBER_OF_ORANGE_BOUGHT", "NUMBER_OF_BOURGE_BOUGHT" };
            foreach (string snack in statsSnacks)
            {
                setStat(snack, Convert.ToInt32(buttonEdit6.Text));
            }
        }

        private void buttonEdit7_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            string[] statsArmor = new string[] { "MP_CHAR_ARMOUR_1_COUNT", "MP_CHAR_ARMOUR_2_COUNT", "MP_CHAR_ARMOUR_3_COUNT", "MP_CHAR_ARMOUR_4_COUNT", "MP_CHAR_ARMOUR_5_COUNT" };
            foreach (string armor in statsArmor)
            {
                setStat(armor, Convert.ToInt32(buttonEdit7.Text));
            }
        }

        private void buttonEdit8_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            string[] statsFireworks = new string[] { "FIREWORK_TYPE_1_WHITE", "FIREWORK_TYPE_1_RED", "FIREWORK_TYPE_1_BLUE", "FIREWORK_TYPE_2_WHITE", "FIREWORK_TYPE_2_RED", "FIREWORK_TYPE_2_BLUE", "FIREWORK_TYPE_3_WHITE", "FIREWORK_TYPE_3_RED", "FIREWORK_TYPE_3_BLUE", "FIREWORK_TYPE_4_WHITE", "FIREWORK_TYPE_4_RED", "FIREWORK_TYPE_4_BLUE" };
            foreach (string firework in statsFireworks)
            {
                setStat(firework, Convert.ToInt32(buttonEdit8.Text));
            }
        }

        private void buttonEdit9_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            STAT_INT("CIGARETTES_BOUGHT", Convert.ToInt32(buttonEdit9.Text), 1);
        }

        private void simpleButton19_Click(object sender, EventArgs e)
        {
            setStatKeywordQuery("skills");
        }

        private void simpleButton17_Click(object sender, EventArgs e)
        {
            setStatKeywordQuery("clothing", "clothingHair");
        }

        private void simpleButton5_Click(object sender, EventArgs e)
        {
            setStatKeywordQuery("awards");
        }

        private void simpleButton7_Click(object sender, EventArgs e)
        {
            setStatKeywordQuery("contacts");
        }

        private void simpleButton8_Click(object sender, EventArgs e)
        {
            setStatKeywordQuery("vehicleMods");
        }

        private void simpleButton9_Click(object sender, EventArgs e)
        {
            setStatKeywordQuery("heistTrophies");
            foreach (var trophie in Enum.GetValues(typeof(Functions.Trophies)))
            {
                Functions.GIVE_ACHIEVEMENT_TO_PLAYER((Functions.Trophies)trophie);
            }
        }

        private void simpleButton10_Click(object sender, EventArgs e)
        {
            setStat("PLAYER_MENTAL_STATE", 100f);
        }

        private void simpleButton29_Click(object sender, EventArgs e)
        {
            setStatKeywordQuery("weapons");
        }

        private void simpleButton28_Click(object sender, EventArgs e)
        {
            setStatKeywordQuery("kits");
        }

        private void simpleButton97_Click(object sender, EventArgs e)
        {
            string[] strArray = new string[] {
                "PISTOL", "CMBTPISTOL", "PISTOL50", "APPISTOL", "MICROSMG", "SMG", "ASLTSMG", "ASLTRIFLE", "CRBNRIFLE", "ADVRIFLE", "MG", "CMBTMG", "ASLTMG", "PUMP", "SAWNOFF", "BULLPUP",
                "ASLTSHTGN", "SNIPERRFL", "HVYSNIPER", "GRNLAUNCH", "RPG", "MINIGUNS", "GRENADE", "SMKGRENADE", "STKYBMB", "MOLOTOV"
            };
            int[] numArray = new int[] {
                0x270f, 0x270f, 0x270f, 0x270f, 0x270f, 0x270f, 0x270f, 0x270f, 0x270f, 0x270f, 0x270f, 0x270f, 0x270f, 0x270f, 0x270f, 0x270f,
                0x270f, 0x270f, 0x270f, 20, 20, 0x270f, 0x19, 0x19, 0x19, 100
            };
            for (int i = 0; i <= 1; i++)
            {
                for (int o = 0; o <= (strArray.Length - 1); o++)
                {
                    STAT_SET_INT(GET_HASH_KEY("MP" + Convert.ToString(i) + "_" + strArray[o] + "_FM_AMMO_BOUGHT"), numArray[o]);
                    STAT_SET_INT(GET_HASH_KEY("MP" + Convert.ToString(i) + "_" + strArray[o] + "_FM_AMMO_CURRENT"), -1);
                }
            }
        }

        private void simpleButton26_Click(object sender, EventArgs e)
        {
            setStatKeywordQuery("tattoos");
        }

        private void simpleButton11_Click(object sender, EventArgs e)
        {
            setStatKeywordQuery("chromeRims");
        }

        private void simpleButton27_Click(object sender, EventArgs e)
        {
            setStatKeywordQuery("heistVehicles");
        }

        private void simpleButton99_Click(object sender, EventArgs e)
        {
            setStatKeywordQuery("redesign");
        }

        private void simpleButton15_Click(object sender, EventArgs e)
        {
            setStatKeywordQuery("tutorial");
        }

        private void simpleButton98_Click(object sender, EventArgs e)
        {
            string[] sport = new string[] {
                "REPORT_STRENGTH", "COMMEND_STRENGTH", "FRIENDLY", "HELPFUL", "GRIEFING", "VC_ANNOYINGME", "VC_HATE", "OFFENSIVE_LANGUAGE", "OFFENSIVE_TAGPLATE", "OFFENSIVE_UGC", "BAD_CREW_NAME", "BAD_CREW_MOTTO", "BAD_CREW_STATUS", "BAD_CREW_EMBLEM", "GAME_EXPLOITS", "EXPLOITS",
                "ISPUNISHED"
            };
            int[] rem = new int[] {
                0x80, 0x80, 0x80, 0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0
            };
            for (int i = 0; i <= (sport.Length - 1); i++)
            {
                STAT_SET_INT((int)GET_HASH_KEY("MPPLY_" + sport[i]), rem[i]);
            }
        }

        private void simpleButton12_Click(object sender, EventArgs e)
        {
            setStat("MPPLY_VEHICLE_SELL_TIME", 0);
        }

        private void simpleButton13_Click(object sender, EventArgs e)
        {
            Tunables.idleKick();
        }

        private void simpleButton20_Click(object sender, EventArgs e)
        {
            string[] repo = new string[] {
                "REPORT_STRENGTH", "COMMEND_STRENGTH", "FRIENDLY", "HELPFUL", "GRIEFING", "VC_ANNOYINGME", "VC_HATE", "OFFENSIVE_LANGUAGE", "OFFENSIVE_TAGPLATE", "OFFENSIVE_UGC", "BAD_CREW_NAME", "BAD_CREW_MOTTO", "BAD_CREW_STATUS", "BAD_CREW_EMBLEM", "GAME_EXPLOITS", "EXPLOITS",
                "ISPUNISHED"
            };
            int[] reple = new int[repo.Length];
            string msgb = "Here is your Reports:" + Environment.NewLine;
            for (int i = 0; i <= (repo.Length - 1); i++)
            {
                reple[i] = STAT_GET_INT(GET_HASH_KEY("MPPLY_" + repo[i]));
                string ms = msgb;
                msgb = ms + repo[i] + ": " + reple[i].ToString() + Environment.NewLine;
            }
            XtraMessageBox.Show(msgb, "Reports", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void simpleButton22_Click(object sender, EventArgs e)
        {
            byte[] buffer = new byte[4];
            uint badSportAddr = PS3.Extension.ReadUInt32(Tunables.PTR_TUNABLES);
            PS3.Extension.WriteBytes(badSportAddr + 12, new byte[] { 5, 0xf5, 0xe1, 0 });
            PS3.Extension.WriteBytes(badSportAddr + 0x10, buffer);
            byte[] buffer2 = new byte[4];
            buffer2[0] = 0x43;
            buffer2[1] = 0x48;
            PS3.Extension.WriteBytes(badSportAddr + 260, buffer2);
            PS3.Extension.WriteBytes(badSportAddr + 300, new byte[] { 5, 0xf5, 0xe1, 0 });
            PS3.Extension.WriteBytes(badSportAddr + 0x130, buffer);
            PS3.Extension.WriteBytes(badSportAddr + 0x134, new byte[] { 0x49, 0x74, 0x24, 0 });
            for (int i = 0; i <= 10; i++)
            {
                PS3.Extension.WriteBytes((badSportAddr + 0x1c4) + ((uint)(i * 4)), buffer);
            }
        }

        private void simpleButton24_Click(object sender, EventArgs e)
        {
            setStat("CHAR_FM_ABILITY_1_UNLCK", -1);
            setStat("CHAR_FM_ABILITY_2_UNLCK", -1);
            setStat("CHAR_FM_ABILITY_3_UNLCK", -1);
        }

        private void simpleButton31_Click(object sender, EventArgs e)
        {
            STAT_INT("MPPLY_VEHICLE_ID_ADMIN_WEB", 117401876, 1);
        }

        private void simpleButton14_Click(object sender, EventArgs e)
        {
            if (shopp == false)
            {
                Tunables.freeShopping(true);
            }
            else
            {
                Tunables.freeShopping(false);
            }
        }

        private void simpleButton16_Click(object sender, EventArgs e)
        {
            boolNotify(Tunables.valentinesDLC());
        }

        private void simpleButton18_Click(object sender, EventArgs e)
        {
            boolNotify(Tunables.independenceDLC());
        }

        private void simpleButton21_Click(object sender, EventArgs e)
        {
            boolNotify(Tunables.christmasDLC());
        }

        private void simpleButton25_Click(object sender, EventArgs e)
        {
            if (Attached)
            {
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_KILLS"), 0x10030040)))
                {
                    CMBT_Kills.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else CMBT_Kills.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_KILLS_PLAYERS"), 0x10030040)))
                {
                    CMBT_KillsPlayers.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else CMBT_KillsPlayers.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_DEATHS"), 0x10030040)))
                {
                    CMBT_Deaths.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else CMBT_Deaths.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_DEATHS_PLAYER"), 0x10030040)))
                {
                    CMBT_DeathsPlayer.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else CMBT_DeathsPlayer.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_SHOTS"), 0x10030040)))
                {
                    CMBT_Shots.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else CMBT_Shots.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_FLOAT, Hash("MP0_WEAPON_ACCURACY"), 0x10030040)))
                {
                    CMBT_Accuracy.Text = PS3.Extension.ReadFloat(0x10030040).ToString();
                }
                else CMBT_Accuracy.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_HITS"), 0x10030040)))
                {
                    CMBT_Hits.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else CMBT_Hits.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_HEADSHOTS"), 0x10030040)))
                {
                    CMBT_Headshots.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else CMBT_Headshots.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_PLAYER_HEADSHOTS"), 0x10030040)))
                {
                    CMBT_HeadshotsPlayers.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else CMBT_HeadshotsPlayers.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_BOUNTPLACED"), 0x10030040)))
                {
                    CMBT_BountPlaced.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else CMBT_BountPlaced.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_BOUNTSONU"), 0x10030040)))
                {
                    CMBT_BountOn.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else CMBT_BountOn.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_DIED_IN_EXPLOSION"), 0x10030040)))
                {
                    buttonEdit10.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit10.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_DIED_IN_FIRE"), 0x10030040)))
                {
                    buttonEdit11.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit11.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_DIED_IN_FALL"), 0x10030040)))
                {
                    buttonEdit20.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit20.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_DIED_IN_ROAD"), 0x10030040)))
                {
                    buttonEdit19.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit19.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_KILLS_ENEMY_GANG_MEMBERS"), 0x10030040)))
                {
                    buttonEdit18.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit18.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_KILLS_INNOCENTS"), 0x10030040)))
                {
                    buttonEdit17.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit17.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_STARS_ATTAINED"), 0x10030040)))
                {
                    buttonEdit16.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit16.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_STARS_EVADED"), 0x10030040)))
                {
                    buttonEdit15.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit15.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_NO_TIMES_WANTED_LEVEL"), 0x10030040)))
                {
                    buttonEdit14.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit14.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_KILLS_STEALTH"), 0x10030040)))
                {
                    buttonEdit12.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit12.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_NUMBER_SLIPSTREAMS_IN_RACE"), 0x10030040)))
                {
                    buttonEdit13.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit13.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_RACES_WON"), 0x10030040)))
                {
                    buttonEdit21.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit21.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_RACES_LOST"), 0x10030040)))
                {
                    buttonEdit22.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit22.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_USJS_FOUND"), 0x10030040)))
                {
                    buttonEdit31.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit31.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_USJS_COMPLETED"), 0x10030040)))
                {
                    buttonEdit30.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit30.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_NUMBER_TURBO_STARTS_IN_RACE"), 0x10030040)))
                {
                    buttonEdit29.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit29.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_KILLS_COP"), 0x10030040)))
                {
                    buttonEdit36.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit36.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_KILLS_SWAT"), 0x10030040)))
                {
                    buttonEdit35.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit35.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_NUMBER_STOLEN_COP_VEHICLE"), 0x10030040)))
                {
                    buttonEdit33.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit33.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_NUMBER_STOLEN_BIKES"), 0x10030040)))
                {
                    buttonEdit34.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit34.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_NUMBER_STOLEN_BOATS"), 0x10030040)))
                {
                    buttonEdit25.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit25.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_NUMBER_STOLEN_PLANES"), 0x10030040)))
                {
                    buttonEdit26.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit26.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_NUMBER_STOLEN_CARS"), 0x10030040)))
                {
                    buttonEdit32.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit32.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_NUMBER_STOLEN_QUADBIKES"), 0x10030040)))
                {
                    buttonEdit28.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit28.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_NUMBER_STOLEN_HELIS"), 0x10030040)))
                {
                    buttonEdit27.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit27.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_FASTEST_SPEED"), 0x10030040)))
                {
                    buttonEdit45.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit45.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_NUMBER_CRASHES_CARS"), 0x10030040)))
                {
                    buttonEdit44.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit44.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_CARS_EXPLODED"), 0x10030040)))
                {
                    buttonEdit42.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit42.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_CARS_COPS_EXPLODED"), 0x10030040)))
                {
                    buttonEdit43.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit43.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_HELIS_EXPLODED"), 0x10030040)))
                {
                    buttonEdit37.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit37.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_PLANES_EXPLODED"), 0x10030040)))
                {
                    buttonEdit38.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit38.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_BOATS_EXPLODED"), 0x10030040)))
                {
                    buttonEdit41.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit41.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_QUADBIKE_EXPLODED"), 0x10030040)))
                {
                    buttonEdit40.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit40.Text = "0";
                if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash("MP0_BIKES_EXPLODED"), 0x10030040)))
                {
                    buttonEdit39.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                }
                else buttonEdit39.Text = "0";
            }
            else
            {
                XtraMessageBox.Show("You have to Connect first :)", "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void CMBT_Kills_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_KILLS"), Convert.ToInt32(CMBT_Kills.Text));
        }

        private void CMBT_KillsPlayers_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_KILLS_PLAYERS"), Convert.ToInt32(CMBT_Kills.Text));
        }

        private void CMBT_Deaths_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_DEATHS"), Convert.ToInt32(CMBT_Kills.Text));
        }

        private void CMBT_DeathsPlayer_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_DEATHS_PLAYER"), Convert.ToInt32(CMBT_Kills.Text));
        }

        private void CMBT_Shots_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_SHOTS"), Convert.ToInt32(CMBT_Shots.Text));
        }

        private void CMBT_Accuracy_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_FLOAT, Hash("MP0_WEAPON_ACCURACY"), float.Parse(CMBT_Accuracy.Text));
        }

        private void CMBT_Hits_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_HITS"), Convert.ToInt32(CMBT_Hits.Text));
        }

        private void CMBT_Headshots_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_HEADSHOTS"), Convert.ToInt32(CMBT_Headshots.Text));
        }

        private void CMBT_HeadshotsPlayers_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_PLAYER_HEADSHOTS"), Convert.ToInt32(CMBT_HeadshotsPlayers.Text));
        }

        private void CMBT_BountPlaced_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_BOUNTPLACED"), Convert.ToInt32(CMBT_BountPlaced.Text));
        }

        private void CMBT_BountOn_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_BOUNTSONU"), Convert.ToInt32(CMBT_BountOn.Text));
        }

        private void buttonEdit10_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("DIED_IN_EXPLOSION"), Convert.ToInt32(buttonEdit10.Text));
        }

        private void buttonEdit11_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("DIED_IN_FIRE"), Convert.ToInt32(buttonEdit11.Text));
        }

        private void buttonEdit20_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("DIED_IN_FALL"), Convert.ToInt32(buttonEdit20.Text));
        }

        private void buttonEdit19_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("DIED_IN_ROAD"), Convert.ToInt32(buttonEdit19.Text));
        }

        private void buttonEdit18_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("KILLS_ENEMY_GANG_MEMBERS"), Convert.ToInt32(buttonEdit18.Text));
        }

        private void buttonEdit17_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("KILLS_INNOCENTS"), Convert.ToInt32(buttonEdit17.Text));
        }

        private void buttonEdit16_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("STARS_ATTAINED"), Convert.ToInt32(buttonEdit16.Text));
        }

        private void buttonEdit15_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("STARS_EVADED"), Convert.ToInt32(buttonEdit15.Text));
        }

        private void buttonEdit14_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("NO_TIMES_WANTED_LEVEL"), Convert.ToInt32(buttonEdit14.Text));
        }

        private void buttonEdit12_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("KILLS_STEALTH"), Convert.ToInt32(buttonEdit12.Text));
        }

        private void buttonEdit13_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("NUMBER_SLIPSTREAMS_IN_RACE"), Convert.ToInt32(buttonEdit13.Text));
        }

        private void buttonEdit21_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("RACES_WON"), Convert.ToInt32(buttonEdit21.Text));
        }

        private void buttonEdit22_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("RACES_LOST"), Convert.ToInt32(buttonEdit22.Text));
        }

        private void buttonEdit31_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("USJS_FOUND"), Convert.ToInt32(buttonEdit31.Text));
        }

        private void buttonEdit30_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("USJS_COMPLETED"), Convert.ToInt32(buttonEdit30.Text));
        }

        private void buttonEdit29_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("NUMBER_TURBO_STARTS_IN_RACE"), Convert.ToInt32(buttonEdit29.Text));
        }

        private void WS_Save_Click(object sender, EventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_" + WS_Weapon.Text + "_ENEMY_KILLS"), Convert.ToInt32(WS_KillsPlayer.Text));
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_" + WS_Weapon.Text + "_KILLS"), Convert.ToInt32(WS_KillsNPC.Text));
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_" + WS_Weapon.Text + "_DEATHS"), Convert.ToInt32(WS_Deaths.Text));
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_" + WS_Weapon.Text + "_HITS"), Convert.ToInt32(WS_Hits.Text));
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_" + WS_Weapon.Text + "_SHOTS"), Convert.ToInt32(WS_Shots.Text));
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_" + WS_Weapon.Text + "_HEADSHOTS"), Convert.ToInt32(WS_Headshots.Text));
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_" + WS_Weapon.Text + "_FM_AMMO_CURRENT"), Convert.ToInt32(WS_Ammo.Text));
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_" + WS_Weapon.Text + "_FM_AMMO_BOUGHT"), Convert.ToInt32(WS_AmmoBought.Text));

            ClassicRPC.NCall(NewNatives.STAT_SET_BOOL, Hash("MP0_" + WS_Weapon.Text + "_AQUIRED_AS_GIFT"), Convert.ToInt32(WS_Gift.Checked));
            ClassicRPC.NCall(NewNatives.STAT_SET_BOOL, Hash("MP0_" + WS_Weapon.Text + "_IN_POSSESSION"), Convert.ToInt32(WS_Possession.Checked));
        }

        private void simpleButton38_Click(object sender, EventArgs e)
        {
            if (Attached == true)
            {
                try
                {
                    ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash(formatStat(comboBoxEdit27.Text)),
                        (Convert.ToUInt32(spinEdit64.Text) * 86400000) +
                        (Convert.ToUInt32(spinEdit63.Text) * 3600000) +
                        (Convert.ToUInt32(spinEdit62.Text) * 60000) +
                        (Convert.ToUInt32(spinEdit61.Text) * 1000), 1);
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("Something goes wrong.. Here is the error: \n\n" + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            else
            {
                XtraMessageBox.Show("You have to connect first :)", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void simpleButton39_Click(object sender, EventArgs e)
        {
            uint new_date = DateStruct_2_Memory(
                (int)spinEdit26.Value, (int)spinEdit25.Value, (int)spinEdit68.Value,
                (int)spinEdit67.Value, (int)spinEdit66.Value, (int)spinEdit65.Value, 0);
            ClassicRPC.NCall(NewNatives.STAT_SET_DATE, Hash(formatStat(comboBoxEdit28.Text)), new_date, 7, 1);
        }

        private void simpleButton71_Click(object sender, EventArgs e)
        {
            byte[] GarageLocation = PS3.GetBytes(GaragePointer, 4);
            Array.Reverse(GarageLocation);

            garageoffset = BitConverter.ToUInt32(GarageLocation, 0);

            LoadGarage(garageoffset);
        }

        private void simpleButton30_Click(object sender, EventArgs e)
        {
            if (Attached == true)
            {
                byte[] VehModel = new byte[4];

                if (garModel.SelectedIndex != 0)
                    VehModel = BitConverter.GetBytes(GetHash(garModel.Text.ToString()));

                Array.Reverse(VehModel);
                PS3.SetMemory(garageoffset + Garage.Model + ((uint)listBoxControl1.SelectedIndex * 0x400), VehModel);

                byte[] GarageLocation = PS3.GetBytes(GaragePointer, 4);
                Array.Reverse(GarageLocation);

                garageoffset = BitConverter.ToUInt32(GarageLocation, 0);

                LoadGarage(garageoffset);
            }
            else
            {
                XtraMessageBox.Show("You have to connect first :)", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void buttonEdit23_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            string[] strVeh = new string[garModel.Properties.Items.Count];
            for (int i = 0; i < strVeh.Length; i++)
            {
                strVeh[i] = garModel.Properties.Items[i].ToString();
            }
            string strfind = buttonEdit23.Text.ToLower();
            int select = -1;
            if (strfind != "")
            {
                for (int i = 0; i < strVeh.Length; i++)
                {
                    if (strVeh[i].Contains(strfind))
                    {
                        select = i;
                    }
                }
            }
            if (select != -1)
            {
                garModel.SelectedIndex = select;
            }
            else
            {
                XtraMessageBox.Show("Vehicle does not exist.. :(", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void simpleButton34_Click(object sender, EventArgs e)
        {
            if (Attached == true)
            {
                try
                {
                    splashScreenManager2.ShowWaitForm();
                    RefreshGarageInfo();
                    splashScreenManager2.CloseWaitForm();
                }
                catch
                {
                    if (splashScreenManager2.IsSplashFormVisible == true)
                        splashScreenManager2.CloseWaitForm();
                }
            }
            else
            {
                XtraMessageBox.Show("You have to connect first :)", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void comboBoxEdit26_SelectedIndexChanged(object sender, EventArgs e)
        {
            FillWheels(comboBoxEdit26.SelectedIndex);
        }

        private void simpleButton35_Click(object sender, EventArgs e)
        {
            if (Attached == true)
            {
                byte[] VehModel = new byte[4];

                if (garModel.SelectedIndex != 0)
                    VehModel = BitConverter.GetBytes(GetHash("adder"));

                Array.Reverse(VehModel);
                PS3.SetMemory(garageoffset + Garage.Model + ((uint)listBoxControl1.SelectedIndex * 0x400), VehModel);

                byte[] GarageLocation = PS3.GetBytes(GaragePointer, 4);
                Array.Reverse(GarageLocation);

                garageoffset = BitConverter.ToUInt32(GarageLocation, 0);

                LoadGarage(garageoffset);
            }
            else
            {
                XtraMessageBox.Show("You have to connect first :)", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void simpleButton36_Click(object sender, EventArgs e)
        {
            if (Attached == true)
            {
                byte[] VehModel = new byte[4];

                if (garModel.SelectedIndex != 0)
                    VehModel = BitConverter.GetBytes(GetHash("zentorno"));

                Array.Reverse(VehModel);
                PS3.SetMemory(garageoffset + Garage.Model + ((uint)listBoxControl1.SelectedIndex * 0x400), VehModel);

                byte[] GarageLocation = PS3.GetBytes(GaragePointer, 4);
                Array.Reverse(GarageLocation);

                garageoffset = BitConverter.ToUInt32(GarageLocation, 0);

                LoadGarage(garageoffset);
            }
            else
            {
                XtraMessageBox.Show("You have to connect first :)", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void simpleButton37_Click(object sender, EventArgs e)
        {
            if (Attached == true)
            {
                byte[] VehModel = new byte[4];

                if (garModel.SelectedIndex != 0)
                    VehModel = BitConverter.GetBytes(GetHash("kuruma"));

                Array.Reverse(VehModel);
                PS3.SetMemory(garageoffset + Garage.Model + ((uint)listBoxControl1.SelectedIndex * 0x400), VehModel);

                byte[] GarageLocation = PS3.GetBytes(GaragePointer, 4);
                Array.Reverse(GarageLocation);

                garageoffset = BitConverter.ToUInt32(GarageLocation, 0);

                LoadGarage(garageoffset);
            }
            else
            {
                XtraMessageBox.Show("You have to connect first :)", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void simpleButton32_Click(object sender, EventArgs e)
        {
            garUpdating = true;
            
            Byte[] Engine = { Convert.ToByte(4) };
            PS3.SetMemory(garageoffset + Garage.Engine + ((uint)listBoxControl1.SelectedIndex * 0x400), Engine);
            
            Byte[] Susp = { Convert.ToByte(4) };
            PS3.SetMemory(garageoffset + Garage.Suspension + ((uint)listBoxControl1.SelectedIndex * 0x400), Susp);
            
            Byte[] Trans = { Convert.ToByte(3) };
            PS3.SetMemory(garageoffset + Garage.Transmission + ((uint)listBoxControl1.SelectedIndex * 0x400), Trans);
            
            Byte[] Brake = { Convert.ToByte(3) };
            PS3.SetMemory(garageoffset + Garage.Brakes + ((uint)listBoxControl1.SelectedIndex * 0x400), Brake);
            
            PS3.SetMemory(garageoffset + Garage.Turbo + ((uint)listBoxControl1.SelectedIndex * 0x400), new byte[] { 0x01 });
            
            Byte[] Armor = { Convert.ToByte(5) };
            PS3.SetMemory(garageoffset + Garage.Armor + ((uint)listBoxControl1.SelectedIndex * 0x400), Armor);
            
            Byte[] Window = { Convert.ToByte(5) };
            PS3.SetMemory(garageoffset + Garage.Window + ((uint)listBoxControl1.SelectedIndex * 0x400), Window);
            
            Byte[] Horn = { Convert.ToByte(27) };
            PS3.SetMemory(garageoffset + Garage.Horn + ((uint)listBoxControl1.SelectedIndex * 0x400), Horn);
            
            PS3.SetMemory(garageoffset + Garage.Xenon + ((uint)listBoxControl1.SelectedIndex * 0x400), new byte[] { 0x01 });
            PS3.SetMemory(garageoffset + Garage.Insurance + ((uint)listBoxControl1.SelectedIndex * 0x400), new byte[] { 0x04 });
            
            PS3.SetMemory(garageoffset + Garage.Bulletproof + ((uint)listBoxControl1.SelectedIndex * 0x400), new byte[] { 0x01 });
            PS3.SetMemory(garageoffset + Garage.Bulletproof2 + ((uint)listBoxControl1.SelectedIndex * 0x400), new byte[] { 0x02 });
            
            PS3.SetMemory(garageoffset + Garage.Smoke_R + ((uint)listBoxControl1.SelectedIndex * 0x400), new byte[] { 0x00 });
            PS3.SetMemory(garageoffset + Garage.Smoke_G + ((uint)listBoxControl1.SelectedIndex * 0x400), new byte[] { 0x00 });
            PS3.SetMemory(garageoffset + Garage.Smoke_B + ((uint)listBoxControl1.SelectedIndex * 0x400), new byte[] { 0x00 });
            PS3.SetMemory(garageoffset + Garage.Smoke_Enabled + ((uint)listBoxControl1.SelectedIndex * 0x400), new byte[] { 0x01 });
            PS3.SetMemory(garageoffset + Garage.CustomTire_Front + ((uint)listBoxControl1.SelectedIndex * 0x400), new byte[] { 0x01 });

            applycarchange((uint)listBoxControl1.SelectedIndex);
            garUpdating = false;
        }

        private void simpleButton33_Click(object sender, EventArgs e)
        {
            PS3.SetMemory(garageoffset + Garage.Paint_Primary, new byte[] { 0x9e });
        }

        private void simpleButton40_Click(object sender, EventArgs e)
        {
            PS3.SetMemory(garageoffset + Garage.Paint_Primary, new byte[] { 0x00 });
            PS3.SetMemory(garageoffset + Garage.Paint_Secondary, new byte[] { 0x00 });
            PS3.SetMemory(garageoffset + Garage.Paint_Pearl, new byte[] { 0x01 });

            PS3.SetMemory(garageoffset + Garage.Window, new byte[] { 0x05 });
            PS3.SetMemory(garageoffset + 0x2B, new byte[] { 0x03 });
        }

        private void buttonEdit24_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            if (!garUpdating && buttonEdit24.Text.Length <= 8)
            {
                Garage.setString(listBoxControl1.SelectedIndex, LICENSE, buttonEdit24.Text);
                Garage.resetSlot(listBoxControl1.SelectedIndex);
            }
        }

        private void comboBoxEdit2_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (garUpdating == false)
            {
                PS3.SetMemory((uint)((int)ChiappaDX + 11 + listBoxControl1.SelectedIndex * 400), new byte[1] { Convert.ToByte(comboBoxEdit2.SelectedIndex) });
                SetChange((uint)listBoxControl1.SelectedIndex);
            }
        }

        private void comboBoxEdit3_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (garUpdating == false)
            {
                Byte[] buffer = { Convert.ToByte(comboBoxEdit3.SelectedIndex) };
                PS3.SetMemory(garageoffset + Garage.Paint_Primary + ((uint)listBoxControl1.SelectedIndex * 0x400), buffer);
                applycarchange((uint)listBoxControl1.SelectedIndex);
            }
        }

        private void comboBoxEdit4_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (garUpdating == false)
            {
                Byte[] buffer = { Convert.ToByte(comboBoxEdit4.SelectedIndex) };
                PS3.SetMemory(garageoffset + Garage.Paint_Secondary + ((uint)listBoxControl1.SelectedIndex * 0x400), buffer);
                applycarchange((uint)listBoxControl1.SelectedIndex);
            }
        }

        private void comboBoxEdit5_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (garUpdating == false)
            {
                Byte[] pColor = { Convert.ToByte(comboBoxEdit5.SelectedIndex) };
                PS3.SetMemory(garageoffset + Garage.Paint_Pearl + ((uint)listBoxControl1.SelectedIndex * 0x400), pColor);
                applycarchange((uint)listBoxControl1.SelectedIndex);
            }
        }

        private void comboBoxEdit6_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (garUpdating == false)
            {
                Byte[] Window = { Convert.ToByte(comboBoxEdit6.SelectedIndex) };
                PS3.SetMemory(garageoffset + Garage.Window + ((uint)listBoxControl1.SelectedIndex * 0x400), Window);
                applycarchange((uint)listBoxControl1.SelectedIndex);
            }
        }

        private void comboBoxEdit7_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (garUpdating == false)
            {
                Byte[] Window = { Convert.ToByte(comboBoxEdit7.SelectedIndex) };
                PS3.SetMemory(garageoffset + 107 + ((uint)listBoxControl1.SelectedIndex * 0x400), Window);
                applycarchange((uint)listBoxControl1.SelectedIndex);
            }
        }

        private void comboBoxEdit8_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (garUpdating == false)
            {
                Byte[] Window = { Convert.ToByte(comboBoxEdit8.SelectedIndex) };
                PS3.SetMemory(garageoffset + 51 + ((uint)listBoxControl1.SelectedIndex * 0x400), Window);
                applycarchange((uint)listBoxControl1.SelectedIndex);
            }
        }

        private void comboBoxEdit9_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (garUpdating == false)
            {
                Byte[] Window = { Convert.ToByte(comboBoxEdit9.SelectedIndex) };
                PS3.SetMemory(garageoffset + 67 + ((uint)listBoxControl1.SelectedIndex * 0x400), Window);
                applycarchange((uint)listBoxControl1.SelectedIndex);
            }
        }

        private void comboBoxEdit10_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (garUpdating == false)
            {
                Byte[] Window = { Convert.ToByte(comboBoxEdit10.SelectedIndex) };
                PS3.SetMemory(garageoffset + 55 + ((uint)listBoxControl1.SelectedIndex * 0x400), Window);
                applycarchange((uint)listBoxControl1.SelectedIndex);
            }
        }

        private void comboBoxEdit11_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (garUpdating == false)
            {
                Byte[] Window = { Convert.ToByte(comboBoxEdit11.SelectedIndex) };
                PS3.SetMemory(garageoffset + 59 + ((uint)listBoxControl1.SelectedIndex * 0x400), Window);
                applycarchange((uint)listBoxControl1.SelectedIndex);
            }
        }

        private void comboBoxEdit12_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (garUpdating == false)
            {
                Byte[] Window = { Convert.ToByte(comboBoxEdit12.SelectedIndex) };
                PS3.SetMemory(garageoffset + 63 + ((uint)listBoxControl1.SelectedIndex * 0x400), Window);
                applycarchange((uint)listBoxControl1.SelectedIndex);
            }
        }

        private void comboBoxEdit16_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (garUpdating == false)
            {
                Byte[] Window = { Convert.ToByte(comboBoxEdit16.SelectedIndex) };
                PS3.SetMemory(garageoffset + 79 + ((uint)listBoxControl1.SelectedIndex * 0x400), Window);
                applycarchange((uint)listBoxControl1.SelectedIndex);
            }
        }

        private void comboBoxEdit15_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (garUpdating == false)
            {
                Byte[] Window = { Convert.ToByte(comboBoxEdit15.SelectedIndex) };
                PS3.SetMemory(garageoffset + 91 + ((uint)listBoxControl1.SelectedIndex * 0x400), Window);
                applycarchange((uint)listBoxControl1.SelectedIndex);
            }
        }

        private void comboBoxEdit14_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (garUpdating == false)
            {
                Byte[] Window = { Convert.ToByte(comboBoxEdit14.SelectedIndex) };
                PS3.SetMemory(garageoffset + 71 + ((uint)listBoxControl1.SelectedIndex * 0x400), Window);
                applycarchange((uint)listBoxControl1.SelectedIndex);
            }
        }

        private void comboBoxEdit13_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (garUpdating == false)
            {
                Byte[] Window = { Convert.ToByte(comboBoxEdit13.SelectedIndex) };
                PS3.SetMemory(garageoffset + 75 + ((uint)listBoxControl1.SelectedIndex * 0x400), Window);
                applycarchange((uint)listBoxControl1.SelectedIndex);
            }
        }

        private void comboBoxEdit18_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (garUpdating == false)
            {
                Byte[] buffer = { Convert.ToByte(comboBoxEdit18.SelectedIndex) };
                PS3.SetMemory(garageoffset + Garage.Engine + ((uint)listBoxControl1.SelectedIndex * 0x400), buffer);
                applycarchange((uint)listBoxControl1.SelectedIndex);
            }
        }

        private void comboBoxEdit17_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (garUpdating == false)
            {
                Byte[] buffer = { Convert.ToByte(comboBoxEdit17.SelectedIndex) };
                PS3.SetMemory(garageoffset + Garage.Transmission + ((uint)listBoxControl1.SelectedIndex * 0x400), buffer);
                applycarchange((uint)listBoxControl1.SelectedIndex);
            }
        }

        private void comboBoxEdit19_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (garUpdating == false)
            {
                Byte[] buffer = { Convert.ToByte(comboBoxEdit19.SelectedIndex) };
                PS3.SetMemory(garageoffset + Garage.Suspension + ((uint)listBoxControl1.SelectedIndex * 0x400), buffer);
                applycarchange((uint)listBoxControl1.SelectedIndex);
            }
        }

        private void comboBoxEdit20_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (garUpdating == false)
            {
                Byte[] buffer = { Convert.ToByte(comboBoxEdit20.SelectedIndex) };
                PS3.SetMemory(garageoffset + Garage.Turbo + ((uint)listBoxControl1.SelectedIndex * 0x400), buffer);
                applycarchange((uint)listBoxControl1.SelectedIndex);
            }
        }

        private void comboBoxEdit21_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (garUpdating == false)
            {
                Byte[] Brake = { Convert.ToByte(comboBoxEdit21.SelectedIndex) };
                PS3.SetMemory(garageoffset + Garage.Brakes + ((uint)listBoxControl1.SelectedIndex * 0x400), Brake);
                applycarchange((uint)listBoxControl1.SelectedIndex);
            }
        }

        private void comboBoxEdit22_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (garUpdating == false)
            {
                Byte[] Armor = { Convert.ToByte(comboBoxEdit22.SelectedIndex) };
                PS3.SetMemory(garageoffset + Garage.Armor + ((uint)listBoxControl1.SelectedIndex * 0x400), Armor);
                applycarchange((uint)listBoxControl1.SelectedIndex);
            }
        }

        private void comboBoxEdit23_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (garUpdating == false)
            {
                Byte[] Armor = { Convert.ToByte(comboBoxEdit23.SelectedIndex) };
                PS3.SetMemory(garageoffset + Garage.Xenon + ((uint)listBoxControl1.SelectedIndex * 0x400), Armor);
                applycarchange((uint)listBoxControl1.SelectedIndex);
            }
        }

        private void comboBoxEdit25_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (garUpdating == false)
            {
                Byte[] Wheeltype = { Convert.ToByte(comboBoxEdit25.SelectedIndex) };
                if (checkEdit30.Checked && Wheeltype[0] != 0)
                {
                    Wheeltype[0] += (Byte)(comboBoxEdit25.Properties.Items.Count - 1);
                    PS3.SetMemory(garageoffset + Garage.Rims_Front + ((uint)listBoxControl1.SelectedIndex * 0x400), Wheeltype);
                }
                else
                {
                    PS3.SetMemory(garageoffset + Garage.Rims_Front + ((uint)listBoxControl1.SelectedIndex * 0x400), Wheeltype);
                }

                Byte[] Wheelclass = { Convert.ToByte(comboBoxEdit26.SelectedIndex) };
                PS3.SetMemory(garageoffset + Garage.Rims_Type + ((uint)listBoxControl1.SelectedIndex * 0x400), Wheelclass);
                if (comboBoxEdit26.SelectedIndex == 6)
                    PS3.SetMemory(garageoffset + Garage.Rims_Rear + ((uint)listBoxControl1.SelectedIndex * 0x400), Wheeltype);

                applycarchange((uint)listBoxControl1.SelectedIndex);
            }
        }

        private void comboBoxEdit24_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (garUpdating == false)
            {
                Byte[] Rimcolor = { Convert.ToByte(comboBoxEdit24.SelectedIndex) };
                PS3.SetMemory(garageoffset + Garage.Rims_Color + ((uint)listBoxControl1.SelectedIndex * 0x400), Rimcolor);
                applycarchange((uint)listBoxControl1.SelectedIndex);
            }
        }

        private void checkEdit30_CheckedChanged(object sender, EventArgs e)
        {
            if (garUpdating == false)
            {
                Byte[] Wheeltype = { Convert.ToByte(comboBoxEdit25.SelectedIndex) };
                if (checkEdit30.Checked && Wheeltype[0] != 0)
                {
                    Wheeltype[0] += (Byte)(comboBoxEdit25.Properties.Items.Count - 1);
                    PS3.SetMemory(garageoffset + Garage.Rims_Front + ((uint)listBoxControl1.SelectedIndex * 0x400), Wheeltype);
                }
                else
                {
                    PS3.SetMemory(garageoffset + Garage.Rims_Front + ((uint)listBoxControl1.SelectedIndex * 0x400), Wheeltype);
                }

                Byte[] Wheelclass = { Convert.ToByte(comboBoxEdit26.SelectedIndex) };
                PS3.SetMemory(garageoffset + Garage.Rims_Type + ((uint)listBoxControl1.SelectedIndex * 0x400), Wheelclass);
                if (comboBoxEdit26.SelectedIndex == 6)
                    PS3.SetMemory(garageoffset + Garage.Rims_Rear + ((uint)listBoxControl1.SelectedIndex * 0x400), Wheeltype);

                applycarchange((uint)listBoxControl1.SelectedIndex);
            }
        }

        private void checkEdit31_CheckedChanged(object sender, EventArgs e)
        {
            if (garUpdating == false)
            {
                if (checkEdit31.Checked == true)
                {
                    PS3.SetMemory(garageoffset + Garage.Bulletproof + ((uint)listBoxControl1.SelectedIndex * 0x400), new byte[] { 0x01 });
                    PS3.SetMemory(garageoffset + Garage.Bulletproof2 + ((uint)listBoxControl1.SelectedIndex * 0x400), new byte[] { 0x02 });
                    applycarchange((uint)listBoxControl1.SelectedIndex);
                }
                else
                {
                    PS3.SetMemory(garageoffset + Garage.Bulletproof + ((uint)listBoxControl1.SelectedIndex * 0x400), new byte[] { 0x00 });
                    applycarchange((uint)listBoxControl1.SelectedIndex);
                }
            }
        }

        private void checkEdit36_CheckedChanged(object sender, EventArgs e)
        {
            if (garUpdating == false)
            {
                if (checkEdit36.Checked)
                {
                    PS3.SetMemory(garageoffset + Garage.Smoke_R + ((uint)listBoxControl1.SelectedIndex * 0x400), new byte[] { 0x00 });
                    PS3.SetMemory(garageoffset + Garage.Smoke_G + ((uint)listBoxControl1.SelectedIndex * 0x400), new byte[] { 0x00 });
                    PS3.SetMemory(garageoffset + Garage.Smoke_B + ((uint)listBoxControl1.SelectedIndex * 0x400), new byte[] { 0x00 });
                    PS3.SetMemory(garageoffset + Garage.Smoke_Enabled + ((uint)listBoxControl1.SelectedIndex * 0x400), new byte[] { 0x01 });

                    applycarchange((uint)listBoxControl1.SelectedIndex);
                }
                else
                {
                    PS3.SetMemory(garageoffset + Garage.Smoke_R + ((uint)listBoxControl1.SelectedIndex * 0x400), new byte[] { 0x17 });
                    PS3.SetMemory(garageoffset + Garage.Smoke_G + ((uint)listBoxControl1.SelectedIndex * 0x400), new byte[] { 0x17 });
                    PS3.SetMemory(garageoffset + Garage.Smoke_B + ((uint)listBoxControl1.SelectedIndex * 0x400), new byte[] { 0x17 });
                    PS3.SetMemory(garageoffset + Garage.Smoke_Enabled + ((uint)listBoxControl1.SelectedIndex * 0x400), new byte[] { 0x01 });

                    applycarchange((uint)listBoxControl1.SelectedIndex);
                }
            }
        }

        private void checkEdit1_CheckedChanged(object sender, EventArgs e)
        {
            if (garUpdating == false)
            {
                if (checkEdit1.Checked == true)
                {
                    PS3.SetMemory(garageoffset + Garage.Insurance + ((uint)listBoxControl1.SelectedIndex * 0x400), new byte[] { 4 });
                    applycarchange((uint)listBoxControl1.SelectedIndex);
                }
                else
                {
                    PS3.SetMemory(garageoffset + Garage.Insurance + ((uint)listBoxControl1.SelectedIndex * 0x400), new byte[1]);
                    applycarchange((uint)listBoxControl1.SelectedIndex);
                }
            }
        }

        private void colorPickEdit1_EditValueChanged(object sender, EventArgs e)
        {
            PS3.SetMemory(garageoffset + Garage.Smoke_Enabled + ((uint)listBoxControl1.SelectedIndex * 0x400), new byte[] { 1 });
            byte[] colr = new byte[] { Convert.ToByte(colorPickEdit1.Color.R) };
            byte[] colg = new byte[] { Convert.ToByte(colorPickEdit1.Color.G) };
            byte[] colb = new byte[] { Convert.ToByte(colorPickEdit1.Color.B) };
            PS3.SetMemory(garageoffset + Garage.Smoke_R + ((uint)listBoxControl1.SelectedIndex * 0x400), colr);
            PS3.SetMemory(garageoffset + Garage.Smoke_G + ((uint)listBoxControl1.SelectedIndex * 0x400), colg);
            PS3.SetMemory(garageoffset + Garage.Smoke_B + ((uint)listBoxControl1.SelectedIndex * 0x400), colb);
            applycarchange((uint)listBoxControl1.SelectedIndex);
        }

        private void aoRefresh_Click(object sender, EventArgs e)
        {
            refreshOutfitListing();
        }

        private void aoDelete_Click(object sender, EventArgs e)
        {
            if (aoListing.SelectedIndex != -1)
            {
                if (XtraMessageBox.Show("This will delete the Outfit from the Outfits.xml file and cannot be restored!! \n\nAre you sure to delete the selected outfit?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)
                {
                    string filepath = "Files/Outfits.xml";
                    XmlDocument doc = new XmlDocument();
                    doc.Load(filepath);

                    XmlNode foundNode = null;
                    foreach (XmlNode node in doc.DocumentElement.SelectNodes("/root/outfit"))
                    {
                        if (node.Attributes["title"].InnerText == aoListing.Text)
                        {
                            foundNode = node;
                        }
                    }
                    foundNode.ParentNode.RemoveChild(foundNode);
                    doc.Save(filepath);
                    aoListing.SelectedIndex = 0;
                    refreshOutfitListing();
                }
            }
        }

        private void aoListing_SelectedIndexChanged(object sender, EventArgs e)
        {
            aoeRefreshControls();
        }

        private void aoeSave_Click(object sender, EventArgs e)
        {
            // Load XML
            string filepath = "Files/Outfits.xml";
            XmlDocument doc = new XmlDocument();
            doc.Load(filepath);

            // Find outfit node
            XmlNode foundNode = null;
            foreach (XmlNode node in doc.DocumentElement.SelectNodes("/root/outfit"))
            {
                if (node.Attributes["title"].InnerText == aoListing.Text)
                {
                    foundNode = node;
                }
            }

            // Set title
            foundNode.Attributes["title"].InnerText = aoeTitle.Text;

            // Set values
            DevExpress.XtraEditors.SpinEdit[] aoeControls_m = new DevExpress.XtraEditors.SpinEdit[] { aoeMask_m, aoeHat_m, aoeEyes_m, aoeEars_m, aoeHair_m, aoeTorso_m, aoeTops1_m, aoeTops2_m, aoeLegs_m, aoeShoes_m, aoeFace_m, aoeExtra_m, aoeHands_m, aoeArmor_m, aoeEmblem_m };
            DevExpress.XtraEditors.SpinEdit[] aoeControls_t = new DevExpress.XtraEditors.SpinEdit[] { aoeMask_t, aoeHat_t, aoeEyes_t, aoeEars_t, aoeHair_t, aoeTorso_t, aoeTops1_t, aoeTops2_t, aoeLegs_t, aoeShoes_t, aoeFace_t, aoeExtra_t, aoeHands_t, aoeArmor_t, aoeEmblem_t };
            for (int i = 0; i < aoElements.Count(); i++)
            {
                foundNode.SelectSingleNode(aoElements[i]).Attributes["model"].InnerText = aoeControls_m[i].Text;
                foundNode.SelectSingleNode(aoElements[i]).Attributes["texture"].InnerText = aoeControls_t[i].Text;
            }

            // Set gender
            foundNode.Attributes["gender"].InnerText = aoeGender.SelectedIndex == 0 ? "male" : "female";
            // Set description
            foundNode.SelectSingleNode("description").InnerXml = aoeDescription.Text;

            // Save XML
            doc.Save(filepath);

            refreshOutfitListing();
        }

        private void simpleButton41_Click(object sender, EventArgs e)
        {
            // Load XML
            string filepath = "Files/Outfits.xml";
            XmlDocument doc = new XmlDocument();
            doc.Load(filepath);

            // Create main node
            XmlNode node = doc.CreateNode(XmlNodeType.Element, "outfit", null);

            // Add title attribute to main node
            XmlAttribute nodeTitle = doc.CreateAttribute("title");
            nodeTitle.Value = aoeTitle.Text;
            node.Attributes.SetNamedItem(nodeTitle);
            XmlAttribute nodeGender = doc.CreateAttribute("gender");
            nodeGender.Value = aoeGender.Text.ToLower();
            node.Attributes.SetNamedItem(nodeGender);
            XmlAttribute nodeCreator = doc.CreateAttribute("creator");
            nodeCreator.Value = aoeCreator.Text;
            node.Attributes.SetNamedItem(nodeCreator);

            DevExpress.XtraEditors.SpinEdit[] aoaControls_m = new DevExpress.XtraEditors.SpinEdit[] { aoeMask_m, aoeHat_m, aoeEyes_m, aoeEars_m, aoeHair_m, aoeTorso_m, aoeTops1_m, aoeTops2_m, aoeLegs_m, aoeShoes_m, aoeFace_m, aoeExtra_m, aoeHands_m, aoeArmor_m, aoeEmblem_m };
            DevExpress.XtraEditors.SpinEdit[] aoaControls_t = new DevExpress.XtraEditors.SpinEdit[] { aoeMask_t, aoeHat_t, aoeEyes_t, aoeEars_t, aoeHair_t, aoeTorso_t, aoeTops1_t, aoeTops2_t, aoeLegs_t, aoeShoes_t, aoeFace_t, aoeExtra_t, aoeHands_t, aoeArmor_t, aoeEmblem_t };
            for (int i = 0; i < aoElements.Count(); i++)
            {
                // Create new node
                XmlNode newNode = doc.CreateElement(aoElements[i]);

                // Add model attribute to new node
                XmlAttribute newNode_m = doc.CreateAttribute("model");
                newNode_m.Value = aoaControls_m[i].Text;
                newNode.Attributes.SetNamedItem(newNode_m);

                XmlAttribute newNode_t = doc.CreateAttribute("texture");
                newNode_t.Value = aoaControls_t[i].Text;
                newNode.Attributes.SetNamedItem(newNode_t);

                // Add new node to main node
                node.AppendChild(newNode);
            }

            // Add description
            XmlNode descriptionNode = doc.CreateElement("description");
            descriptionNode.InnerXml = aoeDescription.Text == "" ? "None" : aoeDescription.Text;
            node.AppendChild(descriptionNode);

            // Add main node to XML
            doc.DocumentElement.AppendChild(node);

            // Save XML
            doc.Save(filepath);

            refreshOutfitListing();
        }

        private void simpleButton42_Click(object sender, EventArgs e)
        {
            Reset();
            setClothing("MASK", aoeMask_m.Text, aoeMask_t.Text);
            setClothing("HAT", aoeHat_m.Text, aoeHat_t.Text);
            setClothing("EYES", aoeEyes_m.Text, aoeEyes_t.Text);
            setClothing("EARS", aoeEars_m.Text, aoeEars_t.Text);
            setClothing("HAIR", aoeHair_m.Text, aoeHair_t.Text);
            setClothing("TORSO", aoeTorso_m.Text, aoeTorso_t.Text);
            setClothing("TOPS1", aoeTops1_m.Text, aoeTops1_t.Text);
            setClothing("TOPS2", aoeTops2_m.Text, aoeTops2_t.Text);
            setClothing("LEGS", aoeLegs_m.Text, aoeLegs_t.Text);
            setClothing("SHOES", aoeShoes_m.Text, aoeShoes_t.Text);
            setClothing("FACE", aoeFace_m.Text, aoeFace_t.Text);
            setClothing("EXTRA", aoeExtra_m.Text, aoeExtra_t.Text);
            setClothing("HANDS", aoeHands_m.Text, aoeHands_t.Text);
            setClothing("ARMOR", aoeArmor_m.Text, aoeArmor_t.Text);
            setClothing("EMBLEM", aoeEmblem_m.Text, aoeEmblem_t.Text);
        }

        private void simpleButton43_Click(object sender, EventArgs e)
        {
            Random rand = new Random();
            if (aoeGender.SelectedIndex == 0)
            {
                int n1 = rand.Next(0, 0x17);
                int n3 = rand.Next(0, 9);
                int n5 = rand.Next(0, 0x37);
                int n7 = rand.Next(0, 0x17);
                int n9 = rand.Next(0, 0x3a);
                int n11 = rand.Next(0, 0x60);
                int n13 = rand.Next(0, 0x29);
                int n15 = rand.Next(0, 0x33);
                int n17 = rand.Next(0, 30);
                int n19 = rand.Next(0, 0x6d);
                int n21 = rand.Next(0, 0x44);
                int n23 = rand.Next(0, 13);
                int n25 = rand.Next(0, 0x4e);
                int n2 = rand.Next(0, 10);
                int n4 = rand.Next(0, 10);
                int n6 = rand.Next(0, 10);
                int n8 = rand.Next(0, 10);
                int n10 = rand.Next(0, 10);
                int n12 = rand.Next(0, 10);
                int n14 = rand.Next(0, 10);
                int n16 = rand.Next(0, 10);
                int n18 = rand.Next(0, 10);
                int n20 = rand.Next(0, 10);
                int n22 = rand.Next(0, 10);
                int n24 = rand.Next(0, 10);
                int n26 = rand.Next(0, 10);
                Reset();
                setClothing("HAIR", Convert.ToString(n1), Convert.ToString(n2));
                setClothing("TEXTURE", Convert.ToString(n3), Convert.ToString(n4));
                setClothing("HATS", Convert.ToString(n5), Convert.ToString(n6));
                setClothing("GLASSES", Convert.ToString(n7), Convert.ToString(n8));
                setClothing("MASK", Convert.ToString(n9), Convert.ToString(n10));
                setClothing("TORSO", Convert.ToString(n11), Convert.ToString(n12));
                setClothing("LEGS", Convert.ToString(n13), Convert.ToString(n14));
                setClothing("HANDS", Convert.ToString(n15), Convert.ToString(n16));
                setClothing("SHOES", Convert.ToString(n17), Convert.ToString(n18));
                setClothing("SPECIAL1", Convert.ToString(n19), Convert.ToString(n20));
                setClothing("SPECIAL2", Convert.ToString(n21), Convert.ToString(n22));
                setClothing("SPECIAL3", Convert.ToString(n23), Convert.ToString(n24));
                setClothing("TORSO2", Convert.ToString(n25), Convert.ToString(n26));
            }
            else if (aoeGender.SelectedIndex == 1)
            {
                int model = rand.Next(0, 0x18);
                int n1 = rand.Next(0, 8);
                int n3 = rand.Next(0, 0x37);
                int n5 = rand.Next(0, 0x19);
                int n7 = rand.Next(0, 0x3a);
                int n9 = rand.Next(0, 0x6f);
                int n11 = rand.Next(0, 0x2c);
                int n13 = rand.Next(0, 0x33);
                int n15 = rand.Next(0, 0x1f);
                int n17 = rand.Next(0, 80);
                int n19 = rand.Next(0, 0x38);
                int n21 = rand.Next(0, 15);
                int n23 = rand.Next(0, 0x47);
                int texture = rand.Next(0, 10);
                int n2 = rand.Next(0, 10);
                int n4 = rand.Next(0, 10);
                int n6 = rand.Next(0, 10);
                int n8 = rand.Next(0, 10);
                int n10 = rand.Next(0, 10);
                int n12 = rand.Next(0, 10);
                int n14 = rand.Next(0, 10);
                int n16 = rand.Next(0, 10);
                int n18 = rand.Next(0, 10);
                int n20 = rand.Next(0, 10);
                int n22 = rand.Next(0, 10);
                int n24 = rand.Next(0, 10);
                Reset();
                setClothing("HAIR", Convert.ToString(model), Convert.ToString(texture));
                setClothing("TEXTURE", Convert.ToString(n1), Convert.ToString(n2));
                setClothing("HATS", Convert.ToString(n3), Convert.ToString(n4));
                setClothing("GLASSES", Convert.ToString(n5), Convert.ToString(n6));
                setClothing("MASK", Convert.ToString(n7), Convert.ToString(n8));
                setClothing("TORSO", Convert.ToString(n9), Convert.ToString(n10));
                setClothing("LEGS", Convert.ToString(n11), Convert.ToString(n12));
                setClothing("HANDS", Convert.ToString(n13), Convert.ToString(n14));
                setClothing("SHOES", Convert.ToString(n15), Convert.ToString(n16));
                setClothing("SPECIAL1", Convert.ToString(n17), Convert.ToString(n18));
                setClothing("SPECIAL2", Convert.ToString(n19), Convert.ToString(n20));
                setClothing("SPECIAL3", Convert.ToString(n21), Convert.ToString(n22));
                setClothing("TORSO2", Convert.ToString(n23), Convert.ToString(n24));
            }
        }

        private void simpleButton47_Click(object sender, EventArgs e)
        {
            if (Attached == true)
            {
                byte[] VehModel = new byte[4];

                if (garModel.SelectedIndex != 0)
                    VehModel = BitConverter.GetBytes(GetHash("t20"));

                Array.Reverse(VehModel);
                PS3.SetMemory(garageoffset + Garage.Model + ((uint)listBoxControl1.SelectedIndex * 0x400), VehModel);

                byte[] GarageLocation = PS3.GetBytes(GaragePointer, 4);
                Array.Reverse(GarageLocation);

                garageoffset = BitConverter.ToUInt32(GarageLocation, 0);

                LoadGarage(garageoffset);
            }
            else
            {
                XtraMessageBox.Show("You have to connect first :)", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void simpleButton48_Click(object sender, EventArgs e)
        {
            if (Attached == true)
            {
                byte[] VehModel = new byte[4];

                if (garModel.SelectedIndex != 0)
                    VehModel = BitConverter.GetBytes(GetHash("osiris"));

                Array.Reverse(VehModel);
                PS3.SetMemory(garageoffset + Garage.Model + ((uint)listBoxControl1.SelectedIndex * 0x400), VehModel);

                byte[] GarageLocation = PS3.GetBytes(GaragePointer, 4);
                Array.Reverse(GarageLocation);

                garageoffset = BitConverter.ToUInt32(GarageLocation, 0);

                LoadGarage(garageoffset);
            }
            else
            {
                XtraMessageBox.Show("You have to connect first :)", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void buttonEdit36_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_KILLS_COP"), Convert.ToInt32(buttonEdit36.Text));
        }

        private void buttonEdit35_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_KILLS_SWAT"), Convert.ToInt32(buttonEdit35.Text));
        }

        private void buttonEdit33_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_NUMBER_STOLEN_COP_VEHICLE"), Convert.ToInt32(buttonEdit33.Text));
        }

        private void buttonEdit34_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_NUMBER_STOLEN_BIKES"), Convert.ToInt32(buttonEdit34.Text));
        }

        private void buttonEdit25_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_NUMBER_STOLEN_BOATS"), Convert.ToInt32(buttonEdit25.Text));
        }

        private void buttonEdit26_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_NUMBER_STOLEN_PLANES"), Convert.ToInt32(buttonEdit26.Text));
        }

        private void buttonEdit32_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_NUMBER_STOLEN_CARS"), Convert.ToInt32(buttonEdit32.Text));
        }

        private void buttonEdit28_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_NUMBER_STOLEN_QUADBIKES"), Convert.ToInt32(buttonEdit28.Text));
        }

        private void buttonEdit27_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_NUMBER_STOLEN_HELIS"), Convert.ToInt32(buttonEdit27.Text));
        }

        private void buttonEdit45_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_FASTEST_SPEED"), Convert.ToInt32(buttonEdit45.Text));
        }

        private void buttonEdit44_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_CARS_CRASHED"), Convert.ToInt32(buttonEdit44.Text));
        }

        private void buttonEdit42_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_CARS_EXPLODED"), Convert.ToInt32(buttonEdit42.Text));
        }

        private void buttonEdit43_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_CARS_COPS_EXPLODED"), Convert.ToInt32(buttonEdit43.Text));
        }

        private void buttonEdit37_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_HELIS_EXPLODED"), Convert.ToInt32(buttonEdit37.Text));
        }

        private void buttonEdit38_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_PLANES_EXPLODED"), Convert.ToInt32(buttonEdit38.Text));
        }

        private void buttonEdit41_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_BOATS_EXPLODED"), Convert.ToInt32(buttonEdit41.Text));
        }

        private void buttonEdit40_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_QUADBIKE_EXPLODED"), Convert.ToInt32(buttonEdit40.Text));
        }

        private void buttonEdit39_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash("MP0_BIKES_EXPLODED"), Convert.ToInt32(buttonEdit39.Text));
        }

        private void buttonEdit46_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            string[] strmod = new string[comboBoxEdit31.Properties.Items.Count];
            for (int i = 0; i < strmod.Length; i++)
            {
                strmod[i] = comboBoxEdit31.Properties.Items[i].ToString();
            }
            string ToFind = buttonEdit23.Text.ToLower();
            int select = -1;
            if (ToFind != "")
            {
                for (int i = 0; i < strmod.Length; i++)
                {
                    if (strmod[i].Contains(ToFind))
                    {
                        select = i;
                    }
                }
            }
            if (select != -1)
            {
                comboBoxEdit31.SelectedIndex = select;
            }
            else
            {
                XtraMessageBox.Show("Vehicle does not exist.. :(", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void simpleButton23_Click(object sender, EventArgs e)
        {
            boolNotify(Tunables.christmasWeather());
        }

        private void simpleButton45_Click(object sender, EventArgs e)
        {
            if (Attached == true)
                SetModel("S_M_M_MovAlien_01");
            else
                XtraMessageBox.Show("You must be Connected to do this!", "Error :( ", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }

        private void simpleButton46_Click(object sender, EventArgs e)
        {
            if (Attached == true)
                SetModel("U_M_Y_Zombie_01");
            else
                XtraMessageBox.Show("You must be Connected to do this!", "Error :( ", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }

        private void simpleButton50_Click(object sender, EventArgs e)
        {
            if (Attached == true)
                SetModel("CS_Orleans");
            else
                XtraMessageBox.Show("You must be Connected to do this!", "Error :( ", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }

        private void simpleButton49_Click(object sender, EventArgs e)
        {
            if (Attached == true)
                SetModel("S_M_M_MovSpace_01");
            else
                XtraMessageBox.Show("You must be Connected to do this!", "Error :( ", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }

        private void simpleButton52_Click(object sender, EventArgs e)
        {
            if (Attached == true)
                SetModel("S_M_Y_Clown_01");
            else
                XtraMessageBox.Show("You must be Connected to do this!", "Error :( ", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }

        private void simpleButton51_Click(object sender, EventArgs e)
        {
            if (Attached == true)
                SetModel("U_M_Y_BabyD");
            else
                XtraMessageBox.Show("You must be Connected to do this!", "Error :( ", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }

        private void simpleButton53_Click(object sender, EventArgs e)
        {
            if (Attached == true)
                SetModel(comboBoxEdit31.Text);
            else
                XtraMessageBox.Show("You must be Connected to do this!", "Error :( ", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }

        private void simpleButton57_Click(object sender, EventArgs e)
        {
            switch (sdE_t.Text)
            {
                case "int":
                    if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash(sdE_s.Text), 0x10030040)))
                    {
                        sdE_v.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                        textEdit3.Text = "Generic - Stat Query Successful!";
                    }
                    else
                    {
                        sdE_v.Text = "";
                        textEdit3.Text = "Generic - Stat Query Failed...";
                    }
                    break;
                case "s64":
                    if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash(sdE_s.Text), 0x10030040)))
                    {
                        sdE_v.Text = PS3.Extension.ReadInt64(0x10030040).ToString();
                        textEdit3.Text = "Generic - Stat Query Successful!";
                    }
                    else
                    {
                        sdE_v.Text = "";
                        textEdit3.Text = "Generic - Stat Query Failed...";
                    }
                    break;
                case "u8":
                case "u16":
                case "u32":
                    if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash(sdE_s.Text), 0x10030040)))
                    {
                        sdE_v.Text = PS3.Extension.ReadUInt32(0x10030040).ToString();
                        textEdit3.Text = "Generic - Stat Query Successful!";
                    }
                    else
                    {
                        sdE_v.Text = "";
                        textEdit3.Text = "Generic - Stat Query Failed...";
                    }
                    break;
                case "u64":
                    if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_INT, Hash(sdE_s.Text), 0x10030040)))
                    {
                        sdE_v.Text = PS3.Extension.ReadUInt64(0x10030040).ToString();
                        textEdit3.Text = "Generic - Stat Query Successful!";
                    }
                    else
                    {
                        sdE_v.Text = "";
                        textEdit3.Text = "Generic - Stat Query Failed...";
                    }
                    break;
                case "bool":
                    if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_BOOL, Hash(sdE_s.Text), 0x10030040)))
                    {
                        sdE_v.Text = PS3.Extension.ReadInt32(0x10030040).ToString();
                        textEdit3.Text = "Generic - Stat Query Successful!";
                    }
                    else
                    {
                        sdE_v.Text = "";
                        textEdit3.Text = "Generic - Stat Query Failed...";
                    }
                    break;
                case "float":
                    if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_GET_FLOAT, Hash(sdE_s.Text), 0x10030040)))
                    {
                        sdE_v.Text = PS3.Extension.ReadFloat(0x10030040).ToString();
                        textEdit3.Text = "Generic - Stat Query Successful!";
                    }
                    else
                    {
                        sdE_v.Text = "";
                        textEdit3.Text = "Generic - Stat Query Failed...";
                    }
                    break;
                case "string":
                    sdE_v.Text = PS3.Extension.ReadString(Convert.ToUInt32(ClassicRPC.NCall(NewNatives.STAT_GET_STRING, Hash(sdE_s.Text), -1)));
                    textEdit3.Text = "";
                    break;
                case "userid":
                    sdE_v.Text = PS3.Extension.ReadString(Convert.ToUInt32(ClassicRPC.NCall(NewNatives.STAT_GET_USER_ID, Hash(sdE_s.Text))));
                    textEdit3.Text = "Generic - Stat Query Succesfull";
                    break;
            }

            textEdit4.Text = ClassicRPC.NCall(NewNatives.STAT_GET_DATE, Hash(dbgrDate_E_Stat.Text), 0x10030000, 7, 3) == 1 ? "Date - Stat Query Successful!" : "Date - Stat Query Failed...";

            dbgrDate_E_Year.Text = PS3.Extension.ReadInt32(0x10030000).ToString();
            dbgrDate_E_Month.Text = PS3.Extension.ReadInt32(0x10030000 + 4).ToString();
            dbgrDate_E_Day.Text = PS3.Extension.ReadInt32(0x10030000 + 8).ToString();
            dbgrDate_E_Hour.Text = PS3.Extension.ReadInt32(0x10030000 + 12).ToString();
            dbgrDate_E_Minute.Text = PS3.Extension.ReadInt32(0x10030000 + 16).ToString();
            dbgrDate_E_Second.Text = PS3.Extension.ReadInt32(0x10030000 + 20).ToString();

            textEdit5.Text = ClassicRPC.NCall(NewNatives.STAT_GET_POS, Hash(dbgrPos_E_Stat.Text), 0x10030000, 0x10030000 + 4, 0x10030000 + 8, 0) == 1 ? "Position - Stat Query Successful!" : " Position - Stat Query Failed...";
            dbgrPos_E_X.Text = PS3.Extension.ReadFloat(0x10030000).ToString();
            dbgrPos_E_Y.Text = PS3.Extension.ReadFloat(0x10030000 + 4).ToString();
            dbgrPos_E_Z.Text = PS3.Extension.ReadFloat(0x10030000 + 8).ToString();
        }

        private void simpleButton54_Click(object sender, EventArgs e)
        {
            switch (sdE_t.Text)
            {
                case "int":
                    if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash(sdE_s.Text), Convert.ToInt32(sdE_v.Text), 1)))
                        textEdit3.Text = "Generic - Stat Query Successful!";
                    else textEdit3.Text = "Generic - Stat Query Failed...";
                    break;
                case "s64":
                    if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash(sdE_s.Text), Convert.ToInt64(sdE_v.Text), 1)))
                        textEdit3.Text = "Generic - Stat Query Successful!";
                    else textEdit3.Text = "Generic - Stat Query Failed...";
                    break;
                case "u8":
                case "u16":
                case "u32":
                    if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash(sdE_s.Text), Convert.ToUInt32(sdE_v.Text), 1)))
                        textEdit3.Text = "Generic - Stat Query Successful!";
                    else textEdit3.Text = "Generic - Stat Query Failed...";
                    break;
                case "u64":
                    if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_SET_INT, Hash(sdE_s.Text), Convert.ToUInt64(sdE_v.Text), 1)))
                        textEdit3.Text = "Generic - Stat Query Successful!";
                    else textEdit3.Text = "Generic - Stat Query Failed...";
                    break;
                case "bool":
                    if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_SET_BOOL, Hash(sdE_s.Text), Convert.ToInt32(sdE_v.Text), 1)))
                        textEdit3.Text = "Generic - Stat Query Successful!";
                    else textEdit3.Text = "Generic - Stat Query Failed...";
                    break;
                case "float":
                    if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_SET_FLOAT, Hash(sdE_s.Text), float.Parse((sdE_v.Text)), 1)))
                        textEdit3.Text = "Generic - Stat Query Successful!";
                    else textEdit3.Text = "Generic - Stat Query Failed...";
                    break;
                case "string":
                    if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_SET_STRING, Hash(sdE_s.Text), sdE_v.Text, 1)))
                        textEdit3.Text = "Generic - Stat Query Successful!";
                    else textEdit3.Text = "Generic - Stat Query Failed...";
                    break;
                case "userid":
                    if (Convert.ToBoolean(ClassicRPC.NCall(NewNatives.STAT_SET_USER_ID, Hash(sdE_s.Text), sdE_v.Text, 1)))
                        textEdit3.Text = "Generic - Stat Query Successful!";
                    else textEdit3.Text = "Generic - Stat Query Failed...";
                    break;
            }
        }

        private void simpleButton56_Click(object sender, EventArgs e)
        {
            textEdit5.Text = ClassicRPC.NCall(NewNatives.STAT_SET_POS, Hash(dbgrPos_E_Stat.Text), float.Parse(dbgrPos_E_X.Text), float.Parse(dbgrPos_E_Y.Text), float.Parse(dbgrPos_E_Z.Text), 1) == 1 ? "Position - Stat Query Successful!" : "Position - Stat Query Failed...";
        }

        private void simpleButton55_Click(object sender, EventArgs e)
        {
            uint date = DateStruct_2_Memory(
                Convert.ToInt32(dbgrDate_E_Year.Text),
                Convert.ToInt32(dbgrDate_E_Month.Text),
                Convert.ToInt32(dbgrDate_E_Day.Text),
                Convert.ToInt32(dbgrDate_E_Hour.Text),
                Convert.ToInt32(dbgrDate_E_Minute.Text),
                Convert.ToInt32(dbgrDate_E_Second.Text),
                0
                );
            textEdit4.Text = ClassicRPC.NCall(NewNatives.STAT_SET_DATE, Hash(dbgrDate_E_Stat.Text), date, 7, 1) == 1 ? "Date - Stat Query Successful!" : "Date - Stat Query Failed...";
        }

        private void simpleButton102_Click(object sender, EventArgs e)
        {
            if (Attached)
            {
                if (textEdit6.Text.Length < 5)
                {
                    PS3.Extension.WriteString(CT, textEdit6.Text);
                    PS3.Extension.WriteString(CT2, textEdit6.Text);
                    PS3.Extension.WriteString(CT3, textEdit6.Text);
                    PS3.Extension.WriteString(CT4, textEdit6.Text);
                    PS3.Extension.WriteString(CT5, textEdit6.Text);
                }
                else
                {
                    XtraMessageBox.Show("Crew Tag must be 4 Characters Max!", "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            else
            {
                XtraMessageBox.Show("You must be Connected to do this!", "Error :( ", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void simpleButton100_Click(object sender, EventArgs e)
        {
            if (Attached)
            {
                PsnNameSet = returnName();
                PS3.Extension.WriteBytes(YS, new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
                PS3.Extension.WriteBytes(TS, new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
                PS3.Extension.WriteString(YS, textEdit8.Text);
                PS3.Extension.WriteString(TS, textEdit8.Text);
                XtraMessageBox.Show("To Make your Name visible to the other players, you need to change Lobby.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
            else
            {
                XtraMessageBox.Show("You must be Connected to do this!", "Error :( ", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void simpleButton88_Click(object sender, EventArgs e)
        {
            if (Attached)
            {
                PS3.Extension.WriteBytes(YS, new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
                PS3.Extension.WriteBytes(TS, new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
                if (PsnNameSet == "")
                {
                    textEdit8.Text = labelControl12.Text;
                    PS3.Extension.WriteString(YS, labelControl12.Text);
                    PS3.Extension.WriteString(TS, labelControl12.Text);
                }
                else
                {
                    PS3.Extension.WriteString(YS, PsnNameSet);
                    PS3.Extension.WriteString(TS, PsnNameSet);
                }

                XtraMessageBox.Show("To Make your Name visible to the other players, you need to change Lobby.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
            else
            {
                XtraMessageBox.Show("You must be Connected to do this!", "Error :( ", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void simpleButton101_Click(object sender, EventArgs e)
        {
            if (Attached)
            {
                PS3.Extension.WriteString(CN, textEdit7.Text);
                PS3.Extension.WriteString(CN2, textEdit7.Text);
            }
            else
            {
                XtraMessageBox.Show("You must be Connected to do this!", "Error :( ", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void simpleButton108_Click(object sender, EventArgs e)
        {
            int Me = PLAYER_PED_ID();

            if (comboBoxEdit32.SelectedIndex != 0)
            {
                Functions.RPCFunc.TASK_START_SCENARIO_IN_PLACE(Me, comboBoxEdit32.Text);
            }
            else if (comboBoxEdit32.SelectedIndex == 0)
            {
                CLEAR_PED_TASKS_IMMEDIATLY(Me);
            }
        }

        private void simpleButton79_Click(object sender, EventArgs e)
        {
            if (comboBoxEdit34.SelectedIndex != 0)
            {
                Functions.RPCFunc.REQUEST_CUTSCENE(comboBoxEdit34.Text);

                if (Functions.RPCFunc.HAS_CUTSCENE_LOADED() != 0)
                {
                    Functions.RPCFunc.START_CUTSCENE(comboBoxEdit34.Text);
                }
            }
            else
                if (comboBoxEdit34.SelectedIndex == 0)
            {
                Functions.RPCFunc.STOP_CUTSCENE_IMMEDIATELY();
            }
        }

        private void simpleButton134_Click(object sender, EventArgs e)
        {
            if (comboBoxEdit35.SelectedIndex == 0)
            {
                CLEAR_PED_TASKS_IMMEDIATLY(PLAYER_PED_ID());
            }
            else if (comboBoxEdit35.SelectedIndex == 1)
            {
                Functions.RPCFunc.TASK_PLAY_ANIMATION(PLAYER_PED_ID(), "rcmpaparazzo_2", "shag_loop_poppy");
            }
            else if (comboBoxEdit35.SelectedIndex == 2)
            {
                Functions.RPCFunc.TASK_PLAY_ANIMATION(PLAYER_PED_ID(), "rcmpaparazzo_2", "shag_loop_a");
            }
            else if (comboBoxEdit35.SelectedIndex == 3)
            {
                Functions.RPCFunc.TASK_PLAY_ANIMATION(PLAYER_PED_ID(), "mini@strip_club@private_dance@part1", "priv_dance_p1");
            }
            else if (comboBoxEdit35.SelectedIndex == 4)
            {
                Functions.RPCFunc.TASK_PLAY_ANIMATION(PLAYER_PED_ID(), "mini@strip_club@pole_dance@pole_dance1", "pd_dance_01");
            }
            else if (comboBoxEdit35.SelectedIndex == 5)
            {
                Functions.RPCFunc.TASK_PLAY_ANIMATION(PLAYER_PED_ID(), "amb@world_human_push_ups@male@base", "base");
            }
            else if (comboBoxEdit35.SelectedIndex == 6)
            {
                Functions.RPCFunc.TASK_PLAY_ANIMATION(PLAYER_PED_ID(), "amb@world_human_sit_ups@male@base", "base");
            }
            else if (comboBoxEdit35.SelectedIndex == 7)
            {
                Functions.RPCFunc.TASK_PLAY_ANIMATION(PLAYER_PED_ID(), "ODDJOBS@ASSASSINATE@VICE@SEX", "frontseat_carsex_loop_m");
            }
            else if (comboBoxEdit35.SelectedIndex == 8)
            {
                Functions.RPCFunc.TASK_PLAY_ANIMATION(PLAYER_PED_ID(), "ragdoll@human", "electrocute");
            }
            else if (comboBoxEdit35.SelectedIndex == 9)
            {
                Functions.RPCFunc.TASK_PLAY_ANIMATION(PLAYER_PED_ID(), "mp_suicide", "pistol");
            }
            else if (comboBoxEdit35.SelectedIndex == 10)
            {
                Functions.RPCFunc.TASK_PLAY_ANIMATION(PLAYER_PED_ID(), "mp_safehouseshower@male@", "male_shower_idle_b");
            }
            else if (comboBoxEdit35.SelectedIndex == 11)
            {
                Functions.RPCFunc.TASK_PLAY_ANIMATION(PLAYER_PED_ID(), "rcmfanatic1", "jogging_up");
            }
            else if (comboBoxEdit35.SelectedIndex == 12)
            {
                Functions.RPCFunc.TASK_PLAY_ANIMATION(PLAYER_PED_ID(), "random@domestic", "balcony_fight_male");
            }
            else if (comboBoxEdit35.SelectedIndex == 13)
            {
                Functions.RPCFunc.TASK_PLAY_ANIMATION(PLAYER_PED_ID(), "playidles_cold", "blow_hands");
            }
            else if (comboBoxEdit35.SelectedIndex == 14)
            {
                Functions.RPCFunc.TASK_PLAY_ANIMATION(PLAYER_PED_ID(), "creatures@rottweiler@move", "pee_right_idle");
            }
            else if (comboBoxEdit35.SelectedIndex == 15)
            {
                Functions.RPCFunc.TASK_PLAY_ANIMATION(PLAYER_PED_ID(), "missfra0_chop_find", "hump_loop_chop");
            }
        }

        private void checkButton41_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton41.Checked)
            {
                Functions.RPCFunc.SHAKE_GAMEPLAY_CAM("DRUNK_SHAKE", 4.0f);
                ClassicRPC.Call(Natives.REQUEST_ANIM_SET, "move_m@drunk@verydrunk");
                int loaded = ClassicRPC.Call(Natives.HAS_ANIM_SET_LOADED, "move_m@drunk@verydrunk");
                if (loaded != 0)
                {
                    ClassicRPC.Call(Natives.SET_PED_MOVEMENT_CLIPSET, "move_m@drunk@verydrunk", 0x3e800000);
                }
                checkButton41.Text = "Drunk Mode [ON]";
                checkButton41.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                ClassicRPC.Call(Natives.RESET_PED_MOVEMENT_CLIPSET, Functions.RPCFunc.PLAYER_PED_ID());
                Functions.RPCFunc.SHAKE_GAMEPLAY_CAM("DRUNK_SHAKE", 0f);
                checkButton41.Text = "Drunk Mode [OFF]";
                checkButton41.ResetBackColor();
            }
        }

        private void checkButton13_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton13.Checked)
            {
                Functions.RPCFunc.GiveWeapons(Functions.RPCFunc.PLAYER_PED_ID());
                checkButton13.Text = "All Weapons [ON]";
                checkButton13.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                RPCHook.Call(Natives.REMOVE_ALL_PED_WEAPONS, Functions.RPCFunc.PLAYER_PED_ID(), 1);
                checkButton13.Text = "All Weapons [OFF]";
                checkButton13.ResetBackColor();
            }
        }

        private void checkButton42_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton42.Checked)
            {
                Functions.RPCFunc.TaskSuperRunStart(true); //timer29
                checkButton42.BackColor = Color.MediumSpringGreen;
                checkButton42.Text = "Super Run [ON]";
            }
            else
            {
                Functions.RPCFunc.TaskSuperRunStart(false); //timer29
                checkButton42.ResetBackColor();
                checkButton42.Text = "Super Run [OFF]";
            }
        }

        private void checkButton28_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton28.Checked)
            {
                Functions.RPCFunc.TaskBossModeStart(true); //timer10
                checkButton28.Text = "Boss Mode [ON]";
                checkButton28.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                Functions.RPCFunc.TaskBossModeStart(false); //timer10
                checkButton28.Text = "Boss Mode [OFF]";
                checkButton28.ResetBackColor();
            }
        }

        private void checkButton40_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton40.Checked)
            {
                Functions.RPCFunc.SHAKE_GAMEPLAY_CAM("FAMILY5_DRUG_TRIP_SHAKE", 2f);
                checkButton40.Text = "Drug Mode [ON]";
                checkButton40.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                Functions.RPCFunc.SHAKE_GAMEPLAY_CAM("FAMILY5_DRUG_TRIP_SHAKE", 0f);
                checkButton40.Text = "Drug Mode [OFF]";
                checkButton40.ResetBackColor();
            }
        }

        private void checkButton5_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton5.Checked)
            {
                //SET_ENTITY_INVINCIBLE(PLAYER_PED_ID(), 1);
                ClassicRPC.Call(Natives.SET_PLAYER_INVINCIBLE, PLAYER_ID(), 1);
                checkButton5.Text = "God Mode [ON]";
                checkButton5.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                //SET_ENTITY_INVINCIBLE(PLAYER_PED_ID(), 0);
                ClassicRPC.Call(Natives.SET_PLAYER_INVINCIBLE, PLAYER_ID(), 0);
                checkButton5.Text = "God Mode [OFF]";
                checkButton5.ResetBackColor();
            }
        }

        private void checkButton19_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton19.Checked)
            {
                Functions.RPCFunc.SET_PED_INFINITE_AMMO_CLIP(PLAYER_PED_ID(), 1);
                checkButton19.Text = "Unlimited Ammo [ON]";
                checkButton19.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                Functions.RPCFunc.SET_PED_INFINITE_AMMO_CLIP(PLAYER_PED_ID(), 0);
                checkButton19.Text = "Unlimited Ammo [OFF]";
                checkButton19.ResetBackColor();
            }
        }

        private void checkButton11_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton11.Checked)
            {
                uint_9 = PS3.Extension.ReadUInt32(OffTheRadarPointer);
                uint_8 = uint_9 + 150552U;
                PS3.Extension.WriteInt32(uint_8, 5);
                timer10.Interval = 55000;
                timer10.Start();
                checkButton11.Text = "Bullshark [ON]";
                checkButton11.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                timer10.Stop();
                PS3.Extension.WriteInt32(uint_8, 5);
                PS3.Extension.WriteInt32(uint_8, 0);
                PS3.Extension.WriteInt32(uint_8, 5);
                checkButton11.Text = "Bullshark [OFF]";
                checkButton11.ResetBackColor();
            }
        }

        private void checkButton10_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton10.Checked)
            {
                Functions.RPCFunc.ENTITY_VISIBLE(Functions.RPCFunc.PLAYER_PED_ID(), false);
                checkButton10.Text = "Invisible [ON]";
                checkButton10.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                Functions.RPCFunc.ENTITY_VISIBLE(Functions.RPCFunc.PLAYER_PED_ID(), true);
                checkButton10.Text = "Invisible [OFF]";
                checkButton10.ResetBackColor();
            }
        }

        private void checkButton6_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton6.Checked)
            {
                PS3.SetMemory(0x63fa48, new byte[] { 0xef, 0xff, 0xf8, 0x2a });
                checkButton6.Text = "Super Speed [ON]";
                checkButton6.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                PS3.SetMemory(0x63fa48, new byte[] { 0xef, 0xff, 1, 50 });
                checkButton6.Text = "Super Speed [OFF]";
                checkButton6.ResetBackColor();
            }
        }

        private void checkButton7_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton7.Checked)
            {
                Tunables.idleKick();
                checkButton7.Text = "No Idle Kick [ON]";
                checkButton7.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                Tunables.idleKick();
                checkButton7.Text = "No Idle Kick [OFF]";
                checkButton7.ResetBackColor();
            }
        }

        private void checkButton18_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton18.Checked)
            {
                Functions.RPCFunc.CLEAR_WANTED_LEVEL(Functions.RPCFunc.PLAYER_PED_ID());
                Functions.RPCFunc.SET_MAX_WANTED_LEVEL(0);
                checkButton18.Text = "Never Wanted [ON]";
                checkButton18.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                Functions.RPCFunc.SET_MAX_WANTED_LEVEL(5);
                checkButton18.Text = "Never Wanted [OFF]";
                checkButton18.ResetBackColor();
            }
        }

        private void checkButton12_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton12.Checked)
            {
                int PD = PLAYER_PED_ID();
                Functions.RPCFunc.TaskDropMoneyStart(true, Functions.Addresses.PICKUP_MONEY_CASE, PD);
                checkButton12.Text = "Money Drop [ON]";
                checkButton12.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                int PD = PLAYER_PED_ID();
                Functions.RPCFunc.TaskDropMoneyStart(false, Functions.Addresses.PICKUP_MONEY_CASE, PD);
                checkButton12.Text = "Money Drop [OFF]";
                checkButton12.ResetBackColor();
            }
        }

        private void checkButton9_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton9.Checked)
            {
                int num = Functions.RPCFunc.PLAYER_PED_ID();
                Functions.RPCFunc.OHK(num, 700f);
                checkButton9.Text = "One Hit Kill [ON]";
                checkButton9.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                int num = Functions.RPCFunc.PLAYER_PED_ID();
                Functions.RPCFunc.OHK(num, 1f);
                checkButton9.Text = "One Hit Kill [OFF]";
                checkButton9.ResetBackColor();
            }
        }

        private void checkButton8_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton8.Checked)
            {
                float[] loc = Functions.RPCFunc.GET_ENTITY_COORDS(PLAYER_PED_ID());
                Functions.RPCFunc.CREATE_AMBIENT_PICKUP_ST(0x6773257d, loc, 1);
                float[] numArray2 = Functions.RPCFunc.GET_ENTITY_COORDS(PLAYER_PED_ID());
                numArray2[2] += 400f;
                Functions.RPCFunc.CREATE_AMBIENT_PICKUP_ST(0x6773257d, numArray2, 1);

                Functions.RPCFunc.TaskSuperManStart(true);
                checkButton8.Text = "SuperMan [ON]";
                checkButton8.BackColor = Color.MediumSpringGreen;
                PS3.CCAPI.Notify(PS3Lib.CCAPI.NotifyIcon.INFO, "Press R3 to Elevate, Press R1 to Fly");
            }
            else
            {
                Functions.RPCFunc.TaskSuperManStart(false);
                checkButton8.Text = "SuperMan [OFF]";
                checkButton8.ResetBackColor();
            }
        }

        private void checkButton14_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton14.Checked)
            {
                PS3.SetMemory(0x5ee9b0, new byte[] { 0x60, 0x00, 0x00, 0x00 });
                checkButton14.Text = "Super Jump [ON]";
                checkButton14.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                PS3.SetMemory(0x5ee9b0, new byte[] { 0x41, 130, 0, 0x10 });
                checkButton14.Text = "Super Jump [OFF]";
                checkButton14.ResetBackColor();
            }
        }

        private void checkButton24_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton24.Checked)
            {
                Functions.RPCFunc.SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY(1);
                Functions.RPCFunc.SET_RADIO_TO_STATION_INDEX(1);
                checkButton24.Text = "Mobile Radio [ON]";
                checkButton24.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                Functions.RPCFunc.SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY(0);
                checkButton24.Text = "Mobile Radio [OFF]";
                checkButton24.ResetBackColor();
            }
        }

        private void simpleButton91_Click(object sender, EventArgs e)
        {
            int PED = Functions.RPCFunc.PLAYER_PED_ID();
            Functions.RPCFunc.CLEAR_PED_BLOOD_DAMAGE(PED);
            Functions.RPCFunc.RESET_PED_VISIBLE_DAMAGE(PED);
            Functions.RPCFunc.SET_ENTITY_HEALTH(PED, 237);
            ADD_ARMOUR_TO_PED(PED, 100);
        }

        private void simpleButton92_Click(object sender, EventArgs e)
        {
            Functions.RPCFunc.OVERRIDE_WEATHER(comboBoxEdit37.Text);
        }

        private void checkButton20_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton20.Checked)
            {
                Functions.RPCFunc.PED_RAGDOLL(PLAYER_PED_ID(), 0);
                Functions.RPCFunc.PED_RAGDOLL_IMPACT(PLAYER_PED_ID(), 0);
                checkButton20.Text = "No Ragdoll [ON]";
                checkButton20.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                Functions.RPCFunc.PED_RAGDOLL(PLAYER_PED_ID(), 1);
                Functions.RPCFunc.PED_RAGDOLL_IMPACT(PLAYER_PED_ID(), 1);
                checkButton20.Text = "No Ragdoll [OFF]";
                checkButton20.ResetBackColor();
            }
        }

        private void timer8_Tick(object sender, EventArgs e)
        {
            
        }

        private void simpleButton58_Click(object sender, EventArgs e)
        {
            if (Attached)
            {
                int me = PLAYER_PED_ID();
                uint currentWeapon = (uint)Functions.RPCFunc.GET_CURRENT_PED_WEAPON(me);
                if (!(currentWeapon == 2725352035 || currentWeapon == 0))
                    Functions.RPCFunc.SET_PED_WEAPON_TINT_INDEX(me, currentWeapon, comboBoxEdit93.SelectedIndex);
                else XtraMessageBox.Show("No Weapon found. Equip a weapon and then set the camo.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                XtraMessageBox.Show("You must Connect first..", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void checkButton21_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton21.Checked)
            {
                ClassicRPC.CallwHash("0xAA2A0EAF", new object[] { true });
                checkButton21.Text = "City Blackout [ON]";
                checkButton21.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                ClassicRPC.CallwHash("0xAA2A0EAF", new object[] { false });
                checkButton21.Text = "City Blackout [OFF]";
                checkButton21.ResetBackColor();
            }
        }

        private void simpleButton63_Click(object sender, EventArgs e)
        {
            GiveStars(0, comboBoxEdit36.SelectedIndex);
        }

        private void simpleButton64_Click(object sender, EventArgs e)
        {
            ClassicRPC.NCall(NewNatives.GIVE_WEAPON_TO_PED, new object[] { PLAYER_PED_ID(), Functions.Weapons.WeaponsU[comboBoxEdit38.SelectedIndex], 0x270f, 0, 1 });
        }

        private void simpleButton65_Click(object sender, EventArgs e)
        {
            ClassicRPC.NCall(NewNatives.REMOVE_WEAPON_FROM_PED, new object[] { PLAYER_PED_ID(), Functions.Weapons.WeaponsU[comboBoxEdit38.SelectedIndex] });
        }

        private void simpleButton66_Click(object sender, EventArgs e)
        {
            Functions.RPCFunc.SET_TIMECYCLE_MODIFIER(Functions.RPCFunc.Visions[comboBoxEdit39.SelectedIndex]);
        }

        private void simpleButton67_Click(object sender, EventArgs e)
        {
            ClassicRPC.Call(Natives.REQUEST_ANIM_SET, new object[] { Functions.RPCFunc.Walk[comboBoxEdit40.SelectedIndex] });
            Thread.Sleep(500);
            RPCHook.CompleteReq();
            if (ClassicRPC.Call(OLDNatives.HAS_ANIM_SET_LOADED, new object[] { Functions.RPCFunc.Walk[comboBoxEdit40.SelectedIndex] }) == 1)
            {
                ClassicRPC.Call(Natives.SET_PED_MOVEMENT_CLIPSET, new object[] { PLAYER_PED_ID(), Functions.RPCFunc.Walk[comboBoxEdit40.SelectedIndex], 0x3e800000 });
            }
        }

        private void simpleButton76_Click(object sender, EventArgs e)
        {
            if (ConnectionMethod == "CCAPI")
            {
                PS3.CCAPI.Notify(PS3Lib.CCAPI.NotifyIcon.TROPHY4, textEdit13.Text);
            }
            else
            {
                XtraMessageBox.Show("This option is for CCAPI only :(", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void simpleButton75_Click(object sender, EventArgs e)
        {
            if (File.Exists("Files/CIDs.txt"))
            {
                string list = File.ReadAllText("Files/CIDs.txt");
                if (list != "")
                    File.WriteAllText("Files/CIDs.txt", list + Environment.NewLine + textEdit1.Text);
                else
                    File.WriteAllText("Files/CIDs.txt", list + textEdit1.Text);
            }
            else
            {
                File.CreateText("Files/CIDs.txt");
                File.WriteAllText("Files/CIDs.txt", textEdit1.Text);
            }
        }

        private void comboBoxEdit33_SelectedIndexChanged(object sender, EventArgs e)
        {
            var query = from item in Locations
                        where item.Value.grouping.ToLower().Contains(comboBoxEdit33.Text.ToLower())
                        orderby item.Value.label ascending
                        select item;
            comboBoxEdit41.Properties.Items.Clear();
            foreach (KeyValuePair<double[], TpData> item in query)
            {
                comboBoxEdit41.Properties.Items.Add(item.Value.label);
            }
            comboBoxEdit41.SelectedIndex = 0;
        }

        private void simpleButton59_Click(object sender, EventArgs e)
        {
            var query = (from item in Locations
                         where item.Value.grouping.ToLower() == comboBoxEdit33.Text.ToLower() && item.Value.label.ToLower() == comboBoxEdit41.Text.ToLower()
                         select item.Key).ToArray();
            teleport(query[0]);
        }

        private void simpleButton60_Click(object sender, EventArgs e)
        {
            float[] coord = Functions.RPCFunc.GET_ENTITY_COORDS(PLAYER_PED_ID());
            textEdit10.Text = coord[0].ToString();
            textEdit11.Text = coord[1].ToString();
            textEdit12.Text = coord[2].ToString();
        }

        private void simpleButton61_Click(object sender, EventArgs e)
        {
            if (textEdit14.Text != "")
            {
                if (File.Exists("Files/Positions.xml"))
                {
                    string[] txtfile = File.ReadAllLines("Files/Positions.xml");
                    txtfile[txtfile.Length - 1] = "  <Position Name=\"" + textEdit14.Text + "\" Xcoord=\"" + textEdit10.Text + "\" Ycoord=\"" + textEdit11.Text + "\" Zcoord=\"" + textEdit12.Text + "\"></Position>";
                    Array.Resize<string>(ref txtfile, txtfile.Length + 1);
                    txtfile[txtfile.Length - 1] = "</Coords>";
                    File.WriteAllLines("Files/Positions.xml", txtfile);
                }
                else
                {
                    File.Create("Files/Positions.xml");
                    Application.DoEvents();
                    Thread.Sleep(500);

                    string[] txtfile = File.ReadAllLines("Files/Positions.xml");
                    txtfile[txtfile.Length - 1] = "  <Position Name=\"" + textEdit14.Text + "\" Xcoord=\"" + textEdit10.Text + "\" Ycoord=\"" + textEdit11.Text + "\" Zcoord=\"" + textEdit12.Text + "\"></Position>";
                    Array.Resize<string>(ref txtfile, txtfile.Length + 1);
                    txtfile[txtfile.Length - 1] = "</Coords>";
                    File.WriteAllLines("Files/Positions.xml", txtfile);
                    textEdit10.Text = "Saved !!";
                    textEdit11.Text = "Saved !!";
                    textEdit12.Text = "Saved !!";
                }
            }
            else
            {
                XtraMessageBox.Show("Enter a name for the Position first. Please do not enter a name that already exists..", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void simpleButton69_Click(object sender, EventArgs e)
        {
            XmlReader xmlr = XmlReader.Create("Files/Positions.xml");
            while (xmlr.Read())
            {
                if (((xmlr.NodeType == XmlNodeType.Element) && (xmlr.Name == "Position")) && xmlr.HasAttributes)
                {
                    Array.Resize<string>(ref PositionsN, SZCF);
                    Array.Resize<float>(ref XCF, SZCF);
                    Array.Resize<float>(ref YCF, SZCF);
                    Array.Resize<float>(ref ZCF, SZCF);
                    PositionsN[SZCF - 1] = xmlr.GetAttribute("Name");
                    XCF[SZCF - 1] = Convert.ToSingle(xmlr.GetAttribute("Xcoord"));
                    YCF[SZCF - 1] = Convert.ToSingle(xmlr.GetAttribute("Ycoord"));
                    ZCF[SZCF - 1] = Convert.ToSingle(xmlr.GetAttribute("Zcoord"));
                    SZCF++;
                }
            }
            string text = File.ReadAllText("Files/Positions.xml");
            if (text.Contains("Name"))
            {
                comboBoxEdit42.Properties.Items.Clear();
                for (int i = 0; i < PositionsN.Length; i++)
                {
                    comboBoxEdit42.Properties.Items.Add(PositionsN[i]);
                }
                comboBoxEdit42.SelectedIndex = 0;
            }
            else
            {

                comboBoxEdit42.Properties.Items.Clear();
                comboBoxEdit42.Properties.Items.Add("No Positions Saved.");
                comboBoxEdit42.SelectedIndex = 0;
            }
        }

        private void simpleButton70_Click(object sender, EventArgs e)
        {
            float[] Coord = new float[] { XCF[comboBoxEdit42.SelectedIndex], YCF[comboBoxEdit42.SelectedIndex], ZCF[comboBoxEdit42.SelectedIndex] };
            if (Functions.RPCFunc.IS_PED_IN_ANY_VEHICLE(PLAYER_PED_ID()) != 0)
            {
                int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());
                if (NewRequestNetworkControl(Veh))
                {
                    ClassicRPC.NCall(NewNatives.DO_SCREEN_FADE_OUT, 400);
                    Functions.RPCFunc.SET_ENTITY_COORDS(Functions.RPCFunc.GET_PED_VEHICLE_IS_IN(PLAYER_PED_ID()), Coord);
                    ClassicRPC.NCall(NewNatives.DO_SCREEN_FADE_IN, 400);
                }
            }
            else
            {
                ClassicRPC.NCall(NewNatives.DO_SCREEN_FADE_OUT, 400);
                Functions.RPCFunc.SET_ENTITY_COORDS(PLAYER_PED_ID(), Coord);
                ClassicRPC.NCall(NewNatives.DO_SCREEN_FADE_IN, 400);
            }
        }

        private void buttonEdit47_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            string[] strVeh = new string[listBoxControl4.Items.Count];
            for (int i = 0; i < strVeh.Length; i++)
            {
                strVeh[i] = listBoxControl4.Items[i].ToString();
            }
            string strfind = buttonEdit47.Text.ToUpper();
            int select = -1;
            if (strfind != "")
            {
                for (int i = 0; i < strVeh.Length; i++)
                {
                    if (strVeh[i].Contains(strfind))
                    {
                        select = i;
                    }
                }
            }
            if (select != -1)
            {
                listBoxControl4.SelectedIndex = select;
            }
            else
            {
                XtraMessageBox.Show("Vehicle does not exist.. :(", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void checkButton27_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton27.Checked)
            {
                GodModeVehicle(true);
                checkButton27.Text = "Semi God Mode Vehicle [ON]";
            }
            else
            {
                GodModeVehicle(false);
                checkButton27.Text = "Semi God Mode Vehicle [OFF]";
            }
        }

        private void checkButton29_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton29.Checked)
            {
                InvisibleVehicle(true);
                checkButton29.Text = "Invisible Vehicle [ON]";
            }
            else
            {
                InvisibleVehicle(false);
                checkButton29.Text = "Invisible Vehicle [OFF]";
            }
        }

        private void checkButton39_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton39.Checked)
            {
                int Me = PLAYER_PED_ID();
                if (IS_PED_IN_ANY_VEHICLE(Me) != 0)
                {
                    Functions.RPCFunc.TaskSuperManVehicleStart(true); //timer42
                    checkButton39.Text = "SuperMan Vehicle [ON]";
                    PS3.CCAPI.Notify(PS3Lib.CCAPI.NotifyIcon.INFO, "Press R3 to Elevate, Press R1 to Fly");
                }
                else
                {
                    XtraMessageBox.Show("You must be in a Vehicle, obviously..", "Information", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }
            }
            else
            {
                Functions.RPCFunc.TaskSuperManVehicleStart(false);
                checkButton39.Text = "SuperMan Vehicle [OFF]";
            }
        }

        private void checkButton26_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton26.Checked)
            {
                OpenAllDoors(true);
                checkButton26.Text = "Open All Doors [ON]";
            }
            else
            {
                OpenAllDoors(false);
                checkButton26.Text = "Open All Doors [OFF]";
            }
        }

        private void checkButton44_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton44.Checked)
            {
                Functions.RPCFunc.TaskRandomResprayStart(true); //timer11 Interval 500
                checkButton44.Text = "Random Respray [ON]";
            }
            else
            {
                Functions.RPCFunc.TaskRandomResprayStart(false);
                checkButton44.Text = "Random Respray [OFF]";
            }
        }

        private void checkButton43_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton43.Checked)
            {
                Functions.RPCFunc.TaskTireSmokeLoopStart(true); //timer12 Interval 500
                checkButton43.Text = "TireSmoke Loop [ON]";
            }
            else
            {
                Functions.RPCFunc.TaskTireSmokeLoopStart(false);
                checkButton43.Text = "TireSmoke Loop [OFF]";
            }
        }

        private void simpleButton74_Click(object sender, EventArgs e)
        {
            int Me = PLAYER_PED_ID();
            int VehIn = GET_VEHICLE_PED_IS_IN(Me);

            if (NETWORK_REQUEST_CONTROL_OF_ENTITY(VehIn) != 0)
            {
                float[] Force = { 0, 0, 90 }, Position = { 0, 0, 0 };
                Functions.RPCFunc.APPLY_FORCE_TO_ENTITY(VehIn, Force, Position);
            }
        }

        private void simpleButton115_Click(object sender, EventArgs e)
        {
            RandomResprayVehicle();
        }

        private void simpleButton124_Click(object sender, EventArgs e)
        {
            MaxUpgradesVehicle();
        }

        private void simpleButton125_Click(object sender, EventArgs e)
        {
            DowngradeVehicle();
        }

        private void simpleButton117_Click(object sender, EventArgs e)
        {
            BoostVehicle();
        }

        private void simpleButton118_Click(object sender, EventArgs e)
        {
            BackwardBoostVehicle();
        }

        private void simpleButton116_Click(object sender, EventArgs e)
        {
            FixVehicle();
        }

        private static byte[] returnVehcileBuffer(uint hash)
        {
            return BitConverter.GetBytes(hash).Reverse<byte>().ToArray();
        }

        private void simpleButton83_Click(object sender, EventArgs e)
        {
            if (IS_PED_IN_ANY_VEHICLE(PLAYER_PED_ID()) == 1)
            {
                splashScreenManager2.ShowWaitForm();
                int Me = PLAYER_PED_ID();
                int VehIn = GET_VEHICLE_PED_IS_IN(Me);
                byte[] array = returnVehcileBuffer(Hash(Functions.RPCFunc.GET_VEH_NAME(VehIn)));
                uint offs = Functions.RPCFunc.FindOffset(0x411edca4, 0x889680, new byte[] { 0x5d, 10, 0xac, 0x8f }, 0);
                uint CurrentVeh = Functions.RPCFunc.FindOffset(offs, 0x75300, array, 0);
                byte[] buffer = new byte[] { 0x48, 0xF4, 0x24, 0x00, 0x3A, 0x23, 0x0D, 0xB6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x99, 0x99, 0x9A, 0x3F, 0x99, 0x99, 0x9A, 0x3F, 0xCC, 0xCC, 0xCD, 0x3F, 0x99, 0x99, 0x9A, 0x42, 0xAA, 0x00, 0x00, 0x3F, 0x96, 0x96, 0x97, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x3F, 0xA6, 0x66, 0x66, 0x3F, 0xCC, 0xCC, 0xCD, 0x3F, 0xCC, 0xCC, 0xCD, 0x40, 0xAD, 0xC2, 0x8F, 0x42, 0xF0, 0x00, 0x02, 0x42, 0xC8, 0x00, 0x01, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x8C, 0xCC, 0xCD, 0x3F, 0x66, 0x66, 0x66, 0x3F, 0x99, 0x99, 0x9A, 0x3F, 0x8C, 0xBE, 0x4C, 0x3F, 0x68, 0xD2, 0x2A, 0x3F, 0x66, 0x66, 0x66, 0x3F, 0x8E, 0x38, 0xE4, 0x3F, 0xB3, 0x33, 0x33, 0x4C, 0xBE, 0xBC, 0x20, 0x3E, 0xC9, 0x0F, 0xDB, 0x40, 0x22, 0xF9, 0x83, 0x3E, 0x19, 0x99, 0x9A, 0x40, 0xD5, 0x55, 0x55, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x3E, 0x38, 0x51, 0xEB, 0x3E, 0x8F, 0x5C, 0x29, 0x3D, 0xCC, 0xCC, 0xCD, 0xBE, 0x23, 0xD7, 0x0A, 0xBC, 0xA3, 0xD7, 0x0A, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x3F, 0x70, 0xA3, 0xD7, 0x3F, 0x87, 0xAE, 0x14, 0x3E, 0x4C, 0xCC, 0xCD, 0x3E, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x82, 0x00, 0x00, 0x40, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3D, 0xCC, 0xCC, 0xCD, 0x00, 0x02, 0x49, 0xF0, 0x44, 0x00, 0x10, 0x00, 0x00, 0x44, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC7, 0xB2, 0xC3, 0xC0, 0x6E, 0x3C, 0x5C, 0x6B };
                PS3.SetMemory(CurrentVeh + 0x04, buffer);
                PS3.Extension.WriteFloat(CurrentVeh + 0x74, 5.000f);
                splashScreenManager2.CloseWaitForm();
            }
        }

        private void simpleButton73_Click(object sender, EventArgs e)
        {
            //Functions.RPCFunc.TELEPORT_TO_CLOSEST_VEHICLE();
        }

        private void checkButton49_CheckedChanged(object sender, EventArgs e)
        {
            if (comboBoxEdit43.SelectedIndex == -1)
            {
                XtraMessageBox.Show("Select a bind first..", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                if (checkButton49.Checked)
                {
                    if (comboBoxEdit43.SelectedIndex == 0)
                    {
                        checkButton49.Text = "Fix Vehicle [ON]";
                        Functions.RPCFunc.TaskBindFixVehicleStart(true, "R1"); //timer13
                    }
                    else if (comboBoxEdit43.SelectedIndex == 1)
                    {
                        checkButton49.Text = "Fix Vehicle [ON]";
                        Functions.RPCFunc.TaskBindFixVehicleStart(true, "L2"); //timer16
                    }
                    else if (comboBoxEdit43.SelectedIndex == 2)
                    {
                        checkButton49.Text = "Fix Vehicle [ON]";
                        Functions.RPCFunc.TaskBindFixVehicleStart(true, "R3"); //timer17
                    }
                    else if (comboBoxEdit43.SelectedIndex == 3)
                    {
                        checkButton49.Text = "Fix Vehicle [ON]";
                        Functions.RPCFunc.TaskBindFixVehicleStart(true, "L3"); //timer18
                    }
                    else if (comboBoxEdit43.SelectedIndex == 4)
                    {
                        checkButton49.Text = "Fix Vehicle [ON]";
                        Functions.RPCFunc.TaskBindFixVehicleStart(true, "L1");
                    }
                    else if (comboBoxEdit43.SelectedIndex == 5)
                    {
                        checkButton49.Text = "Fix Vehicle [ON]";
                        Functions.RPCFunc.TaskBindFixVehicleStart(true, "DR");
                    }
                    checkButton49.BackColor = Color.MediumSpringGreen;
                }
                else
                {
                    checkButton49.Text = "Fix Vehicle [OFF]";
                    checkButton49.ResetBackColor();
                    Functions.RPCFunc.TaskBindFixVehicleStart(false, "R1");
                }
            }
        }

        private void checkButton45_CheckedChanged(object sender, EventArgs e)
        {
            if (comboBoxEdit43.SelectedIndex == -1)
            {
                XtraMessageBox.Show("Select a bind first..", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                if (checkButton45.Checked)
                {
                    if (comboBoxEdit43.SelectedIndex == 0)
                    {
                        Functions.RPCFunc.TaskBindApplyNosVehicleStart(true, "R1"); //timer47 Interval 200
                    }
                    if (comboBoxEdit43.SelectedIndex == 1)
                    {
                        Functions.RPCFunc.TaskBindApplyNosVehicleStart(true, "L2"); //timer48 Interval 200
                    }
                    if (comboBoxEdit43.SelectedIndex == 2)
                    {
                        Functions.RPCFunc.TaskBindApplyNosVehicleStart(true, "R3"); //timer49 Interval 200
                    }
                    if (comboBoxEdit43.SelectedIndex == 3)
                    {
                        Functions.RPCFunc.TaskBindApplyNosVehicleStart(true, "L3"); //timer50 Interval 200
                    }
                    else if (comboBoxEdit43.SelectedIndex == 4)
                    {
                        Functions.RPCFunc.TaskBindApplyNosVehicleStart(true, "L1");
                    }
                    else if (comboBoxEdit43.SelectedIndex == 5)
                    {
                        Functions.RPCFunc.TaskBindApplyNosVehicleStart(true, "DR");
                    }
                    checkButton45.Text = "Apply NOS [ON]";
                    checkButton45.BackColor = Color.MediumSpringGreen;
                }
                else
                {
                    Functions.RPCFunc.TaskBindApplyNosVehicleStart(false, "R1");
                    checkButton45.Text = "Apply NOS [OFF]";
                    checkButton45.ResetBackColor();
                }
            }
        }

        private void checkButton48_CheckedChanged(object sender, EventArgs e)
        {
            if (comboBoxEdit43.SelectedIndex == -1)
            {
                XtraMessageBox.Show("Select a bind first..", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                if (checkButton48.Checked)
                {
                    if (comboBoxEdit43.SelectedIndex == 0)
                    {
                        checkButton48.Text = "Boost Vehicle [ON]";
                        Functions.RPCFunc.TaskBindForwardBoostVehicleStart(true, "R1"); //timer19
                    }
                    else if (comboBoxEdit43.SelectedIndex == 1)
                    {
                        checkButton48.Text = "Boost Vehicle [ON]";
                        Functions.RPCFunc.TaskBindForwardBoostVehicleStart(true, "L2"); //timer20
                    }
                    else if (comboBoxEdit43.SelectedIndex == 2)
                    {
                        checkButton48.Text = "Boost Vehicle [ON]";
                        Functions.RPCFunc.TaskBindForwardBoostVehicleStart(true, "R3"); //timer21
                    }
                    else if (comboBoxEdit43.SelectedIndex == 3)
                    {
                        checkButton48.Text = "Boost Vehicle [ON]";
                        Functions.RPCFunc.TaskBindForwardBoostVehicleStart(true, "L3"); //tmer22
                    }
                    else if (comboBoxEdit43.SelectedIndex == 4)
                    {
                        checkButton48.Text = "Boost Vehicle [ON]";
                        Functions.RPCFunc.TaskBindForwardBoostVehicleStart(true, "L1");
                    }
                    else if (comboBoxEdit43.SelectedIndex == 5)
                    {
                        checkButton48.Text = "Boost Vehicle [ON]";
                        Functions.RPCFunc.TaskBindForwardBoostVehicleStart(true, "DR");
                    }
                    checkButton48.BackColor = Color.MediumSpringGreen;
                }
                else
                {
                    checkButton48.Text = "Boost Vehicle [OFF]";
                    checkButton48.ResetBackColor();
                    Functions.RPCFunc.TaskBindForwardBoostVehicleStart(false, "R1");
                }
            }
        }

        private void checkButton46_CheckedChanged(object sender, EventArgs e)
        {
            if (comboBoxEdit43.SelectedIndex == -1)
            {
                XtraMessageBox.Show("Select a bind first..", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                if (checkButton46.Checked)
                {
                    if (comboBoxEdit43.SelectedIndex == 0)
                    {
                        checkButton46.Text = "Backward Boost Vehicle [ON]";
                        Functions.RPCFunc.TaskBindBackwardBoostVehicleStart(true, "R1"); //timer23
                    }
                    else if (comboBoxEdit43.SelectedIndex == 1)
                    {
                        checkButton46.Text = "Backward Boost Vehicle [ON]";
                        Functions.RPCFunc.TaskBindBackwardBoostVehicleStart(true, "L2"); //timer24
                    }
                    else if (comboBoxEdit43.SelectedIndex == 2)
                    {
                        checkButton46.Text = "Backward Boost Vehicle [ON]";
                        Functions.RPCFunc.TaskBindBackwardBoostVehicleStart(true, "R3"); //timer25
                    }
                    else if (comboBoxEdit43.SelectedIndex == 3)
                    {
                        checkButton46.Text = "Backward Boost Vehicle [ON]";
                        Functions.RPCFunc.TaskBindBackwardBoostVehicleStart(true, "L3"); //timer26
                    }
                    else if (comboBoxEdit43.SelectedIndex == 4)
                    {
                        checkButton46.Text = "Backward Boost Vehicle [ON]";
                        Functions.RPCFunc.TaskBindBackwardBoostVehicleStart(true, "L1");
                    }
                    else if (comboBoxEdit43.SelectedIndex == 5)
                    {
                        checkButton46.Text = "Backward Boost Vehicle [ON]";
                        Functions.RPCFunc.TaskBindBackwardBoostVehicleStart(true, "DR");
                    }
                    checkButton46.BackColor = Color.MediumSpringGreen;
                }
                else
                {
                    checkButton46.Text = "Backward Boost Vehicle [OFF]";
                    checkButton46.ResetBackColor();
                    Functions.RPCFunc.TaskBindBackwardBoostVehicleStart(false, "R1");
                }
            }
        }

        private void checkButton47_CheckedChanged(object sender, EventArgs e)
        {
            if (comboBoxEdit43.SelectedIndex == -1)
            {
                XtraMessageBox.Show("Select a bind first..", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                if (checkButton47.Checked)
                {
                    if (comboBoxEdit43.SelectedIndex == 0)
                    {
                        Functions.RPCFunc.TaskBindJumpCarStart(true, "R1"); //timer47 Interval 200
                    }
                    if (comboBoxEdit43.SelectedIndex == 1)
                    {
                        Functions.RPCFunc.TaskBindJumpCarStart(true, "L2"); //timer48 Interval 200
                    }
                    if (comboBoxEdit43.SelectedIndex == 2)
                    {
                        Functions.RPCFunc.TaskBindJumpCarStart(true, "R3"); //timer49 Interval 200
                    }
                    if (comboBoxEdit43.SelectedIndex == 3)
                    {
                        Functions.RPCFunc.TaskBindJumpCarStart(true, "L3"); //timer50 Interval 200
                    }
                    else if (comboBoxEdit43.SelectedIndex == 4)
                    {
                        Functions.RPCFunc.TaskBindJumpCarStart(true, "L1");
                    }
                    else if (comboBoxEdit43.SelectedIndex == 5)
                    {
                        Functions.RPCFunc.TaskBindJumpCarStart(true, "DR");
                    }
                    checkButton47.Text = "Car Jump [ON]";
                    checkButton47.BackColor = Color.MediumSpringGreen;
                }
                else
                {
                    Functions.RPCFunc.TaskBindJumpCarStart(false, "R1");
                    checkButton47.Text = "Car Jump [OFF]";
                    checkButton47.ResetBackColor();
                }
            }
        }

        private void checkButton50_CheckedChanged(object sender, EventArgs e)
        {
            if (comboBoxEdit43.SelectedIndex == -1)
            {
                XtraMessageBox.Show("Select a bind first..", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                if (checkButton50.Checked)
                {
                    if (comboBoxEdit43.SelectedIndex == 0)
                    {
                        Functions.RPCFunc.TaskBindStopVehStart(true, "R1");
                    }
                    if (comboBoxEdit43.SelectedIndex == 1)
                    {
                        Functions.RPCFunc.TaskBindStopVehStart(true, "L2");
                    }
                    if (comboBoxEdit43.SelectedIndex == 2)
                    {
                        Functions.RPCFunc.TaskBindStopVehStart(true, "R3");
                    }
                    if (comboBoxEdit43.SelectedIndex == 3)
                    {
                        Functions.RPCFunc.TaskBindStopVehStart(true, "L3");
                    }
                    if (comboBoxEdit43.SelectedIndex == 4)
                    {
                        Functions.RPCFunc.TaskBindStopVehStart(true, "L1");
                    }
                    if (comboBoxEdit43.SelectedIndex == 5)
                    {
                        Functions.RPCFunc.TaskBindStopVehStart(true, "DR");
                    }
                    checkButton50.Text = "Stop Vehicle [ON]";
                    checkButton50.BackColor = Color.MediumSpringGreen;
                }
                else
                {
                    Functions.RPCFunc.TaskBindStopVehStart(false, "R1");
                    checkButton50.Text = "Stop Vehicle [OFF]";
                    checkButton50.ResetBackColor();
                }
            }
        }

        private void checkButton51_CheckedChanged(object sender, EventArgs e)
        {
            if (comboBoxEdit43.SelectedIndex == -1)
            {
                XtraMessageBox.Show("Select a bind first..", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                if (checkButton51.Checked)
                {
                    if (comboBoxEdit43.SelectedIndex == 0)
                    {
                        Functions.RPCFunc.TaskBindCatapultVehStart(true, "R1");
                    }
                    if (comboBoxEdit43.SelectedIndex == 1)
                    {
                        Functions.RPCFunc.TaskBindCatapultVehStart(true, "L2");
                    }
                    if (comboBoxEdit43.SelectedIndex == 2)
                    {
                        Functions.RPCFunc.TaskBindCatapultVehStart(true, "R3");
                    }
                    if (comboBoxEdit43.SelectedIndex == 3)
                    {
                        Functions.RPCFunc.TaskBindCatapultVehStart(true, "L3");
                    }
                    if (comboBoxEdit43.SelectedIndex == 4)
                    {
                        Functions.RPCFunc.TaskBindCatapultVehStart(true, "L1");
                    }
                    if (comboBoxEdit43.SelectedIndex == 5)
                    {
                        Functions.RPCFunc.TaskBindCatapultVehStart(true, "DR");
                    }
                    checkButton51.Text = "Catapult Vehicle [ON]";
                    checkButton51.BackColor = Color.MediumSpringGreen;
                }
                else
                {
                    Functions.RPCFunc.TaskBindCatapultVehStart(false, "R1");
                    checkButton51.Text = "Catapult Vehicle [OFF]";
                    checkButton51.ResetBackColor();
                }
            }
        }

        private void simpleButton77_Click(object sender, EventArgs e)
        {
            VehSpawn(listBoxControl4.Items[listBoxControl4.SelectedIndex].ToString(), checkEdit41.Checked, checkEdit45.Checked);
        }

        private void checkButton52_CheckedChanged(object sender, EventArgs e)
        {
            int PID = PLAYER_PED_ID();
            int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PID);
            if (checkButton52.Checked)
            {
                ClassicRPC.Call(Natives.SET_ENTITY_ALPHA, Veh, 55);
                checkButton52.BackColor = Color.MediumSpringGreen;
                checkButton52.Text = "Ghost Vehicle [ON]";
            }
            else
            {
                ClassicRPC.Call(Natives.RESET_ENTITY_ALPHA, Veh);
                checkButton52.ResetBackColor();
                checkButton52.Text = "Ghost Vehicle [OFF]";
            }
        }

        private void simpleButton87_Click(object sender, EventArgs e)
        {
            int PID = PLAYER_PED_ID();
            if (IS_PED_IN_ANY_VEHICLE(PID) != 0)
            {
                int VehUs = Functions.RPCFunc.GET_PED_VEHICLE_IS_IN(PID);
                float[] coords = GET_ENTITY_COORDS(VehUs);
                Owned_Explosion(PID, coords, 5);
            }
            else
            {
                int Veh = Functions.RPCFunc.GET_PLAYERS_LAST_VEHICLE(PID);

                if (Functions.RPCFunc.DOES_ENTITY_EXIST(Veh))
                {
                    float[] coords = GET_ENTITY_COORDS(Veh);
                    Thread.Sleep(500);
                    Owned_Explosion(PID, coords, 5);
                }
                else
                {
                    PS3.CCAPI.Notify(PS3Lib.CCAPI.NotifyIcon.WRONGWAY, "No Vehicle found..");
                }
            }
        }

        private void simpleButton78_Click(object sender, EventArgs e)
        {
            VehSpawn("ZENTORNO", checkEdit41.Checked, checkEdit45.Checked);
        }

        private void simpleButton80_Click(object sender, EventArgs e)
        {
            VehSpawn("T20", checkEdit41.Checked, checkEdit45.Checked);
        }

        private void simpleButton86_Click(object sender, EventArgs e)
        {
            VehSpawn("OSIRIS", checkEdit41.Checked, checkEdit45.Checked);
        }

        private void simpleButton81_Click(object sender, EventArgs e)
        {
            VehSpawn("RHINO", checkEdit41.Checked, false);
        }

        private void simpleButton82_Click(object sender, EventArgs e)
        {
            VehSpawn("LAZER", checkEdit41.Checked, checkEdit45.Checked);
        }

        private void simpleButton84_Click(object sender, EventArgs e)
        {
            VehSpawn("ANNIHLATOR", checkEdit41.Checked, checkEdit45.Checked);
        }

        private void simpleButton85_Click(object sender, EventArgs e)
        {
            VehSpawn("BUZZARD", checkEdit41.Checked, checkEdit45.Checked);
        }

        private void comboBoxEdit44_SelectedIndexChanged(object sender, EventArgs e)
        {
            int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());
            ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD_KIT, Veh, 0);

            if (comboBoxEdit44.SelectedIndex == 0)
            {
                ClassicRPC.NCall(NewNatives.REMOVE_VEHICLE_MOD, Veh, 11);
            }
            else if (comboBoxEdit44.SelectedIndex == 1)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 11, 0, 0);
            }
            else if (comboBoxEdit44.SelectedIndex == 2)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 11, 1, 0);
            }
            else if (comboBoxEdit44.SelectedIndex == 3)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 11, 2, 0);
            }
            else if (comboBoxEdit44.SelectedIndex == 4)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 11, 3, 0);
            }
        }

        private void comboBoxEdit45_SelectedIndexChanged(object sender, EventArgs e)
        {
            int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());
            ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD_KIT, Veh, 0);

            if (comboBoxEdit45.SelectedIndex == 0)
            {
                ClassicRPC.NCall(NewNatives.REMOVE_VEHICLE_MOD_KIT, Veh, 13);
            }
            else if (comboBoxEdit45.SelectedIndex == 1)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD_KIT, Veh, 13, 0, 0);
            }
            else if (comboBoxEdit45.SelectedIndex == 2)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD_KIT, Veh, 13, 1, 0);
            }
            else if (comboBoxEdit45.SelectedIndex == 3)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD_KIT, Veh, 13, 2, 0);
            }
        }

        private void comboBoxEdit46_SelectedIndexChanged(object sender, EventArgs e)
        {
            int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());
            ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD_KIT, Veh, 0);

            if (comboBoxEdit46.SelectedIndex == 0)
            {
                ClassicRPC.NCall(NewNatives.REMOVE_VEHICLE_MOD, Veh, 16);
            }
            else if (comboBoxEdit46.SelectedIndex == 1)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 16, 0, 0);
            }
            else if (comboBoxEdit46.SelectedIndex == 2)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 16, 1, 0);
            }
            else if (comboBoxEdit46.SelectedIndex == 3)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 16, 2, 0);
            }
            else if (comboBoxEdit46.SelectedIndex == 4)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 16, 3, 0);
            }
            else if (comboBoxEdit46.SelectedIndex == 5)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 16, 4, 0);
            }
        }

        private void comboBoxEdit47_SelectedIndexChanged(object sender, EventArgs e)
        {
            int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());
            ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD_KIT, Veh, 0);

            if (comboBoxEdit47.SelectedIndex == 0)
            {
                ClassicRPC.NCall(NewNatives.REMOVE_VEHICLE_MOD, Veh, 15);
            }
            else if (comboBoxEdit47.SelectedIndex == 1)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 15, 0, 0);
            }
            else if (comboBoxEdit47.SelectedIndex == 2)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 15, 1, 0);
            }
            else if (comboBoxEdit47.SelectedIndex == 3)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 15, 2, 0);
            }
            else if (comboBoxEdit47.SelectedIndex == 4)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 15, 3, 0);
            }
        }

        private void comboBoxEdit48_SelectedIndexChanged(object sender, EventArgs e)
        {
            int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());
            ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD_KIT, Veh, 0);

            if (comboBoxEdit48.SelectedIndex == 0)
            {
                ClassicRPC.NCall(NewNatives.REMOVE_VEHICLE_MOD, Veh, 1);
            }
            else if (comboBoxEdit48.SelectedIndex == 1)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 1, 0, 0);
            }
            else if (comboBoxEdit48.SelectedIndex == 2)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 1, 1, 0);
            }
            else if (comboBoxEdit48.SelectedIndex == 3)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 1, 2, 0);
            }
            else if (comboBoxEdit48.SelectedIndex == 4)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 1, 3, 0);
            }
        }

        private void comboBoxEdit49_SelectedIndexChanged(object sender, EventArgs e)
        {
            int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());
            ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD_KIT, Veh, 0);

            if (comboBoxEdit49.SelectedIndex == 0)
            {
                ClassicRPC.NCall(NewNatives.REMOVE_VEHICLE_MOD, Veh, 2);
            }
            else if (comboBoxEdit49.SelectedIndex == 1)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 2, 0, 0);
            }
            else if (comboBoxEdit49.SelectedIndex == 2)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 2, 1, 0);
            }
            else if (comboBoxEdit49.SelectedIndex == 3)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 2, 2, 0);
            }
            else if (comboBoxEdit49.SelectedIndex == 4)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 2, 3, 0);
            }
        }

        private void comboBoxEdit50_SelectedIndexChanged(object sender, EventArgs e)
        {
            int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());
            ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD_KIT, Veh, 0);

            if (comboBoxEdit50.SelectedIndex == 0)
            {
                ClassicRPC.NCall(NewNatives.REMOVE_VEHICLE_MOD, Veh, 4);
            }
            else if (comboBoxEdit50.SelectedIndex == 1)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 4, 0, 0);
            }
            else if (comboBoxEdit50.SelectedIndex == 2)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 4, 1, 0);
            }
            else if (comboBoxEdit50.SelectedIndex == 3)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 4, 2, 0);
            }
            else if (comboBoxEdit50.SelectedIndex == 4)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 4, 3, 0);
            }
            else if (comboBoxEdit50.SelectedIndex == 5)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 4, 4, 0);
            }
            else if (comboBoxEdit50.SelectedIndex == 6)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 4, 5, 0);
            }
        }

        private void comboBoxEdit52_SelectedIndexChanged(object sender, EventArgs e)
        {
            int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());
            ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD_KIT, Veh, 0);

            if (comboBoxEdit52.SelectedIndex == 0)
            {
                ClassicRPC.NCall(NewNatives.REMOVE_VEHICLE_MOD, Veh, 0);
            }
            else if (comboBoxEdit52.SelectedIndex == 1)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 0, 0, 0);
            }
            else if (comboBoxEdit52.SelectedIndex == 2)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 0, 1, 0);
            }
            else if (comboBoxEdit52.SelectedIndex == 3)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 0, 2, 0);
            }
            else if (comboBoxEdit52.SelectedIndex == 4)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 0, 3, 0);
            }
            else if (comboBoxEdit52.SelectedIndex == 5)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 0, 4, 0);
            }
            else if (comboBoxEdit52.SelectedIndex == 6)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 0, 5, 0);
            }
        }

        private void comboBoxEdit63_SelectedIndexChanged(object sender, EventArgs e)
        {
            int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());
            ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD_KIT, Veh, 0);

            if (comboBoxEdit63.SelectedIndex == 0)
            {
                ClassicRPC.NCall(NewNatives.TOGGLE_VEHICLE_MOD, Veh, 18, 0);
            }
            else if (comboBoxEdit63.SelectedIndex == 1)
            {
                ClassicRPC.NCall(NewNatives.TOGGLE_VEHICLE_MOD, Veh, 18, 1);
            }
        }

        private void comboBoxEdit62_SelectedIndexChanged(object sender, EventArgs e)
        {
            int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());
            ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD_KIT, Veh, 0);

            if (comboBoxEdit62.SelectedIndex == 0)
            {
                ClassicRPC.NCall(NewNatives.TOGGLE_VEHICLE_MOD, Veh, 20, 0);
            }
            else if (comboBoxEdit62.SelectedIndex == 1)
            {
                ClassicRPC.NCall(NewNatives.TOGGLE_VEHICLE_MOD, Veh, 20, 1);
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_TYRE_SMOKE_COLOR, Veh, 0, 0, 0xFF);
            }
            else if (comboBoxEdit62.SelectedIndex == 2)
            {
                ClassicRPC.NCall(NewNatives.TOGGLE_VEHICLE_MOD, Veh, 20, 1);
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_TYRE_SMOKE_COLOR, Veh, 0xFF, 0, 0);
            }
            else if (comboBoxEdit62.SelectedIndex == 3)
            {
                ClassicRPC.NCall(NewNatives.TOGGLE_VEHICLE_MOD, Veh, 20, 1);
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_TYRE_SMOKE_COLOR, Veh, 0, 0xFF, 0);
            }
            else if (comboBoxEdit62.SelectedIndex == 4)
            {
                ClassicRPC.NCall(NewNatives.TOGGLE_VEHICLE_MOD, Veh, 20, 1);
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_TYRE_SMOKE_COLOR, Veh, 0xFF, 0, 0xFF);
            }
        }

        private void comboBoxEdit59_SelectedIndexChanged(object sender, EventArgs e)
        {
            int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());

            ClassicRPC.NCall(NewNatives.SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX, Veh, comboBoxEdit59.SelectedIndex);
        }

        private void buttonEdit48_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            if (buttonEdit48.Text.Length < 9)
            {
                int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());
                Functions.RPCFunc.SET_VEHICLE_NUMBER_PLATE_TEXT(Veh, buttonEdit48.Text);
            }
            else
            {
                XtraMessageBox.Show("You can't set more than 8 characters.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void comboBoxEdit51_SelectedIndexChanged(object sender, EventArgs e)
        {
            comboBoxEdit65.Properties.Items.Clear();

            if (comboBoxEdit51.SelectedIndex == 0)
            {
                string[] sport = new string[] { "Stock", "Inferno", "Lozspeed Mk.V", "Diamond Cut", "Chrono", "Feroci RR", "FiftyNine", "Mercie", "Synthetic Z", "Organic Type 0", "Endo v.1", "GT One", "Duper 7", "Uzer", "GroundRide", "S Racer", "Venum", "Dash VIP", "Ice Kid", "Ruff Weld", "Wangan Master", "Super Five", "Endo v.2", "Split Six" };
                for (int i = 0; i <= (sport.Length - 1); i++)
                {
                    comboBoxEdit65.Properties.Items.Add(sport[i]);
                }
                comboBoxEdit65.SelectedIndex = 0;
            }
            else if (comboBoxEdit51.SelectedIndex == 1)
            {
                string[] muscle = new string[] { "Stock", "Classic Five", "Dukes", "Muscle Freak", "Kracka", "Azreal", "Mecha", "Black Top", "Drag SPL", "Revolver", "Classic Rod", "Fairlie", "Spooner", "Five Star", "Old School", "El Jefe", "Dodman", "Six Gun", "Mercenary" };
                for (int i = 0; i <= (muscle.Length - 1); i++)
                {
                    comboBoxEdit65.Properties.Items.Add(muscle[i]);
                }
                comboBoxEdit65.SelectedIndex = 0;
            }
            else if (comboBoxEdit51.SelectedIndex == 2)
            {
                string[] lowr = new string[] { "Stock", "Flare", "Wired", "Triple Golds", "Big Worm", "Seven Fives", "Split Six", "Fresh Mesh", "Lead Sled", "Turbine", "Super Fin", "Classic Rod", "Dollar", "Dukes", "Low Five", "Gooch" };
                for (int i = 0; i <= (lowr.Length - 1); i++)
                {
                    comboBoxEdit65.Properties.Items.Add(lowr[i]);
                }
                comboBoxEdit65.SelectedIndex = 0;
            }
            else if (comboBoxEdit51.SelectedIndex == 3)
            {
                string[] suv = new string[] { "Stock", "VIP", "Benefactor", "Cosmo", "Fagorme", "Deluxe", "Iced Out", "Cognoscenti", "LozSpeed Ten", "Extravaganzo", "Split Six", "Empowered", "Sunrise", "Dash VIP", "Cutter" };
                for (int i = 0; i <= (suv.Length - 1); i++)
                {
                    comboBoxEdit65.Properties.Items.Add(suv[i]);
                }
                comboBoxEdit65.SelectedIndex = 0;
            }
            else if (comboBoxEdit51.SelectedIndex == 4)
            {
                string[] offr = new string[] { "Stock", "Raider", "Mudslinger", "Nevis", "Cairngorm", "Amazon", "Challenger", "Dune Basher", "Five Star", "Rock Crawler", "Mil Spec Steelie" };
                for (int i = 0; i <= (offr.Length - 1); i++)
                {
                    comboBoxEdit65.Properties.Items.Add(offr[i]);
                }
                comboBoxEdit65.SelectedIndex = 0;
            }
            else if (comboBoxEdit51.SelectedIndex == 5)
            {
                string[] tuner = new string[] { "Stock", "Cosmo", "Super Mesh", "Outsider", "Rollas", "Driftmeister", "Slicer", "El Quatro", "Dubbed", "Five Star", "Slideways", "Apex", "Stanced EG", "Countersteer", "Endo v.1", "Endo v.2 Dish", "Gruppe Z", "Choku-Dori", "Chicane", "Saisoku", "Dished Eight", "Fujiwara", "Zokusha", "Battle VIII", "Rally Master" };
                for (int i = 0; i <= (tuner.Length - 1); i++)
                {
                    comboBoxEdit65.Properties.Items.Add(tuner[i]);
                }
                comboBoxEdit65.SelectedIndex = 0;
            }
            else if (comboBoxEdit51.SelectedIndex == 6)
            {
                string[] hend = new string[] { "Stock", "Shadow", "Hypher", "Blade", "Diamond ", "Supa Gee", "Chromatic Z", "Mercie Ch.Lip", "Obey RS", "GT Chrome", "Cheetah RR", "Solar", "Split Ten", "Dash VIP", "LozSpeed Ten", "Carbon Inferno", "Carbon Shadow", "Carbon Solar", "Cheetah Carbon R", "Carbon S Racer " };
                for (int i = 0; i <= (hend.Length - 1); i++)
                {
                    comboBoxEdit65.Properties.Items.Add(hend[i]);
                }
                comboBoxEdit65.SelectedIndex = 0;
            }
        }

        private void comboBoxEdit65_SelectedIndexChanged(object sender, EventArgs e)
        {
            int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());
            ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD_KIT, Veh, 0);
            ClassicRPC.NCall(NewNatives.SET_VEHICLE_WHEEL_TYPE, Veh, comboBoxEdit51.SelectedIndex);
            ClassicRPC.CompleteReq();
            ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, new object[] { Veh, 23, comboBoxEdit65.SelectedIndex });
        }

        private void comboBoxEdit58_SelectedIndexChanged(object sender, EventArgs e)
        {
            int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());
            ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD_KIT, Veh, 0);

            if (comboBoxEdit58.SelectedIndex == 0)
            {
                ClassicRPC.NCall(NewNatives.REMOVE_VEHICLE_MOD, Veh, 14);
            }
            else if (comboBoxEdit58.SelectedIndex == 1)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 2)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 1, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 3)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 2, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 4)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 3, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 5)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 4, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 6)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 5, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 7)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 6, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 8)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 7, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 9)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 8, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 10)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 9, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 11)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 10, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 12)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 11, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 13)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 12, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 14)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 13, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 15)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 14, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 16)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 15, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 17)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x10, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 18)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x11, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 19)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x12, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 20)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x13, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 21)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 20, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 22)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x14, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 23)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x15, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 24)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x16, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 25)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x17, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 26)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x18, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 27)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x19, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 28)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x1a, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 29)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x1b, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 30)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x1c, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 31)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x1d, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 32)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 30, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 33)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x1f, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 34)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x20, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 35)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x21, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 36)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x22, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 37)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x23, 0);
            }
            else if (comboBoxEdit58.SelectedIndex == 38)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x24, 0);
            }
        }

        private void comboBoxEdit53_SelectedIndexChanged(object sender, EventArgs e)
        {
            int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());
            ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD_KIT, Veh, 0);

            if (comboBoxEdit53.SelectedIndex == 0)
            {
                ClassicRPC.NCall(NewNatives.REMOVE_VEHICLE_MOD, Veh, 12);
            }
            else if (comboBoxEdit53.SelectedIndex == 1)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 12, 0, 0);
            }
            else if (comboBoxEdit53.SelectedIndex == 2)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 12, 1, 0);
            }
            else if (comboBoxEdit53.SelectedIndex == 3)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 12, 2, 0);
            }
        }

        private void comboBoxEdit54_SelectedIndexChanged(object sender, EventArgs e)
        {
            int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());
            ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD_KIT, Veh, 0);

            if (comboBoxEdit54.SelectedIndex == 0)
            {
                ClassicRPC.NCall(NewNatives.REMOVE_VEHICLE_MOD, Veh, 3);
            }
            else if (comboBoxEdit54.SelectedIndex == 1)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 3, 0, 0);
            }
            else if (comboBoxEdit54.SelectedIndex == 2)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 3, 1, 0);
            }
            else if (comboBoxEdit54.SelectedIndex == 3)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 3, 2, 0);
            }
            else if (comboBoxEdit54.SelectedIndex == 4)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 3, 3, 0);
            }
            else if (comboBoxEdit54.SelectedIndex == 5)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 3, 4, 0);
            }
            else if (comboBoxEdit54.SelectedIndex == 6)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 3, 5, 0);
            }
        }

        private void comboBoxEdit56_SelectedIndexChanged(object sender, EventArgs e)
        {
            int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());
            ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD_KIT, Veh, 0);

            if (comboBoxEdit56.SelectedIndex == 0)
            {
                ClassicRPC.NCall(NewNatives.REMOVE_VEHICLE_MOD, Veh, 7);
            }
            else if (comboBoxEdit56.SelectedIndex == 1)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 7, 0, 0);
            }
            else if (comboBoxEdit56.SelectedIndex == 2)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 7, 1, 0);
            }
            else if (comboBoxEdit56.SelectedIndex == 3)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 7, 2, 0);
            }
            else if (comboBoxEdit56.SelectedIndex == 4)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 7, 3, 0);
            }
            else if (comboBoxEdit56.SelectedIndex == 5)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 7, 4, 0);
            }
        }

        private void comboBoxEdit57_SelectedIndexChanged(object sender, EventArgs e)
        {
            int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());
            ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD_KIT, Veh, 0);

            if (comboBoxEdit57.SelectedIndex == 0)
            {
                ClassicRPC.NCall(NewNatives.REMOVE_VEHICLE_MOD, Veh, 10);
            }
            else if (comboBoxEdit57.SelectedIndex == 1)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 10, 0, 0);
            }
            else if (comboBoxEdit57.SelectedIndex == 2)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 10, 1, 0);
            }
            else if (comboBoxEdit57.SelectedIndex == 3)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 10, 2, 0);
            }
            else if (comboBoxEdit57.SelectedIndex == 4)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 10, 3, 0);
            }
            else if (comboBoxEdit57.SelectedIndex == 5)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 10, 4, 0);
            }
        }

        private void comboBoxEdit66_SelectedIndexChanged(object sender, EventArgs e)
        {
            int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());
            ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD_KIT, Veh, 0);

            if (comboBoxEdit66.SelectedIndex == 0)
            {
                ClassicRPC.NCall(NewNatives.REMOVE_VEHICLE_MOD, Veh, 5);
            }
            else if (comboBoxEdit66.SelectedIndex == 1)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 5, 0, 0);
            }
            else if (comboBoxEdit66.SelectedIndex == 2)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 5, 1, 0);
            }
            else if (comboBoxEdit66.SelectedIndex == 3)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 5, 2, 0);
            }
            else if (comboBoxEdit66.SelectedIndex == 4)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 5, 3, 0);
            }
        }

        private void comboBoxEdit67_SelectedIndexChanged(object sender, EventArgs e)
        {
            int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());
            ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD_KIT, Veh, 0);

            if (comboBoxEdit67.SelectedIndex == 0)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_WINDOW_TINT, Veh, 4);
            }
            else if (comboBoxEdit67.SelectedIndex == 1)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_WINDOW_TINT, Veh, 3);
            }
            else if (comboBoxEdit67.SelectedIndex == 2)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_WINDOW_TINT, Veh, 2);
            }
            else if (comboBoxEdit67.SelectedIndex == 3)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_WINDOW_TINT, Veh, 5);
            }
            else if (comboBoxEdit67.SelectedIndex == 4)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_WINDOW_TINT, Veh, 1);
            }
            else if (comboBoxEdit67.SelectedIndex == 5)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_WINDOW_TINT, Veh, 7);
            }
        }

        private void comboBoxEdit64_SelectedIndexChanged(object sender, EventArgs e)
        {
            int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());
            ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD_KIT, Veh, 0);

            if (comboBoxEdit64.SelectedIndex == 0)
            {
                ClassicRPC.NCall(NewNatives.TOGGLE_VEHICLE_MOD, Veh, 22, 0);
            }
            else if (comboBoxEdit64.SelectedIndex == 1)
            {
                ClassicRPC.NCall(NewNatives.TOGGLE_VEHICLE_MOD, Veh, 22, 1);
            }
        }

        private void comboBoxEdit60_SelectedIndexChanged(object sender, EventArgs e)
        {
            int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());
            ClassicRPC.NCall(NewNatives.SET_VEHICLE_COLOURS, new object[] { Veh, comboBoxEdit60.SelectedIndex, comboBoxEdit61.SelectedIndex });
        }

        private void comboBoxEdit61_SelectedIndexChanged(object sender, EventArgs e)
        {
            int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());
            ClassicRPC.NCall(NewNatives.SET_VEHICLE_COLOURS, new object[] { Veh, comboBoxEdit60.SelectedIndex, comboBoxEdit61.SelectedIndex });
        }

        private void comboBoxEdit68_SelectedIndexChanged(object sender, EventArgs e)
        {
            int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());
            ClassicRPC.NCall(NewNatives.SET_VEHICLE_EXTRA_COLOURS, new object[] { Veh, comboBoxEdit68.SelectedIndex, comboBoxEdit55.SelectedIndex });
        }

        private void comboBoxEdit55_SelectedIndexChanged(object sender, EventArgs e)
        {
            int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());
            ClassicRPC.NCall(NewNatives.SET_VEHICLE_EXTRA_COLOURS, new object[] { Veh, comboBoxEdit68.SelectedIndex, comboBoxEdit55.SelectedIndex });
        }

        private void comboBoxEdit69_SelectedIndexChanged(object sender, EventArgs e)
        {
            int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());
            ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD_KIT, Veh, 0);
            
            ClassicRPC.NCall(NewNatives.TOGGLE_VEHICLE_MOD, Veh, 5, comboBoxEdit69.SelectedIndex);
        }

        private void comboBoxEdit70_SelectedIndexChanged(object sender, EventArgs e)
        {
            int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());
            ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD_KIT, Veh, 0);

            ClassicRPC.NCall(NewNatives.TOGGLE_VEHICLE_MOD, Veh, 6, comboBoxEdit70.SelectedIndex);
        }

        private void comboBoxEdit71_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBoxEdit71.SelectedIndex == 0)
            {
                int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());
                int tyre = ClassicRPC.NCall(NewNatives.GET_VEHICLE_MOD, new object[] { Veh, 23 });
                ClassicRPC.CompleteReq();
                int tyres = ClassicRPC.NCall(NewNatives.GET_VEHICLE_MOD, new object[] { Veh, 24 });
                ClassicRPC.CompleteReq();
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, new object[] { Veh, 23, tyre, 0 });
                ClassicRPC.CompleteReq();
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, new object[] { Veh, 23, tyres, 0 });
            }
            else if (comboBoxEdit71.SelectedIndex == 1)
            {
                int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());
                int tyre = ClassicRPC.NCall(NewNatives.GET_VEHICLE_MOD, new object[] { Veh, 23 });
                ClassicRPC.CompleteReq();
                int tyres = ClassicRPC.NCall(NewNatives.GET_VEHICLE_MOD, new object[] { Veh, 24 });
                ClassicRPC.CompleteReq();
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, new object[] { Veh, 23, tyre, 1 });
                ClassicRPC.CompleteReq();
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, new object[] { Veh, 24, tyres, 1 });
            }
        }

        private void comboBoxEdit72_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBoxEdit72.SelectedIndex == 0)
            {
                int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_IN(PLAYER_PED_ID());
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_TYRE_SMOKE_COLOR, new object[] { Veh, 0, 0, 0 });
            }
            else if (comboBoxEdit72.SelectedIndex == 1)
            {
                int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_IN(PLAYER_PED_ID());
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_TYRE_SMOKE_COLOR, new object[] { Veh, -1, -1, -1 });
            }
        }

        private void simpleButton89_Click(object sender, EventArgs e)
        {
            VehSpawn(listBoxControl8.Items[listBoxControl8.SelectedIndex].ToString(), false, false);
            Application.DoEvents();
            int Veh = Functions.RPCFunc.GET_PED_VEHICLE_IS_USING(PLAYER_PED_ID());

            ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD_KIT, Veh, 0);

            if (comboBoxEdit44.SelectedIndex != -1)
            {
                if (comboBoxEdit44.SelectedIndex == 0)
                {
                    ClassicRPC.NCall(NewNatives.REMOVE_VEHICLE_MOD, Veh, 11);
                }
                else if (comboBoxEdit44.SelectedIndex == 1)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 11, 0, 0);
                }
                else if (comboBoxEdit44.SelectedIndex == 2)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 11, 1, 0);
                }
                else if (comboBoxEdit44.SelectedIndex == 3)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 11, 2, 0);
                }
                else if (comboBoxEdit44.SelectedIndex == 4)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 11, 3, 0);
                }
            }
            if (comboBoxEdit45.SelectedIndex != 0)
            {
                if (comboBoxEdit45.SelectedIndex == 0)
                {
                    ClassicRPC.NCall(NewNatives.REMOVE_VEHICLE_MOD_KIT, Veh, 13);
                }
                else if (comboBoxEdit45.SelectedIndex == 1)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD_KIT, Veh, 13, 0, 0);
                }
                else if (comboBoxEdit45.SelectedIndex == 2)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD_KIT, Veh, 13, 1, 0);
                }
                else if (comboBoxEdit45.SelectedIndex == 3)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD_KIT, Veh, 13, 2, 0);
                }
            }
            if (comboBoxEdit46.SelectedIndex != 0)
            {
                if (comboBoxEdit46.SelectedIndex == 0)
                {
                    ClassicRPC.NCall(NewNatives.REMOVE_VEHICLE_MOD, Veh, 16);
                }
                else if (comboBoxEdit46.SelectedIndex == 1)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 16, 0, 0);
                }
                else if (comboBoxEdit46.SelectedIndex == 2)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 16, 1, 0);
                }
                else if (comboBoxEdit46.SelectedIndex == 3)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 16, 2, 0);
                }
                else if (comboBoxEdit46.SelectedIndex == 4)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 16, 3, 0);
                }
                else if (comboBoxEdit46.SelectedIndex == 5)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 16, 4, 0);
                }
            }
            if (comboBoxEdit47.SelectedIndex != 0)
            {
                if (comboBoxEdit47.SelectedIndex == 0)
                {
                    ClassicRPC.NCall(NewNatives.REMOVE_VEHICLE_MOD, Veh, 15);
                }
                else if (comboBoxEdit47.SelectedIndex == 1)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 15, 0, 0);
                }
                else if (comboBoxEdit47.SelectedIndex == 2)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 15, 1, 0);
                }
                else if (comboBoxEdit47.SelectedIndex == 3)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 15, 2, 0);
                }
                else if (comboBoxEdit47.SelectedIndex == 4)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 15, 3, 0);
                }
            }
            if (comboBoxEdit48.SelectedIndex != 0)
            {
                if (comboBoxEdit48.SelectedIndex == 0)
                {
                    ClassicRPC.NCall(NewNatives.REMOVE_VEHICLE_MOD, Veh, 1);
                }
                else if (comboBoxEdit48.SelectedIndex == 1)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 1, 0, 0);
                }
                else if (comboBoxEdit48.SelectedIndex == 2)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 1, 1, 0);
                }
                else if (comboBoxEdit48.SelectedIndex == 3)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 1, 2, 0);
                }
                else if (comboBoxEdit48.SelectedIndex == 4)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 1, 3, 0);
                }
            }
            if (comboBoxEdit49.SelectedIndex != 0)
            {
                if (comboBoxEdit49.SelectedIndex == 0)
                {
                    ClassicRPC.NCall(NewNatives.REMOVE_VEHICLE_MOD, Veh, 2);
                }
                else if (comboBoxEdit49.SelectedIndex == 1)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 2, 0, 0);
                }
                else if (comboBoxEdit49.SelectedIndex == 2)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 2, 1, 0);
                }
                else if (comboBoxEdit49.SelectedIndex == 3)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 2, 2, 0);
                }
                else if (comboBoxEdit49.SelectedIndex == 4)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 2, 3, 0);
                }
            }
            if (comboBoxEdit50.SelectedIndex != 0)
            {
                if (comboBoxEdit50.SelectedIndex == 0)
                {
                    ClassicRPC.NCall(NewNatives.REMOVE_VEHICLE_MOD, Veh, 4);
                }
                else if (comboBoxEdit50.SelectedIndex == 1)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 4, 0, 0);
                }
                else if (comboBoxEdit50.SelectedIndex == 2)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 4, 1, 0);
                }
                else if (comboBoxEdit50.SelectedIndex == 3)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 4, 2, 0);
                }
                else if (comboBoxEdit50.SelectedIndex == 4)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 4, 3, 0);
                }
                else if (comboBoxEdit50.SelectedIndex == 5)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 4, 4, 0);
                }
                else if (comboBoxEdit50.SelectedIndex == 6)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 4, 5, 0);
                }
            }
            if (comboBoxEdit52.SelectedIndex != 0)
            {
                if (comboBoxEdit52.SelectedIndex == 0)
                {
                    ClassicRPC.NCall(NewNatives.REMOVE_VEHICLE_MOD, Veh, 0);
                }
                else if (comboBoxEdit52.SelectedIndex == 1)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 0, 0, 0);
                }
                else if (comboBoxEdit52.SelectedIndex == 2)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 0, 1, 0);
                }
                else if (comboBoxEdit52.SelectedIndex == 3)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 0, 2, 0);
                }
                else if (comboBoxEdit52.SelectedIndex == 4)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 0, 3, 0);
                }
                else if (comboBoxEdit52.SelectedIndex == 5)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 0, 4, 0);
                }
                else if (comboBoxEdit52.SelectedIndex == 6)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 0, 5, 0);
                }
            }
            if (comboBoxEdit53.SelectedIndex != 0)
            {
                if (comboBoxEdit53.SelectedIndex == 0)
                {
                    ClassicRPC.NCall(NewNatives.REMOVE_VEHICLE_MOD, Veh, 12);
                }
                else if (comboBoxEdit53.SelectedIndex == 1)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 12, 0, 0);
                }
                else if (comboBoxEdit53.SelectedIndex == 2)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 12, 1, 0);
                }
                else if (comboBoxEdit53.SelectedIndex == 3)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 12, 2, 0);
                }
            }
            if (comboBoxEdit54.SelectedIndex != 0)
            {
                if (comboBoxEdit54.SelectedIndex == 0)
                {
                    ClassicRPC.NCall(NewNatives.REMOVE_VEHICLE_MOD, Veh, 3);
                }
                else if (comboBoxEdit54.SelectedIndex == 1)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 3, 0, 0);
                }
                else if (comboBoxEdit54.SelectedIndex == 2)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 3, 1, 0);
                }
                else if (comboBoxEdit54.SelectedIndex == 3)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 3, 2, 0);
                }
                else if (comboBoxEdit54.SelectedIndex == 4)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 3, 3, 0);
                }
                else if (comboBoxEdit54.SelectedIndex == 5)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 3, 4, 0);
                }
                else if (comboBoxEdit54.SelectedIndex == 6)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 3, 5, 0);
                }
            }
            if (comboBoxEdit56.SelectedIndex != 0)
            {
                if (comboBoxEdit56.SelectedIndex == 0)
                {
                    ClassicRPC.NCall(NewNatives.REMOVE_VEHICLE_MOD, Veh, 7);
                }
                else if (comboBoxEdit56.SelectedIndex == 1)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 7, 0, 0);
                }
                else if (comboBoxEdit56.SelectedIndex == 2)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 7, 1, 0);
                }
                else if (comboBoxEdit56.SelectedIndex == 3)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 7, 2, 0);
                }
                else if (comboBoxEdit56.SelectedIndex == 4)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 7, 3, 0);
                }
                else if (comboBoxEdit56.SelectedIndex == 5)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 7, 4, 0);
                }
            }
            if (comboBoxEdit57.SelectedIndex != 0)
            {
                if (comboBoxEdit57.SelectedIndex == 0)
                {
                    ClassicRPC.NCall(NewNatives.REMOVE_VEHICLE_MOD, Veh, 10);
                }
                else if (comboBoxEdit57.SelectedIndex == 1)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 10, 0, 0);
                }
                else if (comboBoxEdit57.SelectedIndex == 2)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 10, 1, 0);
                }
                else if (comboBoxEdit57.SelectedIndex == 3)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 10, 2, 0);
                }
                else if (comboBoxEdit57.SelectedIndex == 4)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 10, 3, 0);
                }
                else if (comboBoxEdit57.SelectedIndex == 5)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 10, 4, 0);
                }
            }
            if (comboBoxEdit58.SelectedIndex != 0)
            {
                if (comboBoxEdit58.SelectedIndex == 0)
                {
                    ClassicRPC.NCall(NewNatives.REMOVE_VEHICLE_MOD, Veh, 14);
                }
                else if (comboBoxEdit58.SelectedIndex == 1)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 2)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 1, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 3)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 2, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 4)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 3, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 5)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 4, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 6)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 5, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 7)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 6, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 8)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 7, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 9)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 8, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 10)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 9, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 11)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 10, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 12)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 11, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 13)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 12, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 14)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 13, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 15)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 14, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 16)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 15, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 17)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x10, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 18)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x11, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 19)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x12, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 20)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x13, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 21)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 20, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 22)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x14, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 23)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x15, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 24)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x16, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 25)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x17, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 26)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x18, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 27)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x19, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 28)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x1a, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 29)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x1b, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 30)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x1c, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 31)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x1d, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 32)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 30, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 33)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x1f, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 34)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x20, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 35)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x21, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 36)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x22, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 37)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x23, 0);
                }
                else if (comboBoxEdit58.SelectedIndex == 38)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 14, 0x24, 0);
                }
            }
            if (comboBoxEdit66.SelectedIndex != 0)
            {
                if (comboBoxEdit66.SelectedIndex == 0)
                {
                    ClassicRPC.NCall(NewNatives.REMOVE_VEHICLE_MOD, Veh, 5);
                }
                else if (comboBoxEdit66.SelectedIndex == 1)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 5, 0, 0);
                }
                else if (comboBoxEdit66.SelectedIndex == 2)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 5, 1, 0);
                }
                else if (comboBoxEdit66.SelectedIndex == 3)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 5, 2, 0);
                }
                else if (comboBoxEdit66.SelectedIndex == 4)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, Veh, 5, 3, 0);
                }
            }
            if (comboBoxEdit67.SelectedIndex != 0)
            {
                if (comboBoxEdit67.SelectedIndex == 0)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_WINDOW_TINT, Veh, 4);
                }
                else if (comboBoxEdit67.SelectedIndex == 1)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_WINDOW_TINT, Veh, 3);
                }
                else if (comboBoxEdit67.SelectedIndex == 2)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_WINDOW_TINT, Veh, 2);
                }
                else if (comboBoxEdit67.SelectedIndex == 3)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_WINDOW_TINT, Veh, 5);
                }
                else if (comboBoxEdit67.SelectedIndex == 4)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_WINDOW_TINT, Veh, 1);
                }
                else if (comboBoxEdit67.SelectedIndex == 5)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_WINDOW_TINT, Veh, 7);
                }
            }
            if (comboBoxEdit64.SelectedIndex != 0)
            {
                if (comboBoxEdit64.SelectedIndex == 0)
                {
                    ClassicRPC.NCall(NewNatives.TOGGLE_VEHICLE_MOD, Veh, 22, 0);
                }
                else if (comboBoxEdit64.SelectedIndex == 1)
                {
                    ClassicRPC.NCall(NewNatives.TOGGLE_VEHICLE_MOD, Veh, 22, 1);
                }
            }
            if (comboBoxEdit63.SelectedIndex != 0)
            {
                if (comboBoxEdit63.SelectedIndex == 0)
                {
                    ClassicRPC.NCall(NewNatives.TOGGLE_VEHICLE_MOD, Veh, 18, 0);
                }
                else if (comboBoxEdit63.SelectedIndex == 1)
                {
                    ClassicRPC.NCall(NewNatives.TOGGLE_VEHICLE_MOD, Veh, 18, 1);
                }
            }
            if (comboBoxEdit62.SelectedIndex != 0)
            {
                if (comboBoxEdit62.SelectedIndex == 0)
                {
                    ClassicRPC.NCall(NewNatives.TOGGLE_VEHICLE_MOD, Veh, 20, 0);
                }
                else if (comboBoxEdit62.SelectedIndex == 1)
                {
                    ClassicRPC.NCall(NewNatives.TOGGLE_VEHICLE_MOD, Veh, 20, 1);
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_TYRE_SMOKE_COLOR, Veh, 0, 0, 0xFF);
                }
                else if (comboBoxEdit62.SelectedIndex == 2)
                {
                    ClassicRPC.NCall(NewNatives.TOGGLE_VEHICLE_MOD, Veh, 20, 1);
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_TYRE_SMOKE_COLOR, Veh, 0xFF, 0, 0);
                }
                else if (comboBoxEdit62.SelectedIndex == 3)
                {
                    ClassicRPC.NCall(NewNatives.TOGGLE_VEHICLE_MOD, Veh, 20, 1);
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_TYRE_SMOKE_COLOR, Veh, 0, 0xFF, 0);
                }
                else if (comboBoxEdit62.SelectedIndex == 4)
                {
                    ClassicRPC.NCall(NewNatives.TOGGLE_VEHICLE_MOD, Veh, 20, 1);
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_TYRE_SMOKE_COLOR, Veh, 0xFF, 0, 0xFF);
                }
            }
            if (comboBoxEdit69.SelectedIndex != 0)
            {
                ClassicRPC.NCall(NewNatives.TOGGLE_VEHICLE_MOD, Veh, 5, comboBoxEdit69.SelectedIndex);
            }
            if (comboBoxEdit70.SelectedIndex != 0)
            {
                ClassicRPC.NCall(NewNatives.TOGGLE_VEHICLE_MOD, Veh, 6, comboBoxEdit70.SelectedIndex);
            }
            if (comboBoxEdit59.SelectedIndex != 0)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX, Veh, comboBoxEdit59.SelectedIndex);
            }
            if (comboBoxEdit71.SelectedIndex != 0)
            {
                if (comboBoxEdit71.SelectedIndex == 0)
                {
                    int tyre = ClassicRPC.NCall(NewNatives.GET_VEHICLE_MOD, new object[] { Veh, 23 });
                    ClassicRPC.CompleteReq();
                    int tyres = ClassicRPC.NCall(NewNatives.GET_VEHICLE_MOD, new object[] { Veh, 24 });
                    ClassicRPC.CompleteReq();
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, new object[] { Veh, 23, tyre, 0 });
                    ClassicRPC.CompleteReq();
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, new object[] { Veh, 23, tyres, 0 });
                }
                else if (comboBoxEdit71.SelectedIndex == 1)
                {
                    int tyre = ClassicRPC.NCall(NewNatives.GET_VEHICLE_MOD, new object[] { Veh, 23 });
                    ClassicRPC.CompleteReq();
                    int tyres = ClassicRPC.NCall(NewNatives.GET_VEHICLE_MOD, new object[] { Veh, 24 });
                    ClassicRPC.CompleteReq();
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, new object[] { Veh, 23, tyre, 1 });
                    ClassicRPC.CompleteReq();
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, new object[] { Veh, 23, tyres, 1 });
                }
            }
            if (comboBoxEdit72.SelectedIndex != 0)
            {
                if (comboBoxEdit72.SelectedIndex == 0)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_TYRE_SMOKE_COLOR, new object[] { Veh, 0, 0, 0 });
                }
                else if (comboBoxEdit72.SelectedIndex == 1)
                {
                    ClassicRPC.NCall(NewNatives.SET_VEHICLE_TYRE_SMOKE_COLOR, new object[] { Veh, -1, -1, -1 });
                }
            }
            if (comboBoxEdit65.SelectedIndex != 0)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD_KIT, Veh, 0);
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_WHEEL_TYPE, Veh, comboBoxEdit51.SelectedIndex);
                ClassicRPC.CompleteReq();
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_MOD, new object[] { Veh, 23, comboBoxEdit65.SelectedIndex });
            }
            if (comboBoxEdit60.SelectedIndex != 0)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_COLOURS, new object[] { Veh, comboBoxEdit60.SelectedIndex, comboBoxEdit61.SelectedIndex });
            }
            if (comboBoxEdit61.SelectedIndex != 0)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_COLOURS, new object[] { Veh, comboBoxEdit60.SelectedIndex, comboBoxEdit61.SelectedIndex });
            }
            if (comboBoxEdit68.SelectedIndex != 0)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_EXTRA_COLOURS, new object[] { Veh, comboBoxEdit68.SelectedIndex, comboBoxEdit55.SelectedIndex });
            }
            if (comboBoxEdit55.SelectedIndex != 0)
            {
                ClassicRPC.NCall(NewNatives.SET_VEHICLE_EXTRA_COLOURS, new object[] { Veh, comboBoxEdit68.SelectedIndex, comboBoxEdit55.SelectedIndex });
            }
            if (buttonEdit48.Text != "" && buttonEdit48.Text.Length < 9)
            {
                Functions.RPCFunc.SET_VEHICLE_NUMBER_PLATE_TEXT(Veh, buttonEdit48.Text);
            }
        }

        private void simpleButton62_Click(object sender, EventArgs e)
        {
            float xc = float.Parse(textEdit10.Text);
            float yc = float.Parse(textEdit11.Text);
            float zc = float.Parse(textEdit12.Text);
            float[] Coords = new float[] { xc, yc, zc };
            int PID = PLAYER_PED_ID();

            if (IS_PED_IN_ANY_VEHICLE(PLAYER_PED_ID()) != 0)
            {
                Functions.RPCFunc.SET_ENTITY_COORDS(Functions.RPCFunc.GET_PED_VEHICLE_IS_IN(PID), Coords);
            }
            else
            {
                Functions.RPCFunc.SET_ENTITY_COORDS(PID, Coords);
            }
        }

        private void comboBoxEdit73_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBoxEdit73.Text == "Blue")
            {
                PS3.SetMemory(0x1D62B85, new byte[] { 0x0F, 0x9D, 0xE8 });
            }
            if (comboBoxEdit73.Text == "Green")
            {
                PS3.SetMemory(0x1D62B85, new byte[] { 0x3A, 0x89, 0x23 });
            }
            if (comboBoxEdit73.Text == "Red")
            {
                PS3.SetMemory(0x1D62B85, new byte[] { 0xEE, 0x10, 0x10 });
            }
            if (comboBoxEdit73.Text == "Orange")
            {
                PS3.SetMemory(0x1D62B85, new byte[] { 0xDF, 0x6D, 0x14 });
            }
            if (comboBoxEdit73.Text == "Violet")
            {
                PS3.SetMemory(0x1D62B85, new byte[] { 0x79, 0x1C, 0xF8 });
            }
            if (comboBoxEdit73.Text == "Pink")
            {
                PS3.SetMemory(0x1D62B85, new byte[] { 0xFD, 0x3F, 0x92 });
            }
            if (comboBoxEdit73.Text == "Yellow")
            {
                PS3.SetMemory(0x1D62B85, new byte[] { 0xE7, 0xF0, 0x0D });
            }
            if (comboBoxEdit73.Text == "Brown")
            {
                PS3.SetMemory(0x1D62B85, new byte[] { 0xAD, 0x4F, 0x09 });
            }
        }

        private void comboBoxEdit77_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBoxEdit77.Text == "Blue")
            {
                PS3.SetMemory(0x1D62B85 -  452, Functions.RPCFunc.AllHUDBlue);
            }
            if (comboBoxEdit77.Text == "Green")
            {
                PS3.SetMemory(0x1D62B85 -  452, Functions.RPCFunc.AllHUDGreen);
            }
            if (comboBoxEdit77.Text == "Red")
            {
                PS3.SetMemory(0x1D62B85 -  452, Functions.RPCFunc.AllHUDRed);
            }
            if (comboBoxEdit77.Text == "Orange")
            {
                PS3.SetMemory(0x1D62B85 -  452, Functions.RPCFunc.AllHUDOrange);
            }
            if (comboBoxEdit77.Text == "Violet")
            {
                PS3.SetMemory(0x1D62B85 -  452, Functions.RPCFunc.AllHUDPurple);
            }
            if (comboBoxEdit77.Text == "Pink")
            {
                PS3.SetMemory(0x1D62B85 -  452, Functions.RPCFunc.AllHUDPink);
            }
            if (comboBoxEdit77.Text == "Yellow")
            {
                PS3.SetMemory(0x1D62B85 -  452, Functions.RPCFunc.AllHUDYellow);
            }
            if (comboBoxEdit77.Text == "Brown")
            {
                PS3.SetMemory(0x1D62B85 -  452, Functions.RPCFunc.AllHUDBrown);
            }
            if (comboBoxEdit77.Text == "Reset")
            {
                PS3.SetMemory(0x1D62B85 - 452, Functions.RPCFunc.AllHUDNormal);
            }
        }

        private void comboBoxEdit74_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBoxEdit74.Text == "Reset")
            {
                PS3.SetMemory(0x498B30, new byte[] { 0x3B, 0x80, 0x80, 0x81 });
            }
            if (comboBoxEdit74.Text == "Black")
            {
                PS3.SetMemory(0x498B30, new byte[] { 0xFF, 0x80, 0x80, 0x81 });
            }
            if (comboBoxEdit74.Text == "White")
            {
                PS3.SetMemory(0x498B30, new byte[] { 0x3F, 0x80, 0x80, 0x81 });
            }
        }

        private void comboBoxEdit75_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBoxEdit75.Text == "Reset")
            {
                PS3.SetMemory(0x210BF34, new byte[] { 0x32, 0x00, 0x00 });
            }
            if (comboBoxEdit75.Text == "Yellow")
            {
                PS3.SetMemory(0x210BF34, new byte[] { 0x33, 0xFF, 0x00 });
            }
            if (comboBoxEdit75.Text == "Blue")
            {
                PS3.SetMemory(0x210BF34, new byte[] { 0x33, 0x00, 0xFF });
            }
            if (comboBoxEdit75.Text == "Pink")
            {
                PS3.SetMemory(0x210BF34, new byte[] { 0xCC, 0x00, 0xCC });
            }
            if (comboBoxEdit75.Text == "Green")
            {
                PS3.SetMemory(0x210BF34, new byte[] { 0x33, 0xCC, 0x33 });
            }
            if (comboBoxEdit75.Text == "Violet")
            {
                PS3.SetMemory(0x210BF34, new byte[] { 0x66, 0x33, 0x99 });
            }
            if (comboBoxEdit75.Text == "Black")
            {
                PS3.SetMemory(0x210BF34, new byte[] { 0x00, 0x00, 0x00 });
            }
            if (comboBoxEdit75.Text == "Orange")
            {
                PS3.SetMemory(0x210BF34, new byte[] { 0xFF, 0x33, 0x00 });
            }
        }

        private void comboBoxEdit78_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBoxEdit78.Text == "Blue")
            {
                PS3.SetMemory(0x1D62B85 - 392, new byte[] { 0x0F, 0x9D, 0xE8 });
            }
            if (comboBoxEdit78.Text == "Green")
            {
                PS3.SetMemory(0x1D62B85 - 392, new byte[] { 0x3A, 0x89, 0x23 });
            }
            if (comboBoxEdit78.Text == "Red")
            {
                PS3.SetMemory(0x1D62B85 - 392, new byte[] { 0xEE, 0x10, 0x10 });
            }
            if (comboBoxEdit78.Text == "Orange")
            {
                PS3.SetMemory(0x1D62B85 - 392, new byte[] { 0xDF, 0x6D, 0x14 });
            }
            if (comboBoxEdit78.Text == "Violet")
            {
                PS3.SetMemory(0x1D62B85 - 392, new byte[] { 0x79, 0x1C, 0xF8 });
            }
            if (comboBoxEdit78.Text == "Pink")
            {
                PS3.SetMemory(0x1D62B85 - 392, new byte[] { 0xFD, 0x3F, 0x92 });
            }
            if (comboBoxEdit78.Text == "Yellow")
            {
                PS3.SetMemory(0x1D62B85 - 392, new byte[] { 0xE7, 0xF0, 0x0D });
            }
            if (comboBoxEdit78.Text == "Brown")
            {
                PS3.SetMemory(0x1D62B85 - 392, new byte[] { 0xAD, 0x4F, 0x09 });
            }
        }

        private void comboBoxEdit79_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBoxEdit79.Text == "Blue")
            {
                PS3.SetMemory(0x1D62B85 - 428, new byte[] { 0x0F, 0x9D, 0xE8 });
            }
            if (comboBoxEdit79.Text == "Green")
            {
                PS3.SetMemory(0x1D62B85 - 428, new byte[] { 0x3A, 0x89, 0x23 });
            }
            if (comboBoxEdit79.Text == "Red")
            {
                PS3.SetMemory(0x1D62B85 - 428, new byte[] { 0xEE, 0x10, 0x10 });
            }
            if (comboBoxEdit79.Text == "Orange")
            {
                PS3.SetMemory(0x1D62B85 - 428, new byte[] { 0xDF, 0x6D, 0x14 });
            }
            if (comboBoxEdit79.Text == "Violet")
            {
                PS3.SetMemory(0x1D62B85 - 428, new byte[] { 0x79, 0x1C, 0xF8 });
            }
            if (comboBoxEdit79.Text == "Pink")
            {
                PS3.SetMemory(0x1D62B85 - 428, new byte[] { 0xFD, 0x3F, 0x92 });
            }
            if (comboBoxEdit79.Text == "Yellow")
            {
                PS3.SetMemory(0x1D62B85 - 428, new byte[] { 0xE7, 0xF0, 0x0D });
            }
            if (comboBoxEdit79.Text == "Brown")
            {
                PS3.SetMemory(0x1D62B85 - 428, new byte[] { 0xAD, 0x4F, 0x09 });
            }
        }

        private void comboBoxEdit76_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBoxEdit76.Text == "Blue")
            {
                PS3.SetMemory(0x1D62B85 + 104, new byte[] { 0x0F, 0x9D, 0xE8 });
            }
            if (comboBoxEdit76.Text == "Green")
            {
                PS3.SetMemory(0x1D62B85 + 104, new byte[] { 0x3A, 0x89, 0x23 });
            }
            if (comboBoxEdit76.Text == "Red")
            {
                PS3.SetMemory(0x1D62B85 + 104, new byte[] { 0xEE, 0x10, 0x10 });
            }
            if (comboBoxEdit76.Text == "Orange")
            {
                PS3.SetMemory(0x1D62B85 + 104, new byte[] { 0xDF, 0x6D, 0x14 });
            }
            if (comboBoxEdit76.Text == "Violet")
            {
                PS3.SetMemory(0x1D62B85 + 104, new byte[] { 0x79, 0x1C, 0xF8 });
            }
            if (comboBoxEdit76.Text == "Pink")
            {
                PS3.SetMemory(0x1D62B85 + 104, new byte[] { 0xFD, 0x3F, 0x92 });
            }
            if (comboBoxEdit76.Text == "Yellow")
            {
                PS3.SetMemory(0x1D62B85 + 104, new byte[] { 0xE7, 0xF0, 0x0D });
            }
            if (comboBoxEdit76.Text == "Brown")
            {
                PS3.SetMemory(0x1D62B85 + 104, new byte[] { 0xAD, 0x4F, 0x09 });
            }
        }

        private void comboBoxEdit82_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBoxEdit82.Text == "Reset")
            {
                PS3.SetMemory(0x4937C4, new byte[] { 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x18, 0x19, 0x1A, 0x1B });
            }
            if (comboBoxEdit82.Text == "Violet")
            {
                PS3.SetMemory(0x4937C4, new byte[] { 0xF4, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x18, 0x19, 0x1A, 0x1B });
            }
            if (comboBoxEdit82.Text == "Orange")
            {
                PS3.SetMemory(0x4937C4, new byte[] { 0x04, 0xF4, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x18, 0x19, 0x1A, 0x1B });
            }
            if (comboBoxEdit82.Text == "Yellow")
            {
                PS3.SetMemory(0x4937C4, new byte[] { 0x04, 0x05, 0x06, 0x07, 0xF4, 0x09, 0x0A, 0x0B, 0x18, 0x19, 0x1A, 0x1B });
            }
            if (comboBoxEdit82.Text == "Blue")
            {
                PS3.SetMemory(0x4937C4, new byte[] { 0xF4, 0x05, 0x06, 0x07, 0x00, 0x09, 0x0A, 0x0B, 0x00, 0x19, 0x1A, 0x1B });
            }
            if (comboBoxEdit82.Text == "Purple")
            {
                PS3.SetMemory(0x4937C4, new byte[] { 0x00, 0x05, 0x06, 0x07, 0xF4, 0x09, 0x0A, 0x0B, 0x00, 0x19, 0x1A, 0x1B });
            }
            if (comboBoxEdit82.Text == "Pink")
            {
                PS3.SetMemory(0x4937C4, new byte[] { 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0x1B });
            }
        }

        private void comboBoxEdit80_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBoxEdit80.Text == "Blue")
            {
                PS3.SetMemory(0x1D62B85 - 392, new byte[] { 0x0F, 0x9D, 0xE8 });
            }
            if (comboBoxEdit80.Text == "Green")
            {
                PS3.SetMemory(0x1D62B85 - 392, new byte[] { 0x3A, 0x89, 0x23 });
            }
            if (comboBoxEdit80.Text == "Red")
            {
                PS3.SetMemory(0x1D62B85 - 392, new byte[] { 0xEE, 0x10, 0x10 });
            }
            if (comboBoxEdit80.Text == "Orange")
            {
                PS3.SetMemory(0x1D62B85 - 392, new byte[] { 0xDF, 0x6D, 0x14 });
            }
            if (comboBoxEdit80.Text == "Violet")
            {
                PS3.SetMemory(0x1D62B85 - 392, new byte[] { 0x79, 0x1C, 0xF8 });
            }
            if (comboBoxEdit80.Text == "Pink")
            {
                PS3.SetMemory(0x1D62B85 - 392, new byte[] { 0xFD, 0x3F, 0x92 });
            }
            if (comboBoxEdit80.Text == "Yellow")
            {
                PS3.SetMemory(0x1D62B85 - 392, new byte[] { 0xE7, 0xF0, 0x0D });
            }
            if (comboBoxEdit80.Text == "Brown")
            {
                PS3.SetMemory(0x1D62B85 - 392, new byte[] { 0xAD, 0x4F, 0x09 });
            }
        }

        private void comboBoxEdit81_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBoxEdit81.Text == "Blue")
            {
                PS3.SetMemory(0x1D62B85 - 388, new byte[] { 0x0F, 0x9D, 0xE8 });
            }
            if (comboBoxEdit81.Text == "Green")
            {
                PS3.SetMemory(0x1D62B85 - 388, new byte[] { 0x3A, 0x89, 0x23 });
            }
            if (comboBoxEdit81.Text == "Red")
            {
                PS3.SetMemory(0x1D62B85 - 388, new byte[] { 0xEE, 0x10, 0x10 });
            }
            if (comboBoxEdit81.Text == "Orange")
            {
                PS3.SetMemory(0x1D62B85 - 388, new byte[] { 0xDF, 0x6D, 0x14 });
            }
            if (comboBoxEdit81.Text == "Violet")
            {
                PS3.SetMemory(0x1D62B85 - 388, new byte[] { 0x79, 0x1C, 0xF8 });
            }
            if (comboBoxEdit81.Text == "Pink")
            {
                PS3.SetMemory(0x1D62B85 - 388, new byte[] { 0xFD, 0x3F, 0x92 });
            }
            if (comboBoxEdit81.Text == "Yellow")
            {
                PS3.SetMemory(0x1D62B85 - 388, new byte[] { 0xE7, 0xF0, 0x0D });
            }
            if (comboBoxEdit81.Text == "Brown")
            {
                PS3.SetMemory(0x1D62B85 - 388, new byte[] { 0xAD, 0x4F, 0x09 });
            }
        }

        private void simpleButton72_Click(object sender, EventArgs e)
        {
            if (Attached == true)
            {
                splashScreenManager2.ShowWaitForm();
                try
                {
                    dataGridView1.RowCount = 16;
                    for (int index = 0; index < 16; ++index)
                    {
                        string str = GET_PLAYER_NAME(index);
                        if (str == "**Invalid**")
                        {
                            dataGridView1.Rows[index].Cells[0].Value = " -----";
                        }
                        else
                        {
                            dataGridView1.Rows[index].Cells[0].Value = " " + str;
                            int num = GET_PLAYER_PED(index);
                            if (IS_PED_IN_ANY_VEHICLE(num) > 0)
                                dataGridView1.Rows[index].Cells[1].Value = " In Vehicle";
                            else
                                dataGridView1.Rows[index].Cells[1].Value = " -----";
                        }
                    }

                    GetHost2();
                    dataGridView1.CurrentCell = dataGridView1[0, 0];
                    datag1OK = true;
                    EnableDG1Buttons();
                    Thread.Sleep(20);
                }
                catch
                {
                    
                }
                splashScreenManager2.CloseWaitForm();
                /*if (PlayersInfoOpen == false && AdvInfo == true)
                {
                    PlayersInform pif = new PlayersInform();
                    pif.Show();
                }*/
            }
            else
            {
                XtraMessageBox.Show("You must connect to use this function..", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void simpleButton123_Click(object sender, EventArgs e)
        {
            int num = Functions.RPCFunc.PLAYER_PED_ID();
            float[] numArray = Functions.RPCFunc.GET_COORDS(Functions.RPCFunc.GET_PLAYER_PED(dataGridView1.CurrentRow.Index));
            ClassicRPC.CompleteReq();
            Functions.RPCFunc.SCREEN_FADE_OUT(400);
            Functions.RPCFunc.SET_ENTITY_COORDS(num, numArray);
            Functions.RPCFunc.SCREEN_FADE_IN(400);
        }

        private void simpleButton113_Click(object sender, EventArgs e)
        {
            Functions.RPCFunc.TELEPORT_ME_TO_PLAYER_CAR(dataGridView1.CurrentRow.Index);
        }

        private void simpleButton128_Click(object sender, EventArgs e)
        {
            float[] numArray = new float[3];
            float[] numArray2 = new float[3];
            numArray = Functions.RPCFunc.GET_COORDS(Functions.RPCFunc.GET_PLAYER_PED(dataGridView1.CurrentRow.Index));
            for (int i = 0; i < 20; i++)
            {
                Random random = new Random();
                int num3 = random.Next(-500, 500);
                int num4 = random.Next(-500, 500);
                numArray2 = numArray;
                numArray2[0] += ((float)num3) / 100f;
                numArray2[1] += ((float)num4) / 100f;
                numArray2[2] += 3f;
                Functions.RPCFunc.AMBIENT_PICKUP(Functions.Addresses.PICKUP_MONEY_PAPER_BAG, numArray2, 0x7d0);
            }
        }

        private void simpleButton120_Click(object sender, EventArgs e)
        {
            Functions.RPCFunc.GiveWeapons(Functions.RPCFunc.GET_PLAYER_PED(dataGridView1.CurrentRow.Index));
        }

        private void simpleButton90_Click(object sender, EventArgs e)
        {
            int PED = GET_PLAYER_PED(dataGridView1.CurrentRow.Index);
            float[] Coord = GET_ENTITY_COORDS(PED);

            Functions.RPCFunc.DropPickup(Coord, "prop_ld_health_pack", "PICKUP_HEALTH_STANDARD", 100, "Health", PED);
            Thread.Sleep(200);
            ADD_ARMOUR_TO_PED(PED, 100);
            Functions.RPCFunc.DropPickup(Coord, "prop_ld_health_pack", "PICKUP_HEALTH_STANDARD", 100, "Health", PED);
        }

        private void simpleButton122_Click(object sender, EventArgs e)
        {
            if (IS_PED_IN_ANY_VEHICLE(GET_PLAYER_PED(dataGridView1.CurrentRow.Index)) == 1)
            {
                CLEAR_PED_TASKS_IMMEDIATLY(GET_PLAYER_PED(dataGridView1.CurrentRow.Index));
            }
        }

        private void checkButton59_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton59.Checked)
            {
                datag1OK = true;
                dataGridView1.RowCount = 16;
                TaskRefreshInfoStart(true);
                EnableDG1Buttons();
                if (PlayersInfoOpen == false && AdvInfo == true)
                {
                    PlayersInform pif = new PlayersInform();
                    pif.Show();
                }
                checkButton59.BackColor = Color.MediumSpringGreen;
                checkButton59.Text = "Auto-Refresh Info [ON]";
            }
            else
            {
                TaskRefreshInfoStart(false);
                checkButton59.ResetBackColor();
                checkButton59.Text = "Auto-Refresh Info [OFF]";
            }
        }

        private void simpleButton130_Click(object sender, EventArgs e)
        {
            if (IS_PED_IN_ANY_VEHICLE(GET_PLAYER_PED(dataGridView1.CurrentRow.Index)) != 0)
            {
                int Veh = GET_VEHICLE_PED_IS_IN(GET_PLAYER_PED(dataGridView1.CurrentRow.Index));
                int ME = PLAYER_PED_ID();
                CLEAR_PED_TASKS_IMMEDIATLY(GET_PLAYER_PED(dataGridView1.CurrentRow.Index));
                Thread.Sleep(400);
                RPCHook.Call2<int>(OLDNatives.SET_VEHICLE_ENGINE_ON, Veh, 1, 1);
                Functions.RPCFunc.SET_PED_INTO_VEHICLE(ME, Veh);
            }
        }

        private void simpleButton105_Click(object sender, EventArgs e)
        {
            KickandFreezeVehicle(dataGridView1.CurrentRow.Index);
        }

        private void simpleButton103_Click(object sender, EventArgs e)
        {
            KickandBoostVehicle(dataGridView1.CurrentRow.Index);
        }

        private void simpleButton96_Click(object sender, EventArgs e)
        {
            KickandVehicleOnFire(dataGridView1.CurrentRow.Index);
        }

        private void simpleButton104_Click(object sender, EventArgs e)
        {
            KickandLockDoorsCar(dataGridView1.CurrentRow.Index);
        }

        private void simpleButton114_Click(object sender, EventArgs e)
        {
            KickandDowngradeVehicle(dataGridView1.CurrentRow.Index);
        }

        private void simpleButton95_Click(object sender, EventArgs e)
        {
            int PED = GET_PLAYER_PED(dataGridView1.CurrentRow.Index);
            if (IS_PED_IN_ANY_VEHICLE(PED) == 1)
            {
                int Veh = GET_VEHICLE_PED_IS_IN(PED);
                Thread.Sleep(400);
                CLEAR_PED_TASKS_IMMEDIATLY(PED);
                Thread.Sleep(400);
                NETWORK_REQUEST_CONTROL_OF_ENTITY(Veh);
                float[] Force = { 0, 0, 90 }, Position = { 0, 0, 0 };
                Functions.RPCFunc.APPLY_FORCE_TO_ENTITY(Veh, Force, Position);
            }
        }

        private void simpleButton93_Click(object sender, EventArgs e)
        {
            int PED = GET_PLAYER_PED(dataGridView1.CurrentRow.Index);
            if (IS_PED_IN_ANY_VEHICLE(PED) != 0)
            {
                int Veh = GET_VEHICLE_PED_IS_IN(PED);
                Thread.Sleep(400);
                CLEAR_PED_TASKS_IMMEDIATLY(PED);
                Thread.Sleep(400);
                NETWORK_REQUEST_CONTROL_OF_ENTITY(PED);
                SET_ENTITY_COORDS(Veh, 23.9789f, 7644.1338f, 19.0681f);
            }
        }

        private void simpleButton131_Click(object sender, EventArgs e)
        {
            int PED = GET_PLAYER_PED(dataGridView1.CurrentRow.Index);
            if (IS_PED_IN_ANY_VEHICLE(PED) != 0)
            {
                int Veh = GET_VEHICLE_PED_IS_IN(PED);
                owned_explosion(dataGridView1.CurrentRow.Index, GET_ENTITY_COORDS(Veh), 5);
            }
        }

        private void checkButton57_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton57.Checked)
            {
                DataG1Tasks[dataGridView1.CurrentRow.Index] = true;
                int PED = GET_PLAYER_PED(dataGridView1.CurrentRow.Index);
                Functions.RPCFunc.TaskDisableActionsStart(true, PED);
                checkButton57.Text = "Disable Actions [ON]";
                checkButton57.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                DataG1Tasks[dataGridView1.CurrentRow.Index] = false;
                int PED = GET_PLAYER_PED(dataGridView1.CurrentRow.Index);
                Functions.RPCFunc.TaskDisableActionsStart(false, PED);
                checkButton57.Text = "Disable Actions [OFF]";
                checkButton57.ResetBackColor();
            }
        }

        private void checkButton56_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton56.Checked)
            {
                DataG1ForceF[dataGridView1.CurrentRow.Index] = true;
                int PED = GET_PLAYER_PED(dataGridView1.CurrentRow.Index);
                Functions.RPCFunc.TaskForceFieldStart(true, PED);
                checkButton56.Text = "ForceField [ON]";
                checkButton56.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                DataG1ForceF[dataGridView1.CurrentRow.Index] = false;
                int PED = GET_PLAYER_PED(dataGridView1.CurrentRow.Index);
                Functions.RPCFunc.TaskForceFieldStart(false, PED);
                checkButton56.Text = "ForceField [OFF]";
                checkButton56.ResetBackColor();
            }
        }

        private void simpleButton111_Click(object sender, EventArgs e)
        {
            ExplodePlayer(dataGridView1.CurrentRow.Index);
        }

        private void simpleButton110_Click(object sender, EventArgs e)
        {
            LagPlayer(dataGridView1.CurrentRow.Index);
        }

        private void simpleButton107_Click(object sender, EventArgs e)
        {
            SendEnemyClone(dataGridView1.CurrentRow.Index);
        }

        private void simpleButton109_Click(object sender, EventArgs e)
        {
            MakeExplodeAll(dataGridView1.CurrentRow.Index);
        }

        private void simpleButton112_Click(object sender, EventArgs e)
        {
            int PED_ID = RPCHook.Call(Natives.GET_PLAYER_PED, dataGridView1.CurrentRow.Index);
            RPCHook.Call(Natives.REMOVE_ALL_PED_WEAPONS, PED_ID, 1);
        }

        private void simpleButton126_Click(object sender, EventArgs e)
        {
            int PED = Functions.RPCFunc.GET_PLAYER_PED(dataGridView1.CurrentRow.Index);
            if (IS_PED_IN_ANY_VEHICLE(PED) != 0)
            {
                XtraMessageBox.Show("This function works only if the Player is NOT in a Vehicle. \nKick the Player from the Vehicle and make sure that he won't enter back into a vehicle. \nExample: Use the mod Kick and Lock Doors :)", "Information", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                float_0 = GET_ENTITY_COORDS(PED);
                float_0[0] += 0.0f;
                float_0[1] -= 0.0f;
                float_0[2] += 20f;
                int hashKey = GET_HASH_KEY("AIRBUS");
                do
                {
                    REQUEST_MODEL(hashKey);
                    Application.DoEvents();
                }
                while (HAS_MODEL_LOADED(hashKey) != 1);
                int num2;
                object[] objArray;
                do
                {
                    int_1 = CREATE_VEHICLE(hashKey, float_0);
                    RPC3.CompleteReq();
                    RPC3.Call(Natives.CLEAR_PED_TASKS_IMMEDIATELY, (object)PED);

                    if (NETWORK_CONTROL(int_1))
                    {
                        RPC3.Call(Natives.CLEAR_PED_TASKS_IMMEDIATELY, (object)PED);
                        APPLY_FORCE_TO_ENTITY(int_1, 0.0f, 0.0f, -650f, 0.0f, 0.0f);
                    }
                    Application.DoEvents();
                    SET_MODEL_AS_NO_LONGER_NEEDED(hashKey);
                    num2 = (int)Natives.DOES_ENTITY_EXIST;
                    objArray = new object[1]
                    {
            (object) int_1
                    };
                }
                while (RPCHook.Call((uint)num2, objArray) != 1);
            }
        }

        private void simpleButton127_Click(object sender, EventArgs e)
        {
            Random random = new Random();
            float[] Coords = new float[3];
            int PED = GET_PLAYER_PED(dataGridView1.CurrentRow.Index);
            ClassicRPC.CompleteReq();
            Functions.RPCFunc.CLEAR_PED_TASKS_IMMEDIATLY(PED);
            Coords = GET_ENTITY_COORDS(PED);
            int randomx = random.Next(0, 0);
            int randomy = random.Next(0, 0);
            Coords[0] += (float)randomx / 100;
            Coords[1] += (float)randomy / 100;
            Coords[2] += -1;
            Functions.RPCFunc.CLEAR_PED_TASKS_IMMEDIATLY(PED);
            Functions.RPCFunc.CREATE_OBJECT_NEW(0x392D62AA, Coords);
        }

        private void checkButton60_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton60.Checked)
            {
                int PID = PLAYER_PED_ID();
                int PED = GET_PLAYER_PED(dataGridView1.CurrentRow.Index);
                if (PID != PED)
                {
                    if (IS_PED_IN_ANY_VEHICLE(PID) != 0)
                    {
                        int Veh = GET_VEHICLE_PED_IS_IN(PID);
                        //Functions.RPCFunc.ATTACH_ENTITY_TO_ENTITY_2(Veh, PED);
                        Functions.RPCFunc.NEW_ATTACH_ENTITY_TO_ENTITY(PID, Veh);
                        AttachedEntity = Veh;
                        checkButton60.Text = "Detach Me from Player";
                        checkButton60.BackColor = Color.MediumSpringGreen;
                    }
                    else
                    {
                        //Functions.RPCFunc.ATTACH_PED_TO_PED(PID, PED);
                        Functions.RPCFunc.NEW_ATTACH_ENTITY_TO_ENTITY(PID, PED);
                        AttachedEntity = PID;
                        checkButton60.Text = "Detach Me from Player";
                        checkButton60.BackColor = Color.MediumSpringGreen;
                    }
                }
                else
                {
                    XtraMessageBox.Show("You can't attach yourselves :D", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    checkButton60.Checked = false;
                }
            }
            else
            {
                //Functions.RPCFunc.DETACH_ENTITY_FROM_ENTITY(AttachedEntity, GET_PLAYER_PED(dataGridView1.CurrentRow.Index));
                Functions.RPCFunc.NEW_DETACH_ENTITY(PLAYER_PED_ID());
                checkButton60.Text = "Attach Me to Player";
                checkButton60.ResetBackColor();
            }
        }

        private void simpleButton133_Click(object sender, EventArgs e)
        {
            int PED = GET_PLAYER_PEDSPRX(dataGridView1.CurrentRow.Index);
            Functions.RPCFunc.CLONE_PED(PED);
        }

        private void simpleButton129_Click(object sender, EventArgs e)
        {
            SendMoney(spinEdit1.Text, dataGridView1.CurrentRow.Index);
        }

        private void checkButton58_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton58.Checked)
            {
                if (comboBoxEdit83.SelectedIndex == 0)
                {
                    int PD = GET_PLAYER_PED(dataGridView1.CurrentRow.Index);
                    Functions.RPCFunc.TaskDropMoneyStart(true, Functions.Addresses.PICKUP_MONEY_CASE, PD);
                }
                if (comboBoxEdit83.SelectedIndex == 1)
                {
                    int PD = GET_PLAYER_PED(dataGridView1.CurrentRow.Index);
                    Functions.RPCFunc.TaskDropMoneyStart(true, Functions.Addresses.PICKUP_MONEY_DEP_BAG, PD);
                }
                if (comboBoxEdit83.SelectedIndex == 2)
                {
                    int PD = GET_PLAYER_PED(dataGridView1.CurrentRow.Index);
                    Functions.RPCFunc.TaskDropMoneyStart(true, Functions.Addresses.PICKUP_MONEY_MED_BAG, PD);
                }
                if (comboBoxEdit83.SelectedIndex == 3)
                {
                    int PD = GET_PLAYER_PED(dataGridView1.CurrentRow.Index);
                    Functions.RPCFunc.TaskDropMoneyStart(true, Functions.Addresses.PICKUP_MONEY_PAPER_BAG, PD);
                }
                if (comboBoxEdit83.SelectedIndex == 4)
                {
                    int PD = GET_PLAYER_PED(dataGridView1.CurrentRow.Index);
                    Functions.RPCFunc.TaskDropMoneyStart(true, Functions.Addresses.PICKUP_MONEY_PURSE, PD);
                }
                if (comboBoxEdit83.SelectedIndex == 5)
                {
                    int PD = GET_PLAYER_PED(dataGridView1.CurrentRow.Index);
                    Functions.RPCFunc.TaskDropMoneyStart(true, Functions.Addresses.PICKUP_MONEY_SECURITY_CASE, PD);
                }
                if (comboBoxEdit83.SelectedIndex == 6)
                {
                    int PD = GET_PLAYER_PED(dataGridView1.CurrentRow.Index);
                    Functions.RPCFunc.TaskDropMoneyStart(true, Functions.Addresses.PICKUP_MONEY_WALLET, PD);
                }
                if (comboBoxEdit83.SelectedIndex == 7)
                {
                    int PD = GET_PLAYER_PED(dataGridView1.CurrentRow.Index);
                    Functions.RPCFunc.TaskDropMoneyStart(true, Functions.Addresses.PICKUP_ARMOUR_STANDARD, PD);
                }
                if (comboBoxEdit83.SelectedIndex == 8)
                {
                    int PD = GET_PLAYER_PED(dataGridView1.CurrentRow.Index);
                    Functions.RPCFunc.TaskDropMoneyStart(true, Functions.Addresses.PICKUP_HEALTH_STANDARD, PD);
                }
                if (comboBoxEdit83.SelectedIndex == 9)
                {
                    int PD = GET_PLAYER_PED(dataGridView1.CurrentRow.Index);
                    Functions.RPCFunc.TaskDropMoneyStart(true, Functions.Addresses.PICKUP_HEALTH_SNACK, PD);
                }
                if (comboBoxEdit83.SelectedIndex == 10)
                {
                    int PD = GET_PLAYER_PED(dataGridView1.CurrentRow.Index);
                    Functions.RPCFunc.TaskDropMoneyStart(true, Functions.Addresses.PICKUP_PORTABLE_PACKAGE, PD);
                }
                if (comboBoxEdit83.SelectedIndex == 11)
                {
                    int PD = GET_PLAYER_PED(dataGridView1.CurrentRow.Index);
                    Functions.RPCFunc.TaskDropMoneyStart(true, Functions.Addresses.PICKUP_PARACHUTE, PD);
                }
                if (comboBoxEdit83.SelectedIndex == 12)
                {
                    int PD = GET_PLAYER_PED(dataGridView1.CurrentRow.Index);
                    Functions.RPCFunc.TaskDropMoneyStart(true, Functions.Addresses.PICKUP_AMMO_BULLET_MP, PD);
                }
                if (comboBoxEdit83.SelectedIndex == 13)
                {
                    int PD = GET_PLAYER_PED(dataGridView1.CurrentRow.Index);
                    Functions.RPCFunc.TaskDropMoneyStart(true, Functions.Addresses.PICKUP_AMMO_MISSILE_MP, PD);
                }
                if (comboBoxEdit83.SelectedIndex == 14)
                {
                    int PD = GET_PLAYER_PED(dataGridView1.CurrentRow.Index);
                    Functions.RPCFunc.TaskDropMoneyStart(true, Functions.Addresses.PICKUP_VEHICLE_HEALTH_STANDARD, PD);
                }
                checkButton58.Text = "Drop Money [ON]";
                checkButton58.BackColor = Color.MediumSpringGreen;
                DataG1DropMoney[dataGridView1.CurrentRow.Index] = true;
            }
            else
            {
                int PD = GET_PLAYER_PED(dataGridView1.CurrentRow.Index);
                Functions.RPCFunc.TaskDropMoneyStart(false, Functions.Addresses.PICKUP_VEHICLE_HEALTH_STANDARD, PD);
                checkButton58.ResetBackColor();
                checkButton58.Text = "Drop Money [OFF]";
                DataG1DropMoney[dataGridView1.CurrentRow.Index] = false;
            }
        }

        private void checkEdit44_CheckedChanged(object sender, EventArgs e)
        {
            if (checkEdit44.Checked == false)
            {
                Functions.RPCFunc.TaskInfiniteStarsStart(false, dataGridView1.CurrentRow.Index, trackBarControl4.Value);
                DataG1InfStars[dataGridView1.CurrentRow.Index] = false;
            }
            else
            {
                Functions.RPCFunc.TaskInfiniteStarsStart(true, dataGridView1.CurrentRow.Index, trackBarControl4.Value);
                DataG1InfStars[dataGridView1.CurrentRow.Index] = true;
            }
        }

        private void simpleButton94_Click(object sender, EventArgs e)
        {
            if (checkEdit44.Checked)
            {
                XtraMessageBox.Show("You have to Disable the unlimited Wanted level first.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                RPC3.Call(OLDNatives.SET_PLAYER_WANTED_LEVEL, GET_PLAYER_PED(dataGridView1.CurrentRow.Index), 0, 1);
            }
        }

        private void simpleButton44_Click(object sender, EventArgs e)
        {
            if (Attached == true)
            {
                splashScreenManager2.ShowWaitForm();
                dataGridView2.RowCount = 17;

                for (int index = 0; index < 17; ++index)
                {
                    string str = PS3.Extension.ReadString((uint)ClassicRPC.Call(Natives.GET_PLAYER_NAME, (object)index));
                    if (str == "**Invalid**")
                    {
                        dataGridView2.Rows[index].Cells[0].Value = " -----";
                    }
                    else
                    {
                        dataGridView2.Rows[index].Cells[0].Value = " " + str;
                        int PED = GET_PLAYER_PED(index);

                        if (IS_PED_IN_ANY_VEHICLE(PED) != 0)
                            dataGridView2.Rows[index].Cells[1].Value = " In Vehicle";
                        else
                            dataGridView2.Rows[index].Cells[1].Value = " -----";
                    }
                }

                GetHost4();
                dataGridView2.CurrentCell = dataGridView2[0, 0];
                EnableDG2Buttons();
                datag2OK = true;
                Thread.Sleep(20);
                splashScreenManager2.CloseWaitForm();
                if (PlayersInfoOpen == false && AdvInfo == true)
                {
                    PlayersInform pif = new PlayersInform();
                    pif.Show();
                }
            }
            else
            {
                XtraMessageBox.Show("You must connect to use this function..", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void checkButton61_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton61.Checked)
            {
                dataGridView2.RowCount = 16;
                TaskRefreshInfo2Start(true);
                EnableDG2Buttons();
                if (PlayersInfoOpen == false && AdvInfo == true)
                {
                    PlayersInform pif = new PlayersInform();
                    pif.Show();
                }
                checkButton61.BackColor = Color.MediumSpringGreen;
                checkButton61.Text = "Auto-Refresh Info [ON]";
            }
            else
            {
                TaskRefreshInfo2Start(false);
                checkButton61.ResetBackColor();
                checkButton61.Text = "Auto-Refresh Info [OFF]";
            }
        }

        private void simpleButton135_Click(object sender, EventArgs e)
        {
            if (checkEdit43.Checked)
            {
                SendEnemy(dataGridView2.CurrentRow.Index, comboBoxEdit84.Text, comboBoxEdit84.Text, true);
            }
            else if (checkEdit43.Checked == false)
            {
                SendEnemy(dataGridView2.CurrentRow.Index, comboBoxEdit84.Text, comboBoxEdit84.Text, false);
            }
        }

        private void simpleButton137_Click(object sender, EventArgs e)
        {
            SendEnemyInCar(dataGridView2.CurrentRow.Index, comboBoxEdit85.Text, comboBoxEdit86.Text, comboBoxEdit88.Text, checkEdit2.Checked, checkEdit3.Checked, checkEdit4.Checked);
        }

        private void simpleButton106_Click(object sender, EventArgs e)
        {
            if (datag2OK == true)
            {
                Array.Resize<int>(ref SpawnedBodyG, SpawnedBodyG.Length + 1);
                SpawnedBodyG[SpawnedBodyG.Length - 1] = SpawnBodyguard(dataGridView2.CurrentRow.Index, comboBoxEdit90.Text, comboBoxEdit89.Text, checkEdit5.Checked);
                dataGridView3.RowCount = SpawnedBodyG.Length;
                dataGridView3.Rows[SpawnedBodyG.Length - 1].Cells[0].Value = comboBoxEdit90.Text;
                dataGridView3.Rows[SpawnedBodyG.Length - 1].Cells[1].Value = dataGridView2.CurrentRow.Cells[0].Value.ToString();
                datag3OK = true;
                EnableDG3Buttons();
            }
            else
            {
                XtraMessageBox.Show("You have to get the players list first and select one of the players..", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void simpleButton136_Click(object sender, EventArgs e)
        {
            if (datag3OK == true)
            {
                NETWORK_REQUEST_CONTROL_OF_ENTITY(SpawnedBodyG[dataGridView3.CurrentRow.Index]);
                Thread.Sleep(500);
                SET_ENTITY_INVINCIBLE(SpawnedBodyG[dataGridView3.CurrentRow.Index], 0);
                Functions.RPCFunc.SET_ENTITY_HEALTH(SpawnedBodyG[dataGridView3.CurrentRow.Index], 0);
                Thread.Sleep(100);
                int selected = dataGridView3.CurrentRow.Index;
                dataGridView3.Rows.RemoveAt(selected);
            
                var numbersList = SpawnedBodyG.ToList();
                numbersList.RemoveAt(selected);
                if (numbersList.Count == 0)
                    datag3OK = false;
                SpawnedBodyG = numbersList.ToArray();
            }
            else
            {
                XtraMessageBox.Show("You haven't selected any ped to kill..", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void simpleButton145_Click(object sender, EventArgs e)
        {
            if (datag4OK == true)
            {
                Array.Resize<int>(ref SpawnedPedLobby, SpawnedBodyG.Length + 1);
                SpawnedPedLobby[SpawnedPedLobby.Length - 1] = SpawnPedLobby(dataGridView4.CurrentRow.Index, comboBoxEdit92.Text);
                dataGridView5.RowCount = SpawnedPedLobby.Length;
                dataGridView5.Rows[SpawnedPedLobby.Length - 1].Cells[0].Value = comboBoxEdit92.Text;
                dataGridView5.Rows[SpawnedPedLobby.Length - 1].Cells[1].Value = dataGridView4.CurrentRow.Cells[0].Value.ToString();
                dataGridView5.Rows[SpawnedPedLobby.Length - 1].Cells[2].Value = "Spawned near";
                datag5OK = true;
                EnableDG5Buttons();
            }
            else
            {
                XtraMessageBox.Show("You have get the players list first and select one of the players..", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void simpleButton146_Click(object sender, EventArgs e)
        {
            if (datag4OK == true)
            {
                Array.Resize<int>(ref SpawnedPedLobby, SpawnedPedLobby.Length + 1);
                int PED = GET_PLAYER_PED(dataGridView4.CurrentRow.Index);
                SpawnedPedLobby[SpawnedPedLobby.Length - 1] = SpawnPedLobby(dataGridView4.CurrentRow.Index, comboBoxEdit92.Text);
                Thread.Sleep(1000);
                Functions.RPCFunc.ATTACH_PED_TO_PED(SpawnedPedLobby[SpawnedPedLobby.Length - 1], PED);

                Array.Resize<int>(ref AttachedtoPlayerLobby, AttachedtoPlayerLobby.Length + 1);
                AttachedtoPlayerLobby[AttachedtoPlayerLobby.Length - 1] = PED;
                dataGridView5.RowCount = SpawnedPedLobby.Length;
                dataGridView5.Rows[SpawnedPedLobby.Length - 1].Cells[0].Value = comboBoxEdit92.Text;
                dataGridView5.Rows[SpawnedPedLobby.Length - 1].Cells[1].Value = dataGridView4.CurrentRow.Cells[0].Value.ToString();
                dataGridView5.Rows[SpawnedPedLobby.Length - 1].Cells[2].Value = "Attached";
                datag5OK = true;
                EnableDG5Buttons();
            }
            else
            {
                XtraMessageBox.Show("You have get the players list first and select one of the players..", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void simpleButton147_Click(object sender, EventArgs e)
        {
            if (datag5OK == true)
            {
                if (dataGridView5.CurrentRow.Cells[2].Value.ToString() == "Attached")
                {
                    Functions.RPCFunc.DETACH_ENTITY_FROM_ENTITY(SpawnedPedLobby[dataGridView5.CurrentRow.Index], AttachedtoPlayerLobby[dataGridView5.CurrentRow.Index]);
                    dataGridView5.CurrentRow.Cells[2].Value = "Detached";
                }
                else
                {
                    XtraMessageBox.Show("The selected Ped is not attached to any player.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            else
            {
                XtraMessageBox.Show("No ped found.. If this is a bug contact us.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void toggleSwitch1_Toggled(object sender, EventArgs e)
        {
            if (toggleSwitch1.IsOn)
            {
                if (fullobjcopied == false)
                {
                    splashScreenManager2.ShowWaitForm();
                    for (int i = 0; i < comboBoxEdit91.Properties.Items.Count; i++)
                    {
                        Array.Resize(ref fullobjarr, fullobjarr.Length +1);
                        fullobjarr[fullobjarr.Length - 1].Insert(i, comboBoxEdit91.Properties.Items[i].ToString());
                    }
                    splashScreenManager2.CloseWaitForm();
                }
                comboBoxEdit91.Properties.Items.Clear();
                comboBoxEdit91.Properties.Items.Add(mainobjarr);
                comboBoxEdit91.SelectedIndex = 0;
                fullobjcopied = true;
            }
            else
            {
                comboBoxEdit91.Properties.Items.Clear();
                comboBoxEdit91.Properties.Items.Add(fullobjarr);
                comboBoxEdit91.SelectedIndex = 0;
            }
        }

        private void simpleButton139_Click(object sender, EventArgs e)
        {
            uint hash = Functions.RPCFunc.STRINGHASH(comboBoxEdit91.Text);
            float[] coords = GET_ENTITY_COORDS(GET_PLAYER_PED(dataGridView4.CurrentRow.Index));
            int obj = Functions.RPCFunc.CREATE_OBJECT(hash, coords);
            SpawnedObject = obj;
        }

        private void simpleButton140_Click(object sender, EventArgs e)
        {
            int hash = GET_HASH_KEY(comboBoxEdit91.Text);
            int PED = GET_PLAYER_PED(dataGridView4.CurrentRow.Index);
            float[] coords = GET_ENTITY_COORDS(PED);
            int ob = Functions.RPCFunc.ATTACH_OBJECT_TO_PLAYER(hash, coords, PED);
            AttachedObjtoPlayer = PED;
            AttachedObject = ob;
        }

        private void simpleButton141_Click(object sender, EventArgs e)
        {
            if (AttachedObject != 0)
                Functions.RPCFunc.DETACH_ENTITY_FROM_ENTITY(AttachedObject, AttachedObjtoPlayer);
        }

        private void simpleButton148_Click(object sender, EventArgs e)
        {
            if (checkEdit6.Checked)
            {
                SendBuzzard(dataGridView2.CurrentRow.Index, "S_M_Y_SWAT_01", true);
            }
            else if (checkEdit6.Checked == false)
            {
                SendBuzzard(dataGridView2.CurrentRow.Index, "S_M_Y_SWAT_01", false);
            }
        }

        private void simpleButton149_Click(object sender, EventArgs e)
        {
            if (Attached)
                SendTank(dataGridView2.CurrentRow.Index);
        }

        private void checkButton62_CheckedChanged(object sender, EventArgs e)
        {
            if (datag3OK == true)
            {
                if (checkButton62.Checked)
                {
                    Functions.RPCFunc.ENTITY_VISIBLE(SpawnedBodyG[dataGridView3.CurrentRow.Index], false);
                    checkButton62.Text = "Invisible BodyGuard [ON]";
                    checkButton62.BackColor = Color.MediumSpringGreen;
                    DataG3Invisible[dataGridView3.CurrentRow.Index] = true;
                }
                else
                {
                    Functions.RPCFunc.ENTITY_VISIBLE(SpawnedBodyG[dataGridView3.CurrentRow.Index], true);
                    checkButton62.Text = "Invisible BodyGuard [OFF]";
                    checkButton62.ResetBackColor();
                    DataG3Invisible[dataGridView3.CurrentRow.Index] = false;
                }
            }
            else
            {
                XtraMessageBox.Show("Select a Bodyguard from the list first..", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void checkButton63_CheckedChanged(object sender, EventArgs e)
        {
            if (datag3OK == true)
            {
                if (checkButton63.Checked)
                {
                    Functions.RPCFunc.OHK(SpawnedBodyG[dataGridView3.CurrentRow.Index], 700f);
                    checkButton63.Text = "One Hit Kill BodyGuard [ON]";
                    checkButton63.BackColor = Color.MediumSpringGreen;
                    DataG3ohk[dataGridView3.CurrentRow.Index] = true;
                }
                else
                {
                    Functions.RPCFunc.OHK(SpawnedBodyG[dataGridView3.CurrentRow.Index], 1f);
                    checkButton63.Text = "One Hit Kill BodyGuard [OFF]";
                    checkButton63.ResetBackColor();
                    DataG3ohk[dataGridView3.CurrentRow.Index] = false;
                }
            }
            else
            {
                XtraMessageBox.Show("Select a Bodyguard from the list first..", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void checkButton64_CheckedChanged(object sender, EventArgs e)
        {
            if (datag3OK == true)
            {
                if (checkButton64.Checked)
                {
                    Functions.RPCFunc.ENTITY_CAN_BE_DAMAGED(SpawnedBodyG[dataGridView3.CurrentRow.Index], 0);
                    checkButton64.Text = "God Mode BodyGuard [ON]";
                    checkButton64.BackColor = Color.MediumSpringGreen;
                    DataG3GodMode[dataGridView3.CurrentRow.Index] = true;
                }
                else
                {
                    Functions.RPCFunc.ENTITY_CAN_BE_DAMAGED(SpawnedBodyG[dataGridView3.CurrentRow.Index], 1);
                    checkButton64.Text = "God Mode BodyGuard [OFF]";
                    checkButton64.ResetBackColor();
                    DataG3GodMode[dataGridView3.CurrentRow.Index] = false;
                }
            }
            else
            {
                XtraMessageBox.Show("Select a Bodyguard from the list first..", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void simpleButton151_Click(object sender, EventArgs e)
        {
            if (datag3OK == true)
            {
                ClassicRPC.Call(Natives.SET_PED_RANDOM_COMPONENT_VARIATION, SpawnedBodyG[dataGridView3.CurrentRow.Index], 1);
            }
            else
            {
                XtraMessageBox.Show("Select a Bodyguard from the list first..", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void simpleButton150_Click(object sender, EventArgs e)
        {
            if (datag3OK == true)
            {
                float[] Coords = GET_ENTITY_COORDS(SpawnedBodyG[dataGridView3.CurrentRow.Index]);
                Owned_Explosion(SpawnedBodyG[dataGridView3.CurrentRow.Index], Coords, 5);

                if (DataG3GodMode[dataGridView3.CurrentRow.Index] == false)
                {
                    int selected = dataGridView3.CurrentRow.Index;
                    dataGridView3.Rows.RemoveAt(selected);

                    var numbersList = SpawnedBodyG.ToList();
                    numbersList.RemoveAt(selected);
                    if (numbersList.Count == 0)
                        datag3OK = false;
                    SpawnedBodyG = numbersList.ToArray();
                }
            }
            else
            {
                XtraMessageBox.Show("Any ped selected..", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void simpleButton153_Click(object sender, EventArgs e)
        {
            if (datag5OK == true)
            {
                if (SpawnedPedLobby[dataGridView5.CurrentRow.Index] != 0)
                {
                    NETWORK_REQUEST_CONTROL_OF_ENTITY(SpawnedPedLobby[dataGridView5.CurrentRow.Index]);
                    Thread.Sleep(500);
                    SET_ENTITY_INVINCIBLE(SpawnedPedLobby[dataGridView5.CurrentRow.Index], 0);
                    Functions.RPCFunc.SET_ENTITY_HEALTH(SpawnedPedLobby[dataGridView5.CurrentRow.Index], 0);
                    Thread.Sleep(100);
                    int selected = dataGridView5.CurrentRow.Index;
                    dataGridView5.Rows.RemoveAt(selected);

                    var numbersList = SpawnedPedLobby.ToList();
                    numbersList.RemoveAt(selected);
                    if (numbersList.Count == 0)
                        datag5OK = false;
                    SpawnedPedLobby = numbersList.ToArray();
                }
                else
                {
                    XtraMessageBox.Show("No ped found.. If this is a bug, contact us.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            else
            {
                XtraMessageBox.Show("No ped found.. If this is a bug, contact us.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void simpleButton152_Click(object sender, EventArgs e)
        {
            if (Attached == true)
            {
                splashScreenManager2.ShowWaitForm();
                dataGridView4.RowCount = 17;
                comboBoxEdit96.Properties.Items.Clear();

                for (int index = 0; index < 17; ++index)
                {
                    string str = GET_PLAYER_NAME(index);
                    if (str == "**Invalid**")
                    {
                        dataGridView4.Rows[index].Cells[0].Value = " -----";
                    }
                    else
                    {
                        dataGridView4.Rows[index].Cells[0].Value = " " + str;
                        comboBoxEdit96.Properties.Items.Add(str);
                        int PED = GET_PLAYER_PED(index);

                        if (IS_PED_IN_ANY_VEHICLE(PED) != 0)
                            dataGridView4.Rows[index].Cells[1].Value = " In Vehicle";
                        else
                            dataGridView4.Rows[index].Cells[1].Value = " -----";
                    }
                }
                comboBoxEdit96.SelectedIndex = 0;
                GetHost6();
                dataGridView4.CurrentCell = dataGridView4[0, 0];
                datag4OK = true;
                EnableDG4Buttons();
                Thread.Sleep(20);
                splashScreenManager2.CloseWaitForm();
                if (PlayersInfoOpen == false && AdvInfo == true)
                {
                    PlayersInform pif = new PlayersInform();
                    pif.Show();
                }
            }
            else
            {
                XtraMessageBox.Show("You must connect to use this function..", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void checkButton65_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton65.Checked)
            {
                dataGridView4.RowCount = 16;
                datag4OK = true;
                TaskRefreshInfo4Start(true);
                EnableDG4Buttons();
                if (PlayersInfoOpen == false && AdvInfo == true)
                {
                    PlayersInform pif = new PlayersInform();
                    pif.Show();
                }
                checkButton65.Text = "Auto-Refresh Info [ON]";
                checkButton65.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                TaskRefreshInfo4Start(false);
                checkButton65.Text = "Auto-Refresh Info [OFF]";
                checkButton65.ResetBackColor();
            }
        }

        private void simpleButton155_Click(object sender, EventArgs e)
        {
            RPC3.Call(Natives.NETWORK_HANDLE_FROM_PLAYER, dataGridView4.CurrentRow.Index, 268632064, 13);
            RPC3.Call(Natives.NETWORK_SEND_TEXT_MESSAGE, ("~r~Using PylezZo Tool: ~w~" + MsgColor + memoEdit1.Text), 268632064);
        }

        private void simpleButton156_Click(object sender, EventArgs e)
        {
            if (comboBoxEdit95.SelectedIndex != -1)
            {
                int PED = GET_PLAYER_PED(dataGridView4.CurrentRow.Index);
                float[] coord = GET_ENTITY_COORDS(PED);
                Functions.RPCFunc.ADD_EXPLOSION(coord, ExplosionType[comboBoxEdit95.SelectedIndex]);
            }
            else
            {
                XtraMessageBox.Show("Select an Explosion type first..", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void simpleButton157_Click(object sender, EventArgs e)
        {
            if (comboBoxEdit97.SelectedIndex != -1 && comboBoxEdit96.SelectedIndex != -1)
            {
                int PED = GET_PLAYER_PED(comboBoxEdit96.SelectedIndex);
                float[] coord = GET_ENTITY_COORDS(PED);
                Owned_Explosion(PED, coord, ExplosionType[comboBoxEdit97.SelectedIndex]);
            }
            else
            {
                XtraMessageBox.Show("Select an Explosion type and a Player first..", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void simpleButton158_Click(object sender, EventArgs e)
        {
            if (comboBoxEdit100.SelectedIndex == 0)
            {
                int PED = GET_PLAYER_PED(dataGridView4.CurrentRow.Index);
                float[] coord = GET_ENTITY_COORDS(PED);
                int hash = GET_HASH_KEY("prop_air_lights_03a");
                Functions.RPCFunc.ATTACH_OBJECT_TO_PLAYER(hash, coord, PED);
            }
            else if (comboBoxEdit100.SelectedIndex == 1)
            {
                int PED = GET_PLAYER_PED(dataGridView4.CurrentRow.Index);
                float[] coord = GET_ENTITY_COORDS(PED);
                int hash = GET_HASH_KEY("prop_parking_wand_01");
                Functions.RPCFunc.ATTACH_OBJECT_TO_PLAYER(hash, coord, PED);
            }
        }

        private void simpleButton154_Click(object sender, EventArgs e)
        {
            int PED = GET_PLAYER_PED(dataGridView4.CurrentRow.Index);
            uint hash = Functions.RPCFunc.STRINGHASH(comboBoxEdit91.Text);
            float[] coords = GET_ENTITY_COORDS(PED);
            coords[0] -= -5f;
            int obj = Functions.RPCFunc.CREATE_OBJECT(hash, coords);
            APPLY_FORCE_TO_ENTITY(obj, -100f, 0.0f, 0f, 0.0f, 0.0f);
            SpawnedObject = obj;
        }

        private void simpleButton162_Click(object sender, EventArgs e)
        {
            if (datag5OK == true)
                ClassicRPC.NCall(NewNatives.GIVE_WEAPON_TO_PED, new object[] { SpawnedPedLobby[dataGridView5.CurrentRow.Index], Functions.Weapons.WeaponsU[comboBoxEdit99.SelectedIndex], 0x270f, 0, 1 });
            else
                XtraMessageBox.Show("Select a Ped from the list over here first.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }

        private void simpleButton160_Click(object sender, EventArgs e)
        {
            if (datag5OK == true && datag4OK == true)
                RPCHook.Call(Natives.TASK_COMBAT_PED, new object[] { SpawnedPedLobby[dataGridView5.CurrentRow.Index], GET_PLAYER_PED(dataGridView4.CurrentRow.Index), 0, 0x10 });
            else
                XtraMessageBox.Show("Select a Ped from the list over here and a Player from the list on the left first.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }

        private void checkButton33_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton33.Checked)
            {
                PS3.SetMemory(0x12CB198, ModderProtON);
                PS3.SetMemory(0x12CB55C, ModderProtON);
                PS3.SetMemory(0x12CB930, ModderProtON);
                PS3.SetMemory(0x12CB70C, ModderProtON);
                checkButton33.BackColor = Color.MediumSpringGreen;
                checkButton33.Text = "Tasks - Anim Protection [ON]";
            }
            else
            {
                PS3.SetMemory(0x12CB198, ModderProtOFF);
                PS3.SetMemory(0x12CB55C, ModderProtOFF);
                PS3.SetMemory(0x12CB930, ModderProtOFF);
                PS3.SetMemory(0x12CB70C, ModderProtOFF);
                checkButton33.ResetBackColor();
                checkButton33.Text = "Tasks - Anim Protection [OFF]";
            }
        }

        private void checkButton30_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton30.Checked)
            {
                PS3.SetMemory(0x12C5638, ModderProtON);
                checkButton30.BackColor = Color.MediumSpringGreen;
                checkButton30.Text = "Explosion Protection [ON]";
            }
            else
            {
                PS3.SetMemory(0x12C5638, ModderProtOFF);
                checkButton30.ResetBackColor();
                checkButton30.Text = "Explosion Protection [OFF]";
            }
        }

        private void checkButton31_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton31.Checked)
            {
                PS3.SetMemory(0x12C3C74, ModderProtON);
                PS3.SetMemory(0x12C3ACC, ModderProtON);
                checkButton31.BackColor = Color.MediumSpringGreen;
                checkButton31.Text = "Take Weapons Protection [ON]";
            }
            else
            {
                PS3.SetMemory(0x12C3C74, ModderProtOFF);
                PS3.SetMemory(0x12C3ACC, ModderProtOFF);
                checkButton31.ResetBackColor();
                checkButton31.Text = "Take Weapons Protection [OFF]";
            }
        }

        private void checkButton32_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton32.Checked)
            {
                PS3.SetMemory(0x12CC958, ModderProtON);
                checkButton32.BackColor = Color.MediumSpringGreen;
                checkButton32.Text = "Clear Tasks Protection [ON]";
            }
            else
            {
                PS3.SetMemory(0x12CC958, ModderProtOFF);
                checkButton32.ResetBackColor();
                checkButton32.Text = "Clear Tasks Protection [OFF]";
            }
        }

        private void checkButton37_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton37.Checked)
            {
                PS3.SetMemory(0x12C4A44, ModderProtON);
                checkButton37.BackColor = Color.MediumSpringGreen;
                checkButton37.Text = "Fire Protection [ON]";
            }
            else
            {
                PS3.SetMemory(0x12C4A44, ModderProtOFF);
                checkButton37.ResetBackColor();
                checkButton37.Text = "Fire Protection [OFF]";
            }
        }

        private void checkButton35_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton35.Checked)
            {
                PS3.SetMemory(0x12D5098, ModderProtON);
                checkButton35.BackColor = Color.MediumSpringGreen;
                checkButton35.Text = "Particle Protection [ON]";
            }
            else
            {
                PS3.SetMemory(0x12D5098, ModderProtOFF);
                checkButton35.ResetBackColor();
                checkButton35.Text = "Particle Protection [OFF]";
            }
        }

        private void checkButton36_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton36.Checked)
            {
                PS3.SetMemory(0x12C413C, ModderProtON);
                checkButton36.BackColor = Color.MediumSpringGreen;
                checkButton36.Text = "Vehicle Alter Protection [ON]";
            }
            else
            {
                PS3.SetMemory(0x12C413C, ModderProtOFF);
                checkButton36.ResetBackColor();
                checkButton36.Text = "Vehicle Alter Protection [OFF]";
            }
        }

        private void checkButton38_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton38.Checked)
            {
                PS3.SetMemory(0x12C69F0, ModderProtON);
                checkButton38.BackColor = Color.MediumSpringGreen;
                checkButton38.Text = "Projectiles Protection [ON]";
            }
            else
            {
                PS3.SetMemory(0x12C69F0, ModderProtOFF);
                checkButton38.ResetBackColor();
                checkButton38.Text = "Projectiles Protection [OFF]";
            }
        }

        private void checkButton34_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton34.Checked)
            {
                PS3.SetMemory(0x12BD36C, ModderProtON);
                checkButton34.BackColor = Color.MediumSpringGreen;
                checkButton34.Text = "Vehicle Control Protection [ON]";
            }
            else
            {
                PS3.SetMemory(0x12BD36C, ModderProtOFF);
                checkButton34.ResetBackColor();
                checkButton34.Text = "Vehicle Control Protection [OFF]";
            }
        }

        private void checkButton16_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton16.Checked)
            {
                PS3.SetMemory(0x12D1E28, ModderProtON);
                checkButton16.BackColor = Color.MediumSpringGreen;
                checkButton16.Text = "Kick Votes Protection [ON]";
            }
            else
            {
                PS3.SetMemory(0x12D1E28, ModderProtOFF);
                checkButton16.ResetBackColor();
                checkButton16.Text = "Kick Votes Protection [OFF]";
            }
        }

        private void checkButton25_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton25.Checked)
            {
                PS3.SetMemory(0x12CFDE8, ModderProtON);
                PS3.SetMemory(0x12D0248, ModderProtON);
                checkButton25.BackColor = Color.MediumSpringGreen;
                checkButton25.Text = "Sounds Protection [ON]";
            }
            else
            {
                PS3.SetMemory(0x12CFDE8, ModderProtOFF);
                PS3.SetMemory(0x12D0248, ModderProtOFF);
                checkButton25.ResetBackColor();
                checkButton25.Text = "Sounds Protection [OFF]";
            }
        }

        private void checkButton15_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton16.Checked)
            {
                PS3.SetMemory(0x12CAE68, ModderProtON);
                checkButton16.BackColor = Color.MediumSpringGreen;
                checkButton16.Text = "Area Protection [ON]";
            }
            else
            {
                PS3.SetMemory(0x12CAE68, ModderProtOFF);
                checkButton16.ResetBackColor();
                checkButton16.Text = "Area Protection [OFF]";
            }
        }

        private void checkButton17_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton17.Checked)
            {
                PS3.SetMemory(0x12D734C, ModderProtON);
                checkButton17.BackColor = Color.MediumSpringGreen;
                checkButton17.Text = "Cash Report Protection [ON]";
            }
            else
            {
                PS3.SetMemory(0x12D734C, ModderProtOFF);
                checkButton17.ResetBackColor();
                checkButton17.Text = "Cash Report Protection [OFF]";
            }
        }

        private void checkButton67_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton67.Checked)
            {
                dataGridView6.RowCount = 16;
                TaskRefreshInfo6Start(true);
                EnableDG6Buttons();
                checkButton67.Text = "Get Players + Auto-Refresh [ON]";
                checkButton67.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                TaskRefreshInfo6Start(false);
                DisableDG6Buttons();
                dataGridView6.Rows.Clear();
                checkButton67.Text = "Get Players + Auto-Refresh [OFF]";
                checkButton67.ResetBackColor();
            }
        }

        private void simpleButton142_Click(object sender, EventArgs e)
        {
            if (comboBoxEdit30.SelectedIndex == 0)
            {
                Functions.RPCFunc.REQUEST_IPL("prologue01");
                Functions.RPCFunc.REQUEST_IPL("Prologue01c");
                Functions.RPCFunc.REQUEST_IPL("Prologue01d");
                Functions.RPCFunc.REQUEST_IPL("Prologue01e");
                Functions.RPCFunc.REQUEST_IPL("Prologue01f");
                Functions.RPCFunc.REQUEST_IPL("Prologue01g");
                Functions.RPCFunc.REQUEST_IPL("prologue01h");
                Functions.RPCFunc.REQUEST_IPL("prologue01i");
                Functions.RPCFunc.REQUEST_IPL("prologue01j");
                Functions.RPCFunc.REQUEST_IPL("prologue01k");
                Functions.RPCFunc.REQUEST_IPL("prologue01z");
                Functions.RPCFunc.REQUEST_IPL("prologue02");
                Functions.RPCFunc.REQUEST_IPL("prologue03");
                Functions.RPCFunc.REQUEST_IPL("prologue03b");
                Functions.RPCFunc.REQUEST_IPL("prologue03_grv_cov");
                Functions.RPCFunc.REQUEST_IPL("prologue03_grv_dug");
                Functions.RPCFunc.REQUEST_IPL("prologue03_grv_fun");
                Functions.RPCFunc.REQUEST_IPL("prologue04");
                Functions.RPCFunc.REQUEST_IPL("prologue04b");
                Functions.RPCFunc.REQUEST_IPL("prologue04_cover");
                Functions.RPCFunc.REQUEST_IPL("prologue05");
                Functions.RPCFunc.REQUEST_IPL("prologue05b");
                Functions.RPCFunc.REQUEST_IPL("prologue06");
                Functions.RPCFunc.REQUEST_IPL("prologue06b");
                Functions.RPCFunc.REQUEST_IPL("prologue06_int");
                Functions.RPCFunc.REQUEST_IPL("prologuerd");
                Functions.RPCFunc.REQUEST_IPL("prologuerdb");
                Functions.RPCFunc.REQUEST_IPL("prologue_DistantLights");
                Functions.RPCFunc.REQUEST_IPL("prologue_grv_torch");
                Functions.RPCFunc.REQUEST_IPL("prologue_m2_door");
                Functions.RPCFunc.REQUEST_IPL("prologue_LODLights");
                Functions.RPCFunc.REQUEST_IPL("DES_ProTree_start");
                Functions.RPCFunc.REQUEST_IPL("DES_ProTree_start_lod");
            }
            else if (comboBoxEdit30.SelectedIndex == 1)
            {
                Functions.RPCFunc.REQUEST_IPL("ufo");
                Functions.RPCFunc.REQUEST_IPL("ufo_eye");
            }
            else if (comboBoxEdit30.SelectedIndex == 2)
            {
                Functions.RPCFunc.REQUEST_IPL("farmint");
                Functions.RPCFunc.REQUEST_IPL("farm_props");
            }
            else if (comboBoxEdit30.SelectedIndex == 3)
            {
                Functions.RPCFunc.REQUEST_IPL("smBoat");
            }
            else if (comboBoxEdit30.SelectedIndex == 4)
            {
                Functions.RPCFunc.REQUEST_IPL("FINBANK");
            }
            else if (comboBoxEdit30.SelectedIndex == 5)
            {
                Functions.RPCFunc.REQUEST_IPL("post_hiest_unload");
            }
            else if (comboBoxEdit30.SelectedIndex == 6)
            {
                Functions.RPCFunc.REQUEST_IPL("cargoShip");
            }
            else if (comboBoxEdit30.SelectedIndex == 7)
            {
                Functions.RPCFunc.REQUEST_IPL("sunkcargoship");
                Functions.RPCFunc.REQUEST_IPL("SUNK_SHIP_FIRE");
            }
            else if (comboBoxEdit30.SelectedIndex == 8)
            {
                Functions.RPCFunc.REQUEST_IPL("hei_carrier");
                Functions.RPCFunc.REQUEST_IPL("Hei_carrier");
                Functions.RPCFunc.REQUEST_IPL("hei_carrier_int1");
                Functions.RPCFunc.REQUEST_IPL("hei_carrier_int2");
                Functions.RPCFunc.REQUEST_IPL("hei_carrier_int3");
                Functions.RPCFunc.REQUEST_IPL("hei_carrier_int4");
                Functions.RPCFunc.REQUEST_IPL("hei_carrier_int5");
                Functions.RPCFunc.REQUEST_IPL("hei_carrier_int6");
                Functions.RPCFunc.REQUEST_IPL("hei_carrier_DistantLights");
                Functions.RPCFunc.REQUEST_IPL("hei_carrier_LODLights");
            }
        }

        private void simpleButton144_Click(object sender, EventArgs e)
        {
            int num;
            float[] numArray;
            Functions.RPCFunc.SCREEN_FADE_OUT(400);
            Thread.Sleep(0x3e8);
            if (comboBoxEdit30.SelectedIndex == 0)
            {
                num = Functions.RPCFunc.PLAYER_PED_ID();
                numArray = new float[] { 3595.397f, -4893.727f, 115.8384f };
                if (Functions.RPCFunc.IS_PED_IN_VEHICLE(num) == 1)
                {
                    Functions.RPCFunc.SET_ENTITY_COORDS(Functions.RPCFunc.GET_PED_VEHICLE_IS_IN(num), numArray);
                }
                else
                {
                    Functions.RPCFunc.SET_ENTITY_COORDS(num, numArray);
                }
            }
            else if (comboBoxEdit30.SelectedIndex == 1)
            {
                num = Functions.RPCFunc.PLAYER_PED_ID();
                numArray = new float[] { -2050.7517f, 3243.9318f, 1455.5935f };
                if (Functions.RPCFunc.IS_PED_IN_VEHICLE(num) == 1)
                {
                    Functions.RPCFunc.SET_ENTITY_COORDS(Functions.RPCFunc.GET_PED_VEHICLE_IS_IN(num), numArray);
                }
                else
                {
                    Functions.RPCFunc.SET_ENTITY_COORDS(num, numArray);
                }
            }
            else if (comboBoxEdit30.SelectedIndex == 2)
            {
                num = Functions.RPCFunc.PLAYER_PED_ID();
                numArray = new float[] { 2409.8337f, 4963.3256f, 45.4765f };
                if (Functions.RPCFunc.IS_PED_IN_VEHICLE(num) == 1)
                {
                    Functions.RPCFunc.SET_ENTITY_COORDS(Functions.RPCFunc.GET_PED_VEHICLE_IS_IN(num), numArray);
                }
                else
                {
                    Functions.RPCFunc.SET_ENTITY_COORDS(num, numArray);
                }
            }
            else if (comboBoxEdit30.SelectedIndex == 3)
            {
                num = Functions.RPCFunc.PLAYER_PED_ID();
                numArray = new float[] { -2046.1260f, -1030.4353f, 11.9807f };
                if (Functions.RPCFunc.IS_PED_IN_VEHICLE(num) == 1)
                {
                    Functions.RPCFunc.SET_ENTITY_COORDS(Functions.RPCFunc.GET_PED_VEHICLE_IS_IN(num), numArray);
                }
                else
                {
                    Functions.RPCFunc.SET_ENTITY_COORDS(num, numArray);
                }
            }
            else if (comboBoxEdit30.SelectedIndex == 4)
            {
                num = Functions.RPCFunc.PLAYER_PED_ID();
                numArray = new float[] { 4.1349f, -665.2984f, 13.1306f };
                if (Functions.RPCFunc.IS_PED_IN_VEHICLE(num) == 1)
                {
                    Functions.RPCFunc.SET_ENTITY_COORDS(Functions.RPCFunc.GET_PED_VEHICLE_IS_IN(num), numArray);
                }
                else
                {
                    Functions.RPCFunc.SET_ENTITY_COORDS(num, numArray);
                }
            }
            else if (comboBoxEdit30.SelectedIndex == 5)
            {
                num = Functions.RPCFunc.PLAYER_PED_ID();
                numArray = new float[] { -624.7712f, -233.189f, 38.05701f };
                if (Functions.RPCFunc.IS_PED_IN_VEHICLE(num) == 1)
                {
                    Functions.RPCFunc.SET_ENTITY_COORDS(Functions.RPCFunc.GET_PED_VEHICLE_IS_IN(num), numArray);
                }
                else
                {
                    Functions.RPCFunc.SET_ENTITY_COORDS(num, numArray);
                }
            }
            else if (comboBoxEdit30.SelectedIndex == 6)
            {
                num = Functions.RPCFunc.PLAYER_PED_ID();
                numArray = new float[] { -141.1365f, -2388.9226f, 6.0014f };
                if (Functions.RPCFunc.IS_PED_IN_VEHICLE(num) == 1)
                {
                    Functions.RPCFunc.SET_ENTITY_COORDS(Functions.RPCFunc.GET_PED_VEHICLE_IS_IN(num), numArray);
                }
                else
                {
                    Functions.RPCFunc.SET_ENTITY_COORDS(num, numArray);
                }
            }
            else if (comboBoxEdit30.SelectedIndex == 7)
            {
                num = Functions.RPCFunc.PLAYER_PED_ID();
                numArray = new float[] { -143.3871f, -2385.1621f, 6.0014f };
                if (Functions.RPCFunc.IS_PED_IN_VEHICLE(num) == 1)
                {
                    Functions.RPCFunc.SET_ENTITY_COORDS(Functions.RPCFunc.GET_PED_VEHICLE_IS_IN(num), numArray);
                }
                else
                {
                    Functions.RPCFunc.SET_ENTITY_COORDS(num, numArray);
                }
            }
            else if (comboBoxEdit30.SelectedIndex == 8)
            {
                num = Functions.RPCFunc.PLAYER_PED_ID();
                numArray = new float[] { 3060.4377f, -4642.3623f, 15.2613f };
                if (Functions.RPCFunc.IS_PED_IN_VEHICLE(num) == 1)
                {
                    Functions.RPCFunc.SET_ENTITY_COORDS(Functions.RPCFunc.GET_PED_VEHICLE_IS_IN(num), numArray);
                }
                else
                {
                    Functions.RPCFunc.SET_ENTITY_COORDS(num, numArray);
                }
            }
            Thread.Sleep(0x9c4);
            Functions.RPCFunc.SCREEN_FADE_IN(400);
        }

        private void simpleButton143_Click(object sender, EventArgs e)
        {
            if (comboBoxEdit30.SelectedIndex == 0)
            {
                Functions.RPCFunc.REMOVE_IPL("prologue01");
                Functions.RPCFunc.REMOVE_IPL("Prologue01c");
                Functions.RPCFunc.REMOVE_IPL("Prologue01d");
                Functions.RPCFunc.REMOVE_IPL("Prologue01e");
                Functions.RPCFunc.REMOVE_IPL("Prologue01f");
                Functions.RPCFunc.REMOVE_IPL("Prologue01g");
                Functions.RPCFunc.REMOVE_IPL("prologue01h");
                Functions.RPCFunc.REMOVE_IPL("prologue01i");
                Functions.RPCFunc.REMOVE_IPL("prologue01j");
                Functions.RPCFunc.REMOVE_IPL("prologue01k");
                Functions.RPCFunc.REMOVE_IPL("prologue01z");
                Functions.RPCFunc.REMOVE_IPL("prologue02");
                Functions.RPCFunc.REMOVE_IPL("prologue03");
                Functions.RPCFunc.REMOVE_IPL("prologue03b");
                Functions.RPCFunc.REMOVE_IPL("prologue03_grv_cov");
                Functions.RPCFunc.REMOVE_IPL("prologue03_grv_dug");
                Functions.RPCFunc.REMOVE_IPL("prologue03_grv_fun");
                Functions.RPCFunc.REMOVE_IPL("prologue04");
                Functions.RPCFunc.REMOVE_IPL("prologue04b");
                Functions.RPCFunc.REMOVE_IPL("prologue04_cover");
                Functions.RPCFunc.REMOVE_IPL("prologue05");
                Functions.RPCFunc.REMOVE_IPL("prologue05b");
                Functions.RPCFunc.REMOVE_IPL("prologue06");
                Functions.RPCFunc.REMOVE_IPL("prologue06b");
                Functions.RPCFunc.REMOVE_IPL("prologue06_int");
                Functions.RPCFunc.REMOVE_IPL("prologuerd");
                Functions.RPCFunc.REMOVE_IPL("prologuerdb");
                Functions.RPCFunc.REMOVE_IPL("prologue_DistantLights");
                Functions.RPCFunc.REMOVE_IPL("prologue_grv_torch");
                Functions.RPCFunc.REMOVE_IPL("prologue_m2_door");
                Functions.RPCFunc.REMOVE_IPL("prologue_LODLights");
                Functions.RPCFunc.REMOVE_IPL("DES_ProTree_start");
                Functions.RPCFunc.REMOVE_IPL("DES_ProTree_start_lod");
            }
            else if (comboBoxEdit30.SelectedIndex == 1)
            {
                Functions.RPCFunc.REMOVE_IPL("ufo");
                Functions.RPCFunc.REMOVE_IPL("ufo_eye");
            }
            else if (comboBoxEdit30.SelectedIndex == 2)
            {
                Functions.RPCFunc.REMOVE_IPL("farmint");
                Functions.RPCFunc.REMOVE_IPL("farm_props");
            }
            else if (comboBoxEdit30.SelectedIndex == 3)
            {
                Functions.RPCFunc.REMOVE_IPL("smBoat");
            }
            else if (comboBoxEdit30.SelectedIndex == 4)
            {
                Functions.RPCFunc.REMOVE_IPL("FINBANK");
            }
            else if (comboBoxEdit30.SelectedIndex == 5)
            {
                Functions.RPCFunc.REMOVE_IPL("post_hiest_unload");
            }
            else if (comboBoxEdit30.SelectedIndex == 6)
            {
                Functions.RPCFunc.REMOVE_IPL("cargoShip");
            }
            else if (comboBoxEdit30.SelectedIndex == 7)
            {
                Functions.RPCFunc.REMOVE_IPL("sunkcargoship");
                Functions.RPCFunc.REMOVE_IPL("SUNK_SHIP_FIRE");
            }
            else if (comboBoxEdit30.SelectedIndex == 8)
            {
                Functions.RPCFunc.REMOVE_IPL("hei_carrier");
                Functions.RPCFunc.REMOVE_IPL("Hei_carrier");
                Functions.RPCFunc.REMOVE_IPL("hei_carrier_int1");
                Functions.RPCFunc.REMOVE_IPL("hei_carrier_int2");
                Functions.RPCFunc.REMOVE_IPL("hei_carrier_int3");
                Functions.RPCFunc.REMOVE_IPL("hei_carrier_int4");
                Functions.RPCFunc.REMOVE_IPL("hei_carrier_int5");
                Functions.RPCFunc.REMOVE_IPL("hei_carrier_int6");
                Functions.RPCFunc.REMOVE_IPL("hei_carrier_DistantLights");
                Functions.RPCFunc.REMOVE_IPL("hei_carrier_LODLights");
            }
        }

        private void checkButton68_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton68.Checked)
            {
                TaskExplodeTalkingStart(true);
                checkButton68.Text = "Explode Player [ON]";
                checkButton68.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                TaskExplodeTalkingStart(false);
                checkButton68.Text = "Explode Player [OFF]";
                checkButton68.ResetBackColor();
            }
        }

        private void checkButton69_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton69.Checked)
            {
                TaskDisableActionsTalkingStart(true);
                checkButton69.Text = "Disable Actions [ON]";
                checkButton69.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                TaskDisableActionsTalkingStart(false);
                checkButton69.Text = "Disable Actions [OFF]";
                checkButton69.ResetBackColor();
            }
        }

        private void checkButton70_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton70.Checked)
            {
                TaskFiveStarsTalkingStart(true);
                checkButton70.Text = "Give 5 Stars [ON]";
                checkButton70.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                TaskFiveStarsTalkingStart(false);
                checkButton70.Text = "Give 5 Stars [OFF]";
                checkButton70.ResetBackColor();
            }
        }

        private void checkButton71_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton71.Checked)
            {
                TaskTrapCageTalkingStart(true);
                checkButton71.Text = "Trap in Cage [ON]";
                checkButton71.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                TaskTrapCageTalkingStart(false);
                checkButton71.Text = "Trap in Cage [OFF]";
                checkButton71.ResetBackColor();
            }
        }

        private void checkButton72_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton72.Checked)
            {
                TaskCloneTalkingStart(true);
                checkButton72.Text = "Clone Player [ON]";
                checkButton72.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                TaskCloneTalkingStart(false);
                checkButton72.Text = "Clone Player [OFF]";
                checkButton72.ResetBackColor();
            }
        }

        private void checkButton73_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton73.Checked)
            {
                TaskSenEnemySwatTalkingStart(true);
                checkButton73.Text = "Send Enemy Swat [ON]";
                checkButton73.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                TaskSenEnemySwatTalkingStart(false);
                checkButton73.Text = "Send Enemy Swat [OFF]";
                checkButton73.ResetBackColor();
            }
        }

        private void checkButton74_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton74.Checked)
            {
                TaskSenEnemyBuzzardTalkingStart(true);
                checkButton74.Text = "Send Enemy Buzzard [ON]";
                checkButton74.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                TaskSenEnemyBuzzardTalkingStart(false);
                checkButton74.Text = "Send Enemy Buzzard [OFF]";
                checkButton74.ResetBackColor();
            }
        }

        private void checkButton75_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton75.Checked)
            {
                TaskSendMessageTalkingStart(true);
                checkButton75.Text = "Spam Message [ON]";
                checkButton75.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                TaskSendMessageTalkingStart(false);
                checkButton75.Text = "Spam Message [OFF]";
                checkButton75.ResetBackColor();
            }
        }

        private void toggleSwitch2_Toggled(object sender, EventArgs e)
        {
            if (toggleSwitch2.IsOn)
            {
                if (fullobjcopied2 == false)
                {
                    splashScreenManager2.ShowWaitForm();
                    for (int i = 0; i < comboBoxEdit29.Properties.Items.Count; i++)
                    {
                        Array.Resize(ref fullobjarr2, fullobjarr2.Length + 1);
                        fullobjarr2[fullobjarr2.Length - 1].Insert(i, comboBoxEdit29.Properties.Items[i].ToString());
                    }
                }
                comboBoxEdit29.Properties.Items.Clear();
                comboBoxEdit29.Properties.Items.Add(mainobjarr);
                comboBoxEdit29.SelectedIndex = 0;
                fullobjcopied2 = true;
                checkEdit7.Checked = false;
                checkEdit7.Enabled = false;
                splashScreenManager2.CloseWaitForm();
            }
            else
            {
                checkEdit7.Enabled = true;
                comboBoxEdit29.Properties.Items.Clear();
                comboBoxEdit29.Properties.Items.Add(fullobjarr);
                comboBoxEdit29.SelectedIndex = 0;
            }
        }

        private void comboBoxEdit94_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBoxEdit94.SelectedIndex == 0)
            {
                MsgColor = "~w~";
            }
            else if (comboBoxEdit94.SelectedIndex == 1)
            {
                MsgColor = "~r~";
            }
            else if (comboBoxEdit94.SelectedIndex == 2)
            {
                MsgColor = "~b~";
            }
            else if (comboBoxEdit94.SelectedIndex == 3)
            {
                MsgColor = "~u~";
            }
            else if (comboBoxEdit94.SelectedIndex == 4)
            {
                MsgColor = "~g~";
            }
            else if (comboBoxEdit94.SelectedIndex == 5)
            {
                MsgColor = "~o~";
            }
            else if (comboBoxEdit94.SelectedIndex == 6)
            {
                MsgColor = "~y~";
            }
            else if (comboBoxEdit94.SelectedIndex == 7)
            {
                MsgColor = "~p~";
            }
            else if (comboBoxEdit94.SelectedIndex == 8)
            {
                MsgColor = "~c~";
            }
            else if (comboBoxEdit94.SelectedIndex == 9)
            {
                MsgColor = "~m~";
            }
            else if (comboBoxEdit94.SelectedIndex == 10)
            {
                MsgColor = "~h~";
            }
        }

        private void checkButton76_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton76.Checked)
            {
                TaskSpawnObjectTalkingStart(true);
                checkButton76.Text = "Spawn Object on Player [ON]";
                checkButton76.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                TaskSpawnObjectTalkingStart(false);
                checkButton76.Text = "Spawn Object on Player [OFF]";
                checkButton76.ResetBackColor();
            }
        }

        private void checkButton77_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton76.Checked)
            {
                TaskSpawnPedTalkingStart(true);
                checkButton76.Text = "Spawn Object on Player [ON]";
                checkButton76.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                TaskSpawnPedTalkingStart(false);
                checkButton76.Text = "Spawn Object on Player [OFF]";
                checkButton76.ResetBackColor();
                
            }
        }

        private void simpleButton161_Click(object sender, EventArgs e)
        {
            if (Attached)
            {
                splashScreenManager2.ShowWaitForm();
                GrabIPAddresses();
            }
            else
            {
                XtraMessageBox.Show("You must be Connected to do this!", "Error :( ", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void checkButton78_CheckedChanged(object sender, EventArgs e)
        {
            if (Attached)
            {
                if (checkButton78.Checked)
                {
                    if (trackBarControl2.Value == 1)
                    {
                        timer9.Interval = 20000;
                        timer9.Start();
                    }
                    else if (trackBarControl2.Value == 2)
                    {
                        timer9.Interval = 30000;
                        timer9.Start();
                    }
                    else if (trackBarControl2.Value == 3)
                    {
                        timer9.Interval = 40000;
                        timer9.Start();
                    }
                    else if (trackBarControl2.Value == 4)
                    {
                        timer9.Interval = 50000;
                        timer9.Start();
                    }
                    else if (trackBarControl2.Value == 5)
                    {
                        timer9.Interval = 60000;
                        timer9.Start();
                    }
                    checkButton78.Text = "Auto-Refresh Players Info [ON]";
                    checkButton78.BackColor = Color.MediumSpringGreen;
                }
                else
                {
                    timer9.Stop();
                    checkButton78.Text = "Auto-Refresh Players Info [OFF]";
                    checkButton78.ResetBackColor();
                }
            }
            else
            {
                XtraMessageBox.Show("You must be Connected to do this!", "Error :( ", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void simpleButton164_Click(object sender, EventArgs e)
        {
            dataGridView7.Rows.Clear();
        }

        private void timer9_Tick(object sender, EventArgs e)
        {
            GrabIPAddresses();
        }

        private void simpleButton169_Click(object sender, EventArgs e)
        {
            SPAWN_VEHICLE_LOBBY(dataGridView1.CurrentRow.Index, comboBoxEdit103.Text, checkEdit8.Checked, checkEdit10.Checked, checkEdit9.Checked);
        }

        private void checkButton23_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton23.Checked)
            {
                TaskTempAlertStart(true);
                checkButton23.Text = "Temperature Alert [ON]";
                checkButton23.BackColor = Color.MediumSpringGreen;
            }
            else
            {
                TaskTempAlertStart(false);
                checkButton23.Text = "Temperature Alert [OFF]";
                checkButton23.ResetBackColor();
                Temperature = "";
            }
        }

        private void simpleButton165_Click(object sender, EventArgs e)
        {
            if (Directory.Exists("Files") && File.Exists("Files/CIDs.txt"))
            {
                Process proc = new Process();
                proc.StartInfo.FileName = "CIDs.txt";
                proc.StartInfo.WorkingDirectory = "Files";
                proc.StartInfo.CreateNoWindow = false;
                proc.Start();
            }
            else
            {
                XtraMessageBox.Show("File CIDs.txt or Files Directory not found. \nMaybe you deleted one of them or both? \nDownload the Tool archivio again, and please do not delete anything. :)", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void simpleButton170_Click(object sender, EventArgs e)
        {
            Temp.FanC fa = new Temp.FanC();
            fa.Show();
        }

        private void barButtonItem4_ItemClick(object sender, ItemClickEventArgs e)
        {
            XtraMessageBox.Show("Server is offline..\nAll the mods were hosted on Cybm so i've disabled this function :(", "Info", MessageBoxButtons.OK, MessageBoxIcon.Error);
            //Mods.ModsDL mod = new Mods.ModsDL();
            //mod.Show();
        }

        private void barButtonItem14_ItemClick(object sender, ItemClickEventArgs e)
        {
            Application.Restart();
        }

        private void barButtonItem15_ItemClick(object sender, ItemClickEventArgs e)
        {
            Application.Exit();
        }

        private void barButtonItem7_ItemClick(object sender, ItemClickEventArgs e)
        {
            XtraMessageBox.Show("This is the latest and last version of this tool.\nNo updates available", "Info ", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        }

        private void barButtonItem8_ItemClick(object sender, ItemClickEventArgs e)
        {
            XtraMessageBox.Show("Changelog not available.\nServer is offline. Anyway this is just the v1.0.1 so there are not that many changes :)", "Changelog Hystory", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }

        private void barButtonItem9_ItemClick(object sender, ItemClickEventArgs e)
        {
            XtraMessageBox.Show("PylezZo GTAV Extreme Tool v1.0.1 \n\n\nDeveloped by LizZo on Cybermodding.\nThis tool is free, and will be free forever! Just consider a donation if you like this tool :)\nOfficial support forum: www.cybermodding.it/forum.php", "Information", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
        
        private void barButtonItem5_ItemClick(object sender, ItemClickEventArgs e)
        {
            XtraMessageBox.Show("Server is offline..\nAll the eboots were hosted on Cybm so i've disabled this function :(", "Info", MessageBoxButtons.OK, MessageBoxIcon.Error);
            //EBOOTS.EBOOTDL EB = new EBOOTS.EBOOTDL();
            //EB.Show();
        }

        private void timer10_Tick(object sender, EventArgs e)
        {
            Main.uint_9 = PS3.Extension.ReadUInt32(Main.OffTheRadarPointer);
            Main.uint_8 = Main.uint_9 + 150552U;
            PS3.Extension.WriteInt32(Main.uint_8, 5);
            PS3.Extension.WriteInt32(Main.uint_8, 0);
            PS3.Extension.WriteInt32(Main.uint_8, 5);
            Thread.Sleep(300);
            PS3.Extension.WriteInt32(Main.uint_8, 5);
            PS3.Extension.WriteInt32(Main.uint_8, 0);
            PS3.Extension.WriteInt32(Main.uint_8, 5);
        }

        private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            PlayersInfoInt = dataGridView1.CurrentRow.Index;
            if (datag1OK == true)
            {
                int SIndex = dataGridView1.CurrentRow.Index;
                if (DataG1Tasks[SIndex] == true)
                {
                    checkButton57.Checked = true;
                    checkButton57.BackColor = Color.MediumSpringGreen;
                    checkButton57.Text = "Disable Actions [ON]";
                }
                else
                {
                    checkButton57.Checked = false;
                    checkButton57.ResetBackColor();
                    checkButton57.Text = "Disable Actions [OFF]";
                }

                if (DataG1LockInVeh[SIndex] == true)
                {
                    checkButton55.Checked = true;
                    checkButton55.BackColor = Color.MediumSpringGreen;
                    checkButton55.Text = "Lock into Vehicle [ON]";
                }
                else
                {
                    checkButton55.Checked = false;
                    checkButton55.ResetBackColor();
                    checkButton55.Text = "Lock into Vehicle [OFF]";
                }

                if (DataG1ForceF[SIndex] == true)
                {
                    checkButton56.Checked = true;
                    checkButton56.BackColor = Color.MediumSpringGreen;
                    checkButton56.Text = "ForceField [ON]";
                }
                else
                {
                    checkButton56.Checked = false;
                    checkButton56.ResetBackColor();
                    checkButton56.Text = "ForceField [OFF]";
                }

                if (DataG1DropMoney[SIndex] == true)
                {
                    checkButton58.Checked = true;
                    checkButton58.BackColor = Color.MediumSpringGreen;
                    checkButton58.Text = "Drop Money [ON]";
                }
                else
                {
                    checkButton58.Checked = false;
                    checkButton58.ResetBackColor();
                    checkButton58.Text = "Drop Money [OFF]";
                }

                if (DataG1InfStars[SIndex] == true)
                {
                    checkEdit44.Checked = true;
                }
                else
                {
                    checkEdit44.Checked = false;
                }

                trackBarControl4.Value = DataG1WantedLevel[dataGridView1.CurrentRow.Index];
            }
        }

        private void dataGridView2_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            PlayersInfoInt = dataGridView2.CurrentRow.Index;
        }

        private void dataGridView3_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (datag3OK == true)
            {
                int SIndex = dataGridView3.CurrentRow.Index;
                if (DataG3GodMode[SIndex] == true)
                {
                    checkButton64.Checked = true;
                    checkButton64.BackColor = Color.MediumSpringGreen;
                    checkButton64.Text = "God Mode Bodyguard [ON]";
                }
                else
                {
                    checkButton64.Checked = false;
                    checkButton64.ResetBackColor();
                    checkButton64.Text = "God Mode Bodyguard [OFF]";
                }

                if (DataG3Invisible[SIndex] == true)
                {
                    checkButton62.Checked = true;
                    checkButton62.BackColor = Color.MediumSpringGreen;
                    checkButton62.Text = "Invisibile Bodyguard [ON]";
                }
                else
                {
                    checkButton62.Checked = false;
                    checkButton62.ResetBackColor();
                    checkButton62.Text = "Invisibile Bodyguard [OFF]";
                }

                if (DataG3ohk[SIndex] == true)
                {
                    checkButton63.Checked = true;
                    checkButton63.BackColor = Color.MediumSpringGreen;
                    checkButton63.Text = "One Hit Kill Bodyguard [ON]";
                }
                else
                {
                    checkButton63.Checked = false;
                    checkButton63.ResetBackColor();
                    checkButton63.Text = "One Hit Kill Bodyguard [OFF]";
                }
            }
        }

        private void dataGridView4_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            PlayersInfoInt = dataGridView4.CurrentRow.Index;
            if (dataGridView4.CurrentRow.Index != -1 && datag4OK == true)
            {
                int SIndex = dataGridView4.CurrentRow.Index;
                if (DataG4loopshoot[SIndex] == true)
                {
                    checkButton66.Checked = true;
                    checkButton66.BackColor = Color.MediumSpringGreen;
                    checkButton66.Text = "Loop Shoot to Player [ON]";
                }
                else
                {
                    checkButton66.Checked = false;
                    checkButton66.ResetBackColor();
                    checkButton66.Text = "Loop Shoot to Player [OFF]";
                }
            }
        }

        private void dataGridView6_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void timer6_Tick(object sender, EventArgs e)
        {
            
        }

        private void simpleButton171_Click(object sender, EventArgs e)
        {
            int PID = PLAYER_PED_ID();
            float[] fl = new float[3];
            fl[1] = 10f;
            fl[2] += 1f;
            float[] fl2 = fl;
            float[] Pos = RPCHook.Call2<float[]>(OLDNatives.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, (object)PID, (object)fl2);

            if (Functions.RPCFunc.IS_PED_IN_ANY_VEHICLE(PID) != 0)
                Functions.RPCFunc.SET_ENTITY_COORDS(Functions.RPCFunc.GET_PED_VEHICLE_IS_IN(PID), Pos);
            else
                Functions.RPCFunc.SET_ENTITY_COORDS(PID, Pos);
        }

        private void simpleButton172_Click(object sender, EventArgs e)
        {
            int PID = PLAYER_PED_ID();
            float[] fl = new float[3];
            fl[1] = 50f;
            fl[2] += 1f;
            float[] fl2 = fl;
            float[] Pos = RPCHook.Call2<float[]>(OLDNatives.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, (object)PID, (object)fl2);
            
            if (Functions.RPCFunc.IS_PED_IN_ANY_VEHICLE(PID) != 0)
                Functions.RPCFunc.SET_ENTITY_COORDS(Functions.RPCFunc.GET_PED_VEHICLE_IS_IN(PID), Pos);
            else
                Functions.RPCFunc.SET_ENTITY_COORDS(PID, Pos);
        }

        private void checkButton22_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton22.Checked)
            {
                Need4SpeedVehicle(true);
                checkButton22.Text = "Need for Speed [ON]";
            }
            else
            {
                Need4SpeedVehicle(false);
                checkButton22.Text = "Need for Speed [OFF]";
            }
        }

        private void simpleButton119_Click(object sender, EventArgs e)
        {
            if (checkButton5.Checked)
            {
                checkButton5.Checked = false;
                checkButton5.Text = "God Mode [OFF]";
                checkButton5.ResetBackColor();
            }
            int Me = PLAYER_PED_ID();
            SET_ENTITY_INVINCIBLE(Me, 0);
            float[] coord = GET_ENTITY_COORDS(Me);
            Owned_Explosion(Me, coord, 5);
        }

        private void checkButton55_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton55.Checked)
            {
                DataG1LockInVeh[dataGridView1.CurrentRow.Index] = true;
                int PED = GET_PLAYER_PED(dataGridView1.CurrentRow.Index);
                if (IS_PED_IN_ANY_VEHICLE(PED) != 0)
                {
                    int Veh = GET_VEHICLE_PED_IS_IN(PED);
                    NETWORK_REQUEST_CONTROL_OF_ENTITY(Veh);
                    Functions.RPCFunc.SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(Veh, true);
                    ClassicRPC.CompleteReq();
                    Functions.RPCFunc.SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(Veh, PED, true);
                    ClassicRPC.CompleteReq();
                    Functions.RPCFunc.SET_VEHICLE_DOORS_LOCKED(Veh, 4);
                }
                checkButton55.BackColor = Color.MediumSpringGreen;
                checkButton55.Text = "Lock into Vehicle [ON]";
            }
            else
            {
                DataG1LockInVeh[dataGridView1.CurrentRow.Index] = false;
                int PED = GET_PLAYER_PED(dataGridView1.CurrentRow.Index);
                if (IS_PED_IN_ANY_VEHICLE(PED) != 0)
                {
                    int Veh = GET_VEHICLE_PED_IS_IN(PED);
                    NETWORK_REQUEST_CONTROL_OF_ENTITY(Veh);
                    Functions.RPCFunc.SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(Veh, false);
                    ClassicRPC.CompleteReq();
                    Functions.RPCFunc.SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(Veh, PED, false);
                    ClassicRPC.CompleteReq();
                    Functions.RPCFunc.SET_VEHICLE_DOORS_LOCKED(Veh, 0);
                    Functions.RPCFunc.SET_VEHICLE_DOORS_LOCKED(Veh, 0);
                }
                checkButton55.Text = "Lock into Vehicle [OFF]";
                checkButton55.ResetBackColor();
            }
        }

        private void simpleButton132_Click(object sender, EventArgs e)
        {
            Process.Start("https://www.cybermodding.it/forum.php");
        }

        private void simpleButton173_Click(object sender, EventArgs e)
        {
            if (Attached)
            {
                int PED = PLAYER_PED_ID();
                if (IS_PED_IN_ANY_VEHICLE(PED) != 0)
                {
                    ClassicRPC.Call(Natives.APPLY_FORCE_TO_ENTITY, new object[] { GET_VEHICLE_PED_IS_IN(PED), 1, 70.0f, 10.0f, 31.0f, 30.0f, 9.0f, 11.0f, 0, 1, 1, 1, 1, 1 });
                    //APPLY_FORCE_TO_ENTITY(GET_VEHICLE_PED_IS_IN(PED), 100f, 0.0f, 40f, 0.0f, 0.0f);
                }
                else
                {
                    ClassicRPC.Call(Natives.APPLY_FORCE_TO_ENTITY, new object[] { PED, 1, 70.0f, 10.0f, 31.0f, 30.0f, 9.0f, 11.0f, 0, 1, 1, 1, 1, 1 });
                    //APPLY_FORCE_TO_ENTITY(PED, 100f, 0.0f, 40f, 0.0f, 0.0f);
                }
            }
        }

        private void barButtonItem16_ItemClick(object sender, ItemClickEventArgs e)
        {
            EBOOTS.EBOOTBuilder EBB = new EBOOTS.EBOOTBuilder();
            EBB.Show();
        }

        private void barButtonItem17_ItemClick(object sender, ItemClickEventArgs e)
        {
            if (XtraMessageBox.Show("Whenever you click on 'Get - Refresh Players List' button, a new window will show up. \nIt contains some advanced info about the selected player. \nHere you can Enable or Disable it. Press YES to enable, press NO to disable.", "Advanced info", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
            {
                AdvInfo = true;
            }
            else
            {
                AdvInfo = false;
            }
        }

        private void trackBarControl4_EditValueChanged(object sender, EventArgs e)
        {
            if (datag1OK == true)
            {
                ClassicRPC.Call(Natives.SET_PLAYER_WANTED_LEVEL, new object[] { dataGridView1.CurrentRow.Index, trackBarControl4.Value, 0 });
                ClassicRPC.Call(Natives.SET_PLAYER_WANTED_LEVEL_NOW, new object[] { dataGridView1.CurrentRow.Index, 0 });
                DataG1WantedLevel[dataGridView1.CurrentRow.Index] = trackBarControl4.Value;
            }
            else
            {
                XtraMessageBox.Show("Get the players list first..", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void trackBarControl5_EditValueChanged(object sender, EventArgs e)
        {
            if (Attached)
            {
                ClassicRPC.Call(Natives.SET_ENTITY_HEALTH, PLAYER_PED_ID(), trackBarControl5.Value);
            }
        }

        private void simpleButton68_Click(object sender, EventArgs e)
        {
            if (Attached)
            {
                Functions.RPCFunc.TeleToWayp();
            }
        }

        private void simpleButton166_Click(object sender, EventArgs e)
        {
            if (datag5OK == true)
                Functions.RPCFunc.CHANGE_PLAYER_PED(SpawnedPedLobby[dataGridView5.CurrentRow.Index]);
            else
                XtraMessageBox.Show("Select a Ped from the list over here.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }

        private void simpleButton167_Click(object sender, EventArgs e)
        {
            ClassicRPC.Call(Natives.NETWORK_OVERRIDE_CLOCK_TIME, timeEdit1.Time.Hour, timeEdit1.Time.Minute);
        }

        private void simpleButton168_Click(object sender, EventArgs e)
        {
            if (datag5OK == true)
            {
                if (SpawnedPedLobby[dataGridView5.CurrentRow.Index] != 0)
                {
                    float[] coord = GET_ENTITY_COORDS(SpawnedPedLobby[dataGridView5.CurrentRow.Index]);
                    Owned_Explosion(SpawnedPedLobby[dataGridView5.CurrentRow.Index], coord, 5);

                    if (DataG5GodMode[dataGridView5.CurrentRow.Index] == false)
                    {
                        int selected = dataGridView5.CurrentRow.Index;
                        dataGridView5.Rows.RemoveAt(selected);

                        var numbersList = SpawnedPedLobby.ToList();
                        numbersList.RemoveAt(selected);
                        if (numbersList.Count == 0)
                            datag5OK = false;
                        SpawnedPedLobby = numbersList.ToArray();
                    }
                }
                else
                {
                    XtraMessageBox.Show("No ped found.. If this is a bug, contact us.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            else
            {
                XtraMessageBox.Show("No ped found.. Spawn a ped first. \nIf this is a bug, contact us.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void simpleButton174_Click(object sender, EventArgs e)
        {
            ClassicRPC.Call(Natives.SET_PED_RANDOM_COMPONENT_VARIATION, PLAYER_PED_ID(), 1);
        }

        private void checkButton66_CheckedChanged(object sender, EventArgs e)
        {
            if (datag5OK == true)
            {
                if (checkButton66.Checked)
                {
                    Functions.RPCFunc.ENTITY_VISIBLE(SpawnedPedLobby[dataGridView5.CurrentRow.Index], false);
                    checkButton66.Text = "Invisible Ped [ON]";
                    checkButton66.BackColor = Color.MediumSpringGreen;
                    DataG5Invisible[dataGridView5.CurrentRow.Index] = true;
                }
                else
                {
                    Functions.RPCFunc.ENTITY_VISIBLE(SpawnedPedLobby[dataGridView5.CurrentRow.Index], true);
                    checkButton66.Text = "Invisible Ped [OFF]";
                    checkButton66.ResetBackColor();
                    DataG5Invisible[dataGridView5.CurrentRow.Index] = false;
                }
            }
            else
            {
                XtraMessageBox.Show("Select a Ped from the list first..", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void checkButton54_CheckedChanged(object sender, EventArgs e)
        {
            if (datag5OK == true)
            {
                if (checkButton54.Checked)
                {
                    Functions.RPCFunc.OHK(SpawnedPedLobby[dataGridView5.CurrentRow.Index], 700f);
                    checkButton54.Text = "One Hit Kill Ped [ON]";
                    checkButton54.BackColor = Color.MediumSpringGreen;
                    DataG5ohk[dataGridView5.CurrentRow.Index] = true;
                }
                else
                {
                    Functions.RPCFunc.OHK(SpawnedPedLobby[dataGridView5.CurrentRow.Index], 1f);
                    checkButton54.Text = "One Hit Kill Ped [OFF]";
                    checkButton54.ResetBackColor();
                    DataG5ohk[dataGridView5.CurrentRow.Index] = false;
                }
            }
            else
            {
                XtraMessageBox.Show("Select a Ped from the list first..", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void checkButton53_CheckedChanged(object sender, EventArgs e)
        {
            if (datag5OK == true)
            {
                if (checkButton53.Checked)
                {
                    SET_ENTITY_INVINCIBLE(SpawnedPedLobby[dataGridView5.CurrentRow.Index], 1);
                    Functions.RPCFunc.ENTITY_CAN_BE_DAMAGED(SpawnedPedLobby[dataGridView5.CurrentRow.Index], 0);
                    checkButton53.Text = "God Mode Ped [ON]";
                    checkButton53.BackColor = Color.MediumSpringGreen;
                    DataG5GodMode[dataGridView5.CurrentRow.Index] = true;
                }
                else
                {
                    SET_ENTITY_INVINCIBLE(SpawnedPedLobby[dataGridView5.CurrentRow.Index], 0);
                    Functions.RPCFunc.ENTITY_CAN_BE_DAMAGED(SpawnedPedLobby[dataGridView5.CurrentRow.Index], 1);
                    checkButton53.Text = "God Mode Ped [OFF]";
                    checkButton53.ResetBackColor();
                    DataG5GodMode[dataGridView5.CurrentRow.Index] = false;
                }
            }
            else
            {
                XtraMessageBox.Show("Select a Ped from the list first..", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void dataGridView5_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (datag5OK == true)
            {
                int SIndex = dataGridView5.CurrentRow.Index;
                if (DataG5GodMode[SIndex] == true)
                {
                    checkButton66.Checked = true;
                    checkButton66.BackColor = Color.MediumSpringGreen;
                    checkButton66.Text = "God Mode Ped [ON]";
                }
                else
                {
                    checkButton66.Checked = false;
                    checkButton66.ResetBackColor();
                    checkButton66.Text = "God Mode Ped [OFF]";
                }

                if (DataG5Invisible[SIndex] == true)
                {
                    checkButton54.Checked = true;
                    checkButton54.BackColor = Color.MediumSpringGreen;
                    checkButton54.Text = "Invisibile Ped [ON]";
                }
                else
                {
                    checkButton54.Checked = false;
                    checkButton54.ResetBackColor();
                    checkButton54.Text = "Invisibile Ped [OFF]";
                }

                if (DataG5ohk[SIndex] == true)
                {
                    checkButton53.Checked = true;
                    checkButton53.BackColor = Color.MediumSpringGreen;
                    checkButton53.Text = "One Hit Kill Ped [ON]";
                }
                else
                {
                    checkButton53.Checked = false;
                    checkButton53.ResetBackColor();
                    checkButton53.Text = "One Hit Kill Ped [OFF]";
                }
            }
        }

        private void simpleButton159_Click(object sender, EventArgs e)
        {
            if (datag3OK == true)
            {
                int me = PLAYER_PED_ID();
                float[] coord = GET_ENTITY_COORDS(me);
                Functions.RPCFunc.SET_ENTITY_COORDS(SpawnedBodyG[dataGridView3.CurrentRow.Index], coord);
            }
            else
            {
                XtraMessageBox.Show("Select a Bodyguard from the list first..", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void simpleButton163_Click(object sender, EventArgs e)
        {
            if (datag3OK == true)
            {
                int ped = GET_PLAYER_PED(dataGridView2.CurrentRow.Index);
                float[] coord = GET_ENTITY_COORDS(ped);
                Functions.RPCFunc.SET_ENTITY_COORDS(SpawnedBodyG[dataGridView3.CurrentRow.Index], coord);
            }
            else
            {
                XtraMessageBox.Show("Select a Bodyguard from the list first..", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void trackBarControl3_EditValueChanged(object sender, EventArgs e)
        {
            if (Attached)
            {
                ClassicRPC.Call(Natives.SET_GRAVITY_LEVEL, new object[] { trackBarControl3.Value });
            }
        }

        private void buttonEdit49_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            string[] strVeh = new string[listBoxControl8.Items.Count];
            for (int i = 0; i < strVeh.Length; i++)
            {
                strVeh[i] = listBoxControl8.Items[i].ToString();
            }
            string strfind = buttonEdit49.Text.ToUpper();
            int select = -1;
            if (strfind != "")
            {
                for (int i = 0; i < strVeh.Length; i++)
                {
                    if (strVeh[i].Contains(strfind))
                    {
                        select = i;
                    }
                }
            }
            if (select != -1)
            {
                listBoxControl8.SelectedIndex = select;
            }
            else
            {
                XtraMessageBox.Show("Vehicle does not exist.. :(", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void barButtonItem18_ItemClick(object sender, ItemClickEventArgs e)
        {
            Process.Start("https://paypal.me/CyberModding/5");
        }

        private void barButtonItem19_ItemClick(object sender, ItemClickEventArgs e)
        {
            Process.Start("https://paypal.me/CyberModding/10");
        }

        private void barButtonItem20_ItemClick(object sender, ItemClickEventArgs e)
        {
            Process.Start("https://paypal.me/CyberModding/20");
        }

        private void barButtonItem21_ItemClick(object sender, ItemClickEventArgs e)
        {
            Process.Start("https://paypal.me/CyberModding");
        }
    }
}